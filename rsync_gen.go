// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
	"github.com/glycerine/rpc25519/jcdc"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *MatchHashPair) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_9db0ba711f6a3e5a_1 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_9db0ba711f6a3e5a_1 uint32
	totalEncodedFields0zgensym_9db0ba711f6a3e5a_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 := totalEncodedFields0zgensym_9db0ba711f6a3e5a_1
	missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1 := maxFields0zgensym_9db0ba711f6a3e5a_1 - totalEncodedFields0zgensym_9db0ba711f6a3e5a_1

	var nextMiss0zgensym_9db0ba711f6a3e5a_1 int32 = -1
	var found0zgensym_9db0ba711f6a3e5a_1 [maxFields0zgensym_9db0ba711f6a3e5a_1]bool
	var curField0zgensym_9db0ba711f6a3e5a_1 string

doneWithStruct0zgensym_9db0ba711f6a3e5a_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 || missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1, missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1, msgp.ShowFound(found0zgensym_9db0ba711f6a3e5a_1[:]), decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1)
		if encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 {
			encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_9db0ba711f6a3e5a_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_9db0ba711f6a3e5a_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_9db0ba711f6a3e5a_1 = 0
			}
			for nextMiss0zgensym_9db0ba711f6a3e5a_1 < maxFields0zgensym_9db0ba711f6a3e5a_1 && (found0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1] || decodeMsgFieldSkip0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1]) {
				nextMiss0zgensym_9db0ba711f6a3e5a_1++
			}
			if nextMiss0zgensym_9db0ba711f6a3e5a_1 == maxFields0zgensym_9db0ba711f6a3e5a_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_9db0ba711f6a3e5a_1
			}
			missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1--
			curField0zgensym_9db0ba711f6a3e5a_1 = decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_9db0ba711f6a3e5a_1)
		switch curField0zgensym_9db0ba711f6a3e5a_1 {
		// -- templateDecodeMsg ends here --

		case "A_zid00_ptr":
			found0zgensym_9db0ba711f6a3e5a_1[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.A != nil {
					dc.PushAlwaysNil()
					err = z.A.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.A == nil {
					z.A = new(RsyncChunk)
				}
				dc.DedupIndexEachPtr(z.A)

				err = z.A.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "B_zid01_ptr":
			found0zgensym_9db0ba711f6a3e5a_1[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.B != nil {
					dc.PushAlwaysNil()
					err = z.B.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.B == nil {
					z.B = new(RsyncChunk)
				}
				dc.DedupIndexEachPtr(z.B)

				err = z.B.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_9db0ba711f6a3e5a_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MatchHashPair
var decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1 = []string{"A_zid00_ptr", "B_zid01_ptr"}

var decodeMsgFieldSkip0zgensym_9db0ba711f6a3e5a_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *MatchHashPair) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.A == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.B == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *MatchHashPair) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_2 [2]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_3 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'MatchHashPair'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x50, 0x61, 0x69, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[0] {
		// write "A_zid00_ptr"
		err = en.Append(0xab, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.A == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.A)
			if err != nil {
				return
			}
			if !dup {
				err = z.A.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[1] {
		// write "B_zid01_ptr"
		err = en.Append(0xab, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.B == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.B)
			if err != nil {
				return
			}
			if !dup {
				err = z.B.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MatchHashPair) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "A_zid00_ptr"
		o = append(o, 0xab, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.A == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.A.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "B_zid01_ptr"
		o = append(o, 0xab, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.B == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.B.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MatchHashPair) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *MatchHashPair) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_9db0ba711f6a3e5a_5 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_9db0ba711f6a3e5a_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_9db0ba711f6a3e5a_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 := totalEncodedFields4zgensym_9db0ba711f6a3e5a_5
	missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5 := maxFields4zgensym_9db0ba711f6a3e5a_5 - totalEncodedFields4zgensym_9db0ba711f6a3e5a_5

	var nextMiss4zgensym_9db0ba711f6a3e5a_5 int32 = -1
	var found4zgensym_9db0ba711f6a3e5a_5 [maxFields4zgensym_9db0ba711f6a3e5a_5]bool
	var curField4zgensym_9db0ba711f6a3e5a_5 string

doneWithStruct4zgensym_9db0ba711f6a3e5a_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 || missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5, missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5, msgp.ShowFound(found4zgensym_9db0ba711f6a3e5a_5[:]), unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5)
		if encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 {
			encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_9db0ba711f6a3e5a_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_9db0ba711f6a3e5a_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_9db0ba711f6a3e5a_5 = 0
			}
			for nextMiss4zgensym_9db0ba711f6a3e5a_5 < maxFields4zgensym_9db0ba711f6a3e5a_5 && (found4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5] || unmarshalMsgFieldSkip4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5]) {
				nextMiss4zgensym_9db0ba711f6a3e5a_5++
			}
			if nextMiss4zgensym_9db0ba711f6a3e5a_5 == maxFields4zgensym_9db0ba711f6a3e5a_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_9db0ba711f6a3e5a_5
			}
			missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5--
			curField4zgensym_9db0ba711f6a3e5a_5 = unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_9db0ba711f6a3e5a_5)
		switch curField4zgensym_9db0ba711f6a3e5a_5 {
		// -- templateUnmarshalMsg ends here --

		case "A_zid00_ptr":
			found4zgensym_9db0ba711f6a3e5a_5[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.A", alias:"RsyncChunk", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.A != nil {
					z.A.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.A {
						z.A.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.A == nil {
						z.A = new(RsyncChunk)
					}

					bts, err = z.A.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "B_zid01_ptr":
			found4zgensym_9db0ba711f6a3e5a_5[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.B", alias:"RsyncChunk", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.B != nil {
					z.B.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.B {
						z.B.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.B == nil {
						z.B = new(RsyncChunk)
					}

					bts, err = z.B.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_9db0ba711f6a3e5a_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MatchHashPair
var unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5 = []string{"A_zid00_ptr", "B_zid01_ptr"}

var unmarshalMsgFieldSkip4zgensym_9db0ba711f6a3e5a_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MatchHashPair) Msgsize() (s int) {
	s = 1 + 12
	if z.A == nil {
		s += msgp.NilSize
	} else {
		s += z.A.Msgsize()
	}
	s += 12
	if z.B == nil {
		s += msgp.NilSize
	} else {
		s += z.B.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncChunk) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_9db0ba711f6a3e5a_7 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_9db0ba711f6a3e5a_7 uint32
	totalEncodedFields6zgensym_9db0ba711f6a3e5a_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_9db0ba711f6a3e5a_7 := totalEncodedFields6zgensym_9db0ba711f6a3e5a_7
	missingFieldsLeft6zgensym_9db0ba711f6a3e5a_7 := maxFields6zgensym_9db0ba711f6a3e5a_7 - totalEncodedFields6zgensym_9db0ba711f6a3e5a_7

	var nextMiss6zgensym_9db0ba711f6a3e5a_7 int32 = -1
	var found6zgensym_9db0ba711f6a3e5a_7 [maxFields6zgensym_9db0ba711f6a3e5a_7]bool
	var curField6zgensym_9db0ba711f6a3e5a_7 string

doneWithStruct6zgensym_9db0ba711f6a3e5a_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_9db0ba711f6a3e5a_7 > 0 || missingFieldsLeft6zgensym_9db0ba711f6a3e5a_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_9db0ba711f6a3e5a_7, missingFieldsLeft6zgensym_9db0ba711f6a3e5a_7, msgp.ShowFound(found6zgensym_9db0ba711f6a3e5a_7[:]), decodeMsgFieldOrder6zgensym_9db0ba711f6a3e5a_7)
		if encodedFieldsLeft6zgensym_9db0ba711f6a3e5a_7 > 0 {
			encodedFieldsLeft6zgensym_9db0ba711f6a3e5a_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_9db0ba711f6a3e5a_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_9db0ba711f6a3e5a_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_9db0ba711f6a3e5a_7 = 0
			}
			for nextMiss6zgensym_9db0ba711f6a3e5a_7 < maxFields6zgensym_9db0ba711f6a3e5a_7 && (found6zgensym_9db0ba711f6a3e5a_7[nextMiss6zgensym_9db0ba711f6a3e5a_7] || decodeMsgFieldSkip6zgensym_9db0ba711f6a3e5a_7[nextMiss6zgensym_9db0ba711f6a3e5a_7]) {
				nextMiss6zgensym_9db0ba711f6a3e5a_7++
			}
			if nextMiss6zgensym_9db0ba711f6a3e5a_7 == maxFields6zgensym_9db0ba711f6a3e5a_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_9db0ba711f6a3e5a_7
			}
			missingFieldsLeft6zgensym_9db0ba711f6a3e5a_7--
			curField6zgensym_9db0ba711f6a3e5a_7 = decodeMsgFieldOrder6zgensym_9db0ba711f6a3e5a_7[nextMiss6zgensym_9db0ba711f6a3e5a_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_9db0ba711f6a3e5a_7)
		switch curField6zgensym_9db0ba711f6a3e5a_7 {
		// -- templateDecodeMsg ends here --

		case "ChunkNumber_zid00_int":
			found6zgensym_9db0ba711f6a3e5a_7[0] = true
			z.ChunkNumber, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Beg_zid01_int":
			found6zgensym_9db0ba711f6a3e5a_7[1] = true
			z.Beg, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Endx_zid02_int":
			found6zgensym_9db0ba711f6a3e5a_7[2] = true
			z.Endx, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Hash_zid03_str":
			found6zgensym_9db0ba711f6a3e5a_7[3] = true
			z.Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Len_zid04_int":
			found6zgensym_9db0ba711f6a3e5a_7[4] = true
			z.Len, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_9db0ba711f6a3e5a_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncChunk
var decodeMsgFieldOrder6zgensym_9db0ba711f6a3e5a_7 = []string{"ChunkNumber_zid00_int", "Beg_zid01_int", "Endx_zid02_int", "Hash_zid03_str", "Len_zid04_int"}

var decodeMsgFieldSkip6zgensym_9db0ba711f6a3e5a_7 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncChunk) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (z.ChunkNumber == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Beg == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Endx == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Hash) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Len == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncChunk) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_8 [5]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_9 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncChunk'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_8[0] {
		// write "ChunkNumber_zid00_int"
		err = en.Append(0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.ChunkNumber)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_8[1] {
		// write "Beg_zid01_int"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_8[2] {
		// write "Endx_zid02_int"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Endx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_8[3] {
		// write "Hash_zid03_str"
		err = en.Append(0xae, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Hash)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_8[4] {
		// write "Len_zid04_int"
		err = en.Append(0xad, 0x4c, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Len)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncChunk) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ChunkNumber_zid00_int"
		o = append(o, 0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.ChunkNumber)
	}

	if !empty[1] {
		// string "Beg_zid01_int"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Beg)
	}

	if !empty[2] {
		// string "Endx_zid02_int"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Endx)
	}

	if !empty[3] {
		// string "Hash_zid03_str"
		o = append(o, 0xae, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Hash)
	}

	if !empty[4] {
		// string "Len_zid04_int"
		o = append(o, 0xad, 0x4c, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Len)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncChunk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncChunk) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_9db0ba711f6a3e5a_11 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_9db0ba711f6a3e5a_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_9db0ba711f6a3e5a_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 := totalEncodedFields10zgensym_9db0ba711f6a3e5a_11
	missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11 := maxFields10zgensym_9db0ba711f6a3e5a_11 - totalEncodedFields10zgensym_9db0ba711f6a3e5a_11

	var nextMiss10zgensym_9db0ba711f6a3e5a_11 int32 = -1
	var found10zgensym_9db0ba711f6a3e5a_11 [maxFields10zgensym_9db0ba711f6a3e5a_11]bool
	var curField10zgensym_9db0ba711f6a3e5a_11 string

doneWithStruct10zgensym_9db0ba711f6a3e5a_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 || missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11, missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11, msgp.ShowFound(found10zgensym_9db0ba711f6a3e5a_11[:]), unmarshalMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11)
		if encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 {
			encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_9db0ba711f6a3e5a_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_9db0ba711f6a3e5a_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_9db0ba711f6a3e5a_11 = 0
			}
			for nextMiss10zgensym_9db0ba711f6a3e5a_11 < maxFields10zgensym_9db0ba711f6a3e5a_11 && (found10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11] || unmarshalMsgFieldSkip10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11]) {
				nextMiss10zgensym_9db0ba711f6a3e5a_11++
			}
			if nextMiss10zgensym_9db0ba711f6a3e5a_11 == maxFields10zgensym_9db0ba711f6a3e5a_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_9db0ba711f6a3e5a_11
			}
			missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11--
			curField10zgensym_9db0ba711f6a3e5a_11 = unmarshalMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_9db0ba711f6a3e5a_11)
		switch curField10zgensym_9db0ba711f6a3e5a_11 {
		// -- templateUnmarshalMsg ends here --

		case "ChunkNumber_zid00_int":
			found10zgensym_9db0ba711f6a3e5a_11[0] = true
			z.ChunkNumber, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Beg_zid01_int":
			found10zgensym_9db0ba711f6a3e5a_11[1] = true
			z.Beg, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid02_int":
			found10zgensym_9db0ba711f6a3e5a_11[2] = true
			z.Endx, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Hash_zid03_str":
			found10zgensym_9db0ba711f6a3e5a_11[3] = true
			z.Hash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Len_zid04_int":
			found10zgensym_9db0ba711f6a3e5a_11[4] = true
			z.Len, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_9db0ba711f6a3e5a_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncChunk
var unmarshalMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11 = []string{"ChunkNumber_zid00_int", "Beg_zid01_int", "Endx_zid02_int", "Hash_zid03_str", "Len_zid04_int"}

var unmarshalMsgFieldSkip10zgensym_9db0ba711f6a3e5a_11 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncChunk) Msgsize() (s int) {
	s = 1 + 22 + msgp.IntSize + 14 + msgp.IntSize + 15 + msgp.IntSize + 15 + msgp.StringPrefixSize + len(z.Hash) + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncDiff) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields15zgensym_9db0ba711f6a3e5a_16 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields15zgensym_9db0ba711f6a3e5a_16 uint32
	totalEncodedFields15zgensym_9db0ba711f6a3e5a_16, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft15zgensym_9db0ba711f6a3e5a_16 := totalEncodedFields15zgensym_9db0ba711f6a3e5a_16
	missingFieldsLeft15zgensym_9db0ba711f6a3e5a_16 := maxFields15zgensym_9db0ba711f6a3e5a_16 - totalEncodedFields15zgensym_9db0ba711f6a3e5a_16

	var nextMiss15zgensym_9db0ba711f6a3e5a_16 int32 = -1
	var found15zgensym_9db0ba711f6a3e5a_16 [maxFields15zgensym_9db0ba711f6a3e5a_16]bool
	var curField15zgensym_9db0ba711f6a3e5a_16 string

doneWithStruct15zgensym_9db0ba711f6a3e5a_16:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft15zgensym_9db0ba711f6a3e5a_16 > 0 || missingFieldsLeft15zgensym_9db0ba711f6a3e5a_16 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft15zgensym_9db0ba711f6a3e5a_16, missingFieldsLeft15zgensym_9db0ba711f6a3e5a_16, msgp.ShowFound(found15zgensym_9db0ba711f6a3e5a_16[:]), decodeMsgFieldOrder15zgensym_9db0ba711f6a3e5a_16)
		if encodedFieldsLeft15zgensym_9db0ba711f6a3e5a_16 > 0 {
			encodedFieldsLeft15zgensym_9db0ba711f6a3e5a_16--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField15zgensym_9db0ba711f6a3e5a_16 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss15zgensym_9db0ba711f6a3e5a_16 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss15zgensym_9db0ba711f6a3e5a_16 = 0
			}
			for nextMiss15zgensym_9db0ba711f6a3e5a_16 < maxFields15zgensym_9db0ba711f6a3e5a_16 && (found15zgensym_9db0ba711f6a3e5a_16[nextMiss15zgensym_9db0ba711f6a3e5a_16] || decodeMsgFieldSkip15zgensym_9db0ba711f6a3e5a_16[nextMiss15zgensym_9db0ba711f6a3e5a_16]) {
				nextMiss15zgensym_9db0ba711f6a3e5a_16++
			}
			if nextMiss15zgensym_9db0ba711f6a3e5a_16 == maxFields15zgensym_9db0ba711f6a3e5a_16 {
				// filled all the empty fields!
				break doneWithStruct15zgensym_9db0ba711f6a3e5a_16
			}
			missingFieldsLeft15zgensym_9db0ba711f6a3e5a_16--
			curField15zgensym_9db0ba711f6a3e5a_16 = decodeMsgFieldOrder15zgensym_9db0ba711f6a3e5a_16[nextMiss15zgensym_9db0ba711f6a3e5a_16]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField15zgensym_9db0ba711f6a3e5a_16)
		switch curField15zgensym_9db0ba711f6a3e5a_16 {
		// -- templateDecodeMsg ends here --

		case "HostA_zid00_str":
			found15zgensym_9db0ba711f6a3e5a_16[0] = true
			z.HostA, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PathA_zid01_str":
			found15zgensym_9db0ba711f6a3e5a_16[1] = true
			z.PathA, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HashesA_zid02_ptr":
			found15zgensym_9db0ba711f6a3e5a_16[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.HashesA != nil {
					dc.PushAlwaysNil()
					err = z.HashesA.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.HashesA == nil {
					z.HashesA = new(RsyncHashes)
				}
				dc.DedupIndexEachPtr(z.HashesA)

				err = z.HashesA.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "HostB_zid03_str":
			found15zgensym_9db0ba711f6a3e5a_16[3] = true
			z.HostB, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PathB_zid04_str":
			found15zgensym_9db0ba711f6a3e5a_16[4] = true
			z.PathB, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HashesB_zid05_ptr":
			found15zgensym_9db0ba711f6a3e5a_16[5] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.HashesB != nil {
					dc.PushAlwaysNil()
					err = z.HashesB.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.HashesB == nil {
					z.HashesB = new(RsyncHashes)
				}
				dc.DedupIndexEachPtr(z.HashesB)

				err = z.HashesB.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Both_zid06_slc":
			found15zgensym_9db0ba711f6a3e5a_16[6] = true
			var zgensym_9db0ba711f6a3e5a_17 uint32
			zgensym_9db0ba711f6a3e5a_17, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Both) >= int(zgensym_9db0ba711f6a3e5a_17) {
				z.Both = (z.Both)[:zgensym_9db0ba711f6a3e5a_17]
			} else {
				z.Both = make([]*MatchHashPair, zgensym_9db0ba711f6a3e5a_17)
			}
			for zgensym_9db0ba711f6a3e5a_12 := range z.Both {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Both[zgensym_9db0ba711f6a3e5a_12] != nil {
						dc.PushAlwaysNil()
						err = z.Both[zgensym_9db0ba711f6a3e5a_12].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Both[zgensym_9db0ba711f6a3e5a_12] == nil {
						z.Both[zgensym_9db0ba711f6a3e5a_12] = new(MatchHashPair)
					}
					dc.DedupIndexEachPtr(z.Both[zgensym_9db0ba711f6a3e5a_12])

					err = z.Both[zgensym_9db0ba711f6a3e5a_12].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "OnlyA_zid07_slc":
			found15zgensym_9db0ba711f6a3e5a_16[7] = true
			var zgensym_9db0ba711f6a3e5a_18 uint32
			zgensym_9db0ba711f6a3e5a_18, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.OnlyA) >= int(zgensym_9db0ba711f6a3e5a_18) {
				z.OnlyA = (z.OnlyA)[:zgensym_9db0ba711f6a3e5a_18]
			} else {
				z.OnlyA = make([]*RsyncChunk, zgensym_9db0ba711f6a3e5a_18)
			}
			for zgensym_9db0ba711f6a3e5a_13 := range z.OnlyA {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] != nil {
						dc.PushAlwaysNil()
						err = z.OnlyA[zgensym_9db0ba711f6a3e5a_13].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] == nil {
						z.OnlyA[zgensym_9db0ba711f6a3e5a_13] = new(RsyncChunk)
					}
					dc.DedupIndexEachPtr(z.OnlyA[zgensym_9db0ba711f6a3e5a_13])

					err = z.OnlyA[zgensym_9db0ba711f6a3e5a_13].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "OnlyB_zid08_slc":
			found15zgensym_9db0ba711f6a3e5a_16[8] = true
			var zgensym_9db0ba711f6a3e5a_19 uint32
			zgensym_9db0ba711f6a3e5a_19, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.OnlyB) >= int(zgensym_9db0ba711f6a3e5a_19) {
				z.OnlyB = (z.OnlyB)[:zgensym_9db0ba711f6a3e5a_19]
			} else {
				z.OnlyB = make([]*RsyncChunk, zgensym_9db0ba711f6a3e5a_19)
			}
			for zgensym_9db0ba711f6a3e5a_14 := range z.OnlyB {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] != nil {
						dc.PushAlwaysNil()
						err = z.OnlyB[zgensym_9db0ba711f6a3e5a_14].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] == nil {
						z.OnlyB[zgensym_9db0ba711f6a3e5a_14] = new(RsyncChunk)
					}
					dc.DedupIndexEachPtr(z.OnlyB[zgensym_9db0ba711f6a3e5a_14])

					err = z.OnlyB[zgensym_9db0ba711f6a3e5a_14].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss15zgensym_9db0ba711f6a3e5a_16 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncDiff
var decodeMsgFieldOrder15zgensym_9db0ba711f6a3e5a_16 = []string{"HostA_zid00_str", "PathA_zid01_str", "HashesA_zid02_ptr", "HostB_zid03_str", "PathB_zid04_str", "HashesB_zid05_ptr", "Both_zid06_slc", "OnlyA_zid07_slc", "OnlyB_zid08_slc"}

var decodeMsgFieldSkip15zgensym_9db0ba711f6a3e5a_16 = []bool{false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncDiff) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 9
	}
	var fieldsInUse uint32 = 9
	isempty[0] = (len(z.HostA) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.PathA) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.HashesA == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.HostB) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.PathB) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.HashesB == nil) // pointer, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.Both) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.OnlyA) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.OnlyB) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncDiff) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_20 [9]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_21 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_20[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_21 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncDiff'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x66, 0x66})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[0] {
		// write "HostA_zid00_str"
		err = en.Append(0xaf, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.HostA)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[1] {
		// write "PathA_zid01_str"
		err = en.Append(0xaf, 0x50, 0x61, 0x74, 0x68, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PathA)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[2] {
		// write "HashesA_zid02_ptr"
		err = en.Append(0xb1, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.HashesA == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.HashesA)
			if err != nil {
				return
			}
			if !dup {
				err = z.HashesA.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[3] {
		// write "HostB_zid03_str"
		err = en.Append(0xaf, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.HostB)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[4] {
		// write "PathB_zid04_str"
		err = en.Append(0xaf, 0x50, 0x61, 0x74, 0x68, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PathB)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[5] {
		// write "HashesB_zid05_ptr"
		err = en.Append(0xb1, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.HashesB == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.HashesB)
			if err != nil {
				return
			}
			if !dup {
				err = z.HashesB.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[6] {
		// write "Both_zid06_slc"
		err = en.Append(0xae, 0x42, 0x6f, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Both)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_12 := range z.Both {
			// gPtr.encodeGen():

			if z.Both[zgensym_9db0ba711f6a3e5a_12] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(z.Both[zgensym_9db0ba711f6a3e5a_12])
				if err != nil {
					return
				}
				if !dup {
					err = z.Both[zgensym_9db0ba711f6a3e5a_12].EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[7] {
		// write "OnlyA_zid07_slc"
		err = en.Append(0xaf, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.OnlyA)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_13 := range z.OnlyA {
			// gPtr.encodeGen():

			if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(z.OnlyA[zgensym_9db0ba711f6a3e5a_13])
				if err != nil {
					return
				}
				if !dup {
					err = z.OnlyA[zgensym_9db0ba711f6a3e5a_13].EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[8] {
		// write "OnlyB_zid08_slc"
		err = en.Append(0xaf, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.OnlyB)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_14 := range z.OnlyB {
			// gPtr.encodeGen():

			if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(z.OnlyB[zgensym_9db0ba711f6a3e5a_14])
				if err != nil {
					return
				}
				if !dup {
					err = z.OnlyB[zgensym_9db0ba711f6a3e5a_14].EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncDiff) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "HostA_zid00_str"
		o = append(o, 0xaf, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.HostA)
	}

	if !empty[1] {
		// string "PathA_zid01_str"
		o = append(o, 0xaf, 0x50, 0x61, 0x74, 0x68, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PathA)
	}

	if !empty[2] {
		// string "HashesA_zid02_ptr"
		o = append(o, 0xb1, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.HashesA == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.HashesA.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// string "HostB_zid03_str"
		o = append(o, 0xaf, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.HostB)
	}

	if !empty[4] {
		// string "PathB_zid04_str"
		o = append(o, 0xaf, 0x50, 0x61, 0x74, 0x68, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PathB)
	}

	if !empty[5] {
		// string "HashesB_zid05_ptr"
		o = append(o, 0xb1, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.HashesB == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.HashesB.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[6] {
		// string "Both_zid06_slc"
		o = append(o, 0xae, 0x42, 0x6f, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Both)))
		for zgensym_9db0ba711f6a3e5a_12 := range z.Both {
			// marshalGen.gPtr()

			if z.Both[zgensym_9db0ba711f6a3e5a_12] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Both[zgensym_9db0ba711f6a3e5a_12].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[7] {
		// string "OnlyA_zid07_slc"
		o = append(o, 0xaf, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.OnlyA)))
		for zgensym_9db0ba711f6a3e5a_13 := range z.OnlyA {
			// marshalGen.gPtr()

			if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.OnlyA[zgensym_9db0ba711f6a3e5a_13].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[8] {
		// string "OnlyB_zid08_slc"
		o = append(o, 0xaf, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.OnlyB)))
		for zgensym_9db0ba711f6a3e5a_14 := range z.OnlyB {
			// marshalGen.gPtr()

			if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.OnlyB[zgensym_9db0ba711f6a3e5a_14].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncDiff) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncDiff) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields22zgensym_9db0ba711f6a3e5a_23 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields22zgensym_9db0ba711f6a3e5a_23 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields22zgensym_9db0ba711f6a3e5a_23, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23 := totalEncodedFields22zgensym_9db0ba711f6a3e5a_23
	missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23 := maxFields22zgensym_9db0ba711f6a3e5a_23 - totalEncodedFields22zgensym_9db0ba711f6a3e5a_23

	var nextMiss22zgensym_9db0ba711f6a3e5a_23 int32 = -1
	var found22zgensym_9db0ba711f6a3e5a_23 [maxFields22zgensym_9db0ba711f6a3e5a_23]bool
	var curField22zgensym_9db0ba711f6a3e5a_23 string

doneWithStruct22zgensym_9db0ba711f6a3e5a_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23 > 0 || missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23, missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23, msgp.ShowFound(found22zgensym_9db0ba711f6a3e5a_23[:]), unmarshalMsgFieldOrder22zgensym_9db0ba711f6a3e5a_23)
		if encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23 > 0 {
			encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField22zgensym_9db0ba711f6a3e5a_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_9db0ba711f6a3e5a_23 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss22zgensym_9db0ba711f6a3e5a_23 = 0
			}
			for nextMiss22zgensym_9db0ba711f6a3e5a_23 < maxFields22zgensym_9db0ba711f6a3e5a_23 && (found22zgensym_9db0ba711f6a3e5a_23[nextMiss22zgensym_9db0ba711f6a3e5a_23] || unmarshalMsgFieldSkip22zgensym_9db0ba711f6a3e5a_23[nextMiss22zgensym_9db0ba711f6a3e5a_23]) {
				nextMiss22zgensym_9db0ba711f6a3e5a_23++
			}
			if nextMiss22zgensym_9db0ba711f6a3e5a_23 == maxFields22zgensym_9db0ba711f6a3e5a_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_9db0ba711f6a3e5a_23
			}
			missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23--
			curField22zgensym_9db0ba711f6a3e5a_23 = unmarshalMsgFieldOrder22zgensym_9db0ba711f6a3e5a_23[nextMiss22zgensym_9db0ba711f6a3e5a_23]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField22zgensym_9db0ba711f6a3e5a_23)
		switch curField22zgensym_9db0ba711f6a3e5a_23 {
		// -- templateUnmarshalMsg ends here --

		case "HostA_zid00_str":
			found22zgensym_9db0ba711f6a3e5a_23[0] = true
			z.HostA, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PathA_zid01_str":
			found22zgensym_9db0ba711f6a3e5a_23[1] = true
			z.PathA, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "HashesA_zid02_ptr":
			found22zgensym_9db0ba711f6a3e5a_23[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.HashesA", alias:"RsyncHashes", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.HashesA != nil {
					z.HashesA.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.HashesA {
						z.HashesA.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.HashesA == nil {
						z.HashesA = new(RsyncHashes)
					}

					bts, err = z.HashesA.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "HostB_zid03_str":
			found22zgensym_9db0ba711f6a3e5a_23[3] = true
			z.HostB, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PathB_zid04_str":
			found22zgensym_9db0ba711f6a3e5a_23[4] = true
			z.PathB, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "HashesB_zid05_ptr":
			found22zgensym_9db0ba711f6a3e5a_23[5] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.HashesB", alias:"RsyncHashes", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.HashesB != nil {
					z.HashesB.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.HashesB {
						z.HashesB.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.HashesB == nil {
						z.HashesB = new(RsyncHashes)
					}

					bts, err = z.HashesB.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Both_zid06_slc":
			found22zgensym_9db0ba711f6a3e5a_23[6] = true
			if nbs.AlwaysNil {
				(z.Both) = (z.Both)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_24 uint32
				zgensym_9db0ba711f6a3e5a_24, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Both) >= int(zgensym_9db0ba711f6a3e5a_24) {
					z.Both = (z.Both)[:zgensym_9db0ba711f6a3e5a_24]
				} else {
					z.Both = make([]*MatchHashPair, zgensym_9db0ba711f6a3e5a_24)
				}
				for zgensym_9db0ba711f6a3e5a_12 := range z.Both {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Both[zgensym_9db0ba711f6a3e5a_12]", alias:"MatchHashPair", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Both[zgensym_9db0ba711f6a3e5a_12] != nil {
							z.Both[zgensym_9db0ba711f6a3e5a_12].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Both[zgensym_9db0ba711f6a3e5a_12] {
								z.Both[zgensym_9db0ba711f6a3e5a_12].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Both[zgensym_9db0ba711f6a3e5a_12] == nil {
								z.Both[zgensym_9db0ba711f6a3e5a_12] = new(MatchHashPair)
							}

							bts, err = z.Both[zgensym_9db0ba711f6a3e5a_12].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "OnlyA_zid07_slc":
			found22zgensym_9db0ba711f6a3e5a_23[7] = true
			if nbs.AlwaysNil {
				(z.OnlyA) = (z.OnlyA)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_25 uint32
				zgensym_9db0ba711f6a3e5a_25, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.OnlyA) >= int(zgensym_9db0ba711f6a3e5a_25) {
					z.OnlyA = (z.OnlyA)[:zgensym_9db0ba711f6a3e5a_25]
				} else {
					z.OnlyA = make([]*RsyncChunk, zgensym_9db0ba711f6a3e5a_25)
				}
				for zgensym_9db0ba711f6a3e5a_13 := range z.OnlyA {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.OnlyA[zgensym_9db0ba711f6a3e5a_13]", alias:"RsyncChunk", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] != nil {
							z.OnlyA[zgensym_9db0ba711f6a3e5a_13].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.OnlyA[zgensym_9db0ba711f6a3e5a_13] {
								z.OnlyA[zgensym_9db0ba711f6a3e5a_13].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] == nil {
								z.OnlyA[zgensym_9db0ba711f6a3e5a_13] = new(RsyncChunk)
							}

							bts, err = z.OnlyA[zgensym_9db0ba711f6a3e5a_13].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "OnlyB_zid08_slc":
			found22zgensym_9db0ba711f6a3e5a_23[8] = true
			if nbs.AlwaysNil {
				(z.OnlyB) = (z.OnlyB)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_26 uint32
				zgensym_9db0ba711f6a3e5a_26, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.OnlyB) >= int(zgensym_9db0ba711f6a3e5a_26) {
					z.OnlyB = (z.OnlyB)[:zgensym_9db0ba711f6a3e5a_26]
				} else {
					z.OnlyB = make([]*RsyncChunk, zgensym_9db0ba711f6a3e5a_26)
				}
				for zgensym_9db0ba711f6a3e5a_14 := range z.OnlyB {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.OnlyB[zgensym_9db0ba711f6a3e5a_14]", alias:"RsyncChunk", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] != nil {
							z.OnlyB[zgensym_9db0ba711f6a3e5a_14].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.OnlyB[zgensym_9db0ba711f6a3e5a_14] {
								z.OnlyB[zgensym_9db0ba711f6a3e5a_14].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] == nil {
								z.OnlyB[zgensym_9db0ba711f6a3e5a_14] = new(RsyncChunk)
							}

							bts, err = z.OnlyB[zgensym_9db0ba711f6a3e5a_14].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_9db0ba711f6a3e5a_23 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncDiff
var unmarshalMsgFieldOrder22zgensym_9db0ba711f6a3e5a_23 = []string{"HostA_zid00_str", "PathA_zid01_str", "HashesA_zid02_ptr", "HostB_zid03_str", "PathB_zid04_str", "HashesB_zid05_ptr", "Both_zid06_slc", "OnlyA_zid07_slc", "OnlyB_zid08_slc"}

var unmarshalMsgFieldSkip22zgensym_9db0ba711f6a3e5a_23 = []bool{false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncDiff) Msgsize() (s int) {
	s = 1 + 16 + msgp.StringPrefixSize + len(z.HostA) + 16 + msgp.StringPrefixSize + len(z.PathA) + 18
	if z.HashesA == nil {
		s += msgp.NilSize
	} else {
		s += z.HashesA.Msgsize()
	}
	s += 16 + msgp.StringPrefixSize + len(z.HostB) + 16 + msgp.StringPrefixSize + len(z.PathB) + 18
	if z.HashesB == nil {
		s += msgp.NilSize
	} else {
		s += z.HashesB.Msgsize()
	}
	s += 15 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_12 := range z.Both {
		if z.Both[zgensym_9db0ba711f6a3e5a_12] == nil {
			s += msgp.NilSize
		} else {
			s += z.Both[zgensym_9db0ba711f6a3e5a_12].Msgsize()
		}
	}
	s += 16 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_13 := range z.OnlyA {
		if z.OnlyA[zgensym_9db0ba711f6a3e5a_13] == nil {
			s += msgp.NilSize
		} else {
			s += z.OnlyA[zgensym_9db0ba711f6a3e5a_13].Msgsize()
		}
	}
	s += 16 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_14 := range z.OnlyB {
		if z.OnlyB[zgensym_9db0ba711f6a3e5a_14] == nil {
			s += msgp.NilSize
		} else {
			s += z.OnlyB[zgensym_9db0ba711f6a3e5a_14].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncHashes) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields28zgensym_9db0ba711f6a3e5a_29 = 19

	// -- templateDecodeMsg starts here--
	var totalEncodedFields28zgensym_9db0ba711f6a3e5a_29 uint32
	totalEncodedFields28zgensym_9db0ba711f6a3e5a_29, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft28zgensym_9db0ba711f6a3e5a_29 := totalEncodedFields28zgensym_9db0ba711f6a3e5a_29
	missingFieldsLeft28zgensym_9db0ba711f6a3e5a_29 := maxFields28zgensym_9db0ba711f6a3e5a_29 - totalEncodedFields28zgensym_9db0ba711f6a3e5a_29

	var nextMiss28zgensym_9db0ba711f6a3e5a_29 int32 = -1
	var found28zgensym_9db0ba711f6a3e5a_29 [maxFields28zgensym_9db0ba711f6a3e5a_29]bool
	var curField28zgensym_9db0ba711f6a3e5a_29 string

doneWithStruct28zgensym_9db0ba711f6a3e5a_29:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft28zgensym_9db0ba711f6a3e5a_29 > 0 || missingFieldsLeft28zgensym_9db0ba711f6a3e5a_29 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft28zgensym_9db0ba711f6a3e5a_29, missingFieldsLeft28zgensym_9db0ba711f6a3e5a_29, msgp.ShowFound(found28zgensym_9db0ba711f6a3e5a_29[:]), decodeMsgFieldOrder28zgensym_9db0ba711f6a3e5a_29)
		if encodedFieldsLeft28zgensym_9db0ba711f6a3e5a_29 > 0 {
			encodedFieldsLeft28zgensym_9db0ba711f6a3e5a_29--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField28zgensym_9db0ba711f6a3e5a_29 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss28zgensym_9db0ba711f6a3e5a_29 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss28zgensym_9db0ba711f6a3e5a_29 = 0
			}
			for nextMiss28zgensym_9db0ba711f6a3e5a_29 < maxFields28zgensym_9db0ba711f6a3e5a_29 && (found28zgensym_9db0ba711f6a3e5a_29[nextMiss28zgensym_9db0ba711f6a3e5a_29] || decodeMsgFieldSkip28zgensym_9db0ba711f6a3e5a_29[nextMiss28zgensym_9db0ba711f6a3e5a_29]) {
				nextMiss28zgensym_9db0ba711f6a3e5a_29++
			}
			if nextMiss28zgensym_9db0ba711f6a3e5a_29 == maxFields28zgensym_9db0ba711f6a3e5a_29 {
				// filled all the empty fields!
				break doneWithStruct28zgensym_9db0ba711f6a3e5a_29
			}
			missingFieldsLeft28zgensym_9db0ba711f6a3e5a_29--
			curField28zgensym_9db0ba711f6a3e5a_29 = decodeMsgFieldOrder28zgensym_9db0ba711f6a3e5a_29[nextMiss28zgensym_9db0ba711f6a3e5a_29]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField28zgensym_9db0ba711f6a3e5a_29)
		switch curField28zgensym_9db0ba711f6a3e5a_29 {
		// -- templateDecodeMsg ends here --

		case "Host_zid00_str":
			found28zgensym_9db0ba711f6a3e5a_29[0] = true
			z.Host, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Path_zid01_str":
			found28zgensym_9db0ba711f6a3e5a_29[1] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ModTime_zid02_tim":
			found28zgensym_9db0ba711f6a3e5a_29[2] = true
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "FileSize_zid03_i64":
			found28zgensym_9db0ba711f6a3e5a_29[3] = true
			z.FileSize, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FileMode_zid04_u32":
			found28zgensym_9db0ba711f6a3e5a_29[4] = true
			z.FileMode, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "FileOwner_zid05_str":
			found28zgensym_9db0ba711f6a3e5a_29[5] = true
			z.FileOwner, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FileOwnerID_zid06_u32":
			found28zgensym_9db0ba711f6a3e5a_29[6] = true
			z.FileOwnerID, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "FileGroup_zid07_str":
			found28zgensym_9db0ba711f6a3e5a_29[7] = true
			z.FileGroup, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FileGroupID_zid08_u32":
			found28zgensym_9db0ba711f6a3e5a_29[8] = true
			z.FileGroupID, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "FileMeta_zid09_bin":
			found28zgensym_9db0ba711f6a3e5a_29[9] = true
			z.FileMeta, err = dc.ReadBytes(z.FileMeta)
			if err != nil {
				return
			}
		case "HashName_zid10_str":
			found28zgensym_9db0ba711f6a3e5a_29[10] = true
			z.HashName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FullFileHashSum_zid11_str":
			found28zgensym_9db0ba711f6a3e5a_29[11] = true
			z.FullFileHashSum, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ChunkerName_zid12_str":
			found28zgensym_9db0ba711f6a3e5a_29[12] = true
			z.ChunkerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CDC_Config_zid13_ptr":
			found28zgensym_9db0ba711f6a3e5a_29[13] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.CDC_Config != nil {
					dc.PushAlwaysNil()
					err = z.CDC_Config.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.CDC_Config == nil {
					z.CDC_Config = new(jcdc.CDC_Config)
				}
				dc.DedupIndexEachPtr(z.CDC_Config)

				err = z.CDC_Config.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "NumChunks_zid14_int":
			found28zgensym_9db0ba711f6a3e5a_29[14] = true
			z.NumChunks, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Chunks_zid15_slc":
			found28zgensym_9db0ba711f6a3e5a_29[15] = true
			var zgensym_9db0ba711f6a3e5a_30 uint32
			zgensym_9db0ba711f6a3e5a_30, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Chunks) >= int(zgensym_9db0ba711f6a3e5a_30) {
				z.Chunks = (z.Chunks)[:zgensym_9db0ba711f6a3e5a_30]
			} else {
				z.Chunks = make([]*RsyncChunk, zgensym_9db0ba711f6a3e5a_30)
			}
			for zgensym_9db0ba711f6a3e5a_27 := range z.Chunks {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Chunks[zgensym_9db0ba711f6a3e5a_27] != nil {
						dc.PushAlwaysNil()
						err = z.Chunks[zgensym_9db0ba711f6a3e5a_27].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Chunks[zgensym_9db0ba711f6a3e5a_27] == nil {
						z.Chunks[zgensym_9db0ba711f6a3e5a_27] = new(RsyncChunk)
					}
					dc.DedupIndexEachPtr(z.Chunks[zgensym_9db0ba711f6a3e5a_27])

					err = z.Chunks[zgensym_9db0ba711f6a3e5a_27].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "Rsync0CallID_zid16_str":
			found28zgensym_9db0ba711f6a3e5a_29[16] = true
			z.Rsync0CallID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsFromSender_zid17_boo":
			found28zgensym_9db0ba711f6a3e5a_29[17] = true
			z.IsFromSender, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Created_zid18_tim":
			found28zgensym_9db0ba711f6a3e5a_29[18] = true
			z.Created, err = dc.ReadTime()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss28zgensym_9db0ba711f6a3e5a_29 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncHashes
var decodeMsgFieldOrder28zgensym_9db0ba711f6a3e5a_29 = []string{"Host_zid00_str", "Path_zid01_str", "ModTime_zid02_tim", "FileSize_zid03_i64", "FileMode_zid04_u32", "FileOwner_zid05_str", "FileOwnerID_zid06_u32", "FileGroup_zid07_str", "FileGroupID_zid08_u32", "FileMeta_zid09_bin", "HashName_zid10_str", "FullFileHashSum_zid11_str", "ChunkerName_zid12_str", "CDC_Config_zid13_ptr", "NumChunks_zid14_int", "Chunks_zid15_slc", "Rsync0CallID_zid16_str", "IsFromSender_zid17_boo", "Created_zid18_tim"}

var decodeMsgFieldSkip28zgensym_9db0ba711f6a3e5a_29 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncHashes) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 19
	}
	var fieldsInUse uint32 = 19
	isempty[0] = (len(z.Host) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Path) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ModTime.IsZero()) // time.Time, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.FileSize == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.FileMode == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.FileOwner) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FileOwnerID == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.FileGroup) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.FileGroupID == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.FileMeta) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.HashName) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.FullFileHashSum) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (len(z.ChunkerName) == 0) // string, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (z.CDC_Config == nil) // pointer, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.NumChunks == 0) // number, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (len(z.Chunks) == 0) // string, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (len(z.Rsync0CallID) == 0) // string, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (!z.IsFromSender) // bool, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (z.Created.IsZero()) // time.Time, omitempty
	if isempty[18] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncHashes) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_31 [19]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_32 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_31[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_32 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncHashes'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[0] {
		// write "Host_zid00_str"
		err = en.Append(0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Host)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[1] {
		// write "Path_zid01_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[2] {
		// write "ModTime_zid02_tim"
		err = en.Append(0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[3] {
		// write "FileSize_zid03_i64"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FileSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[4] {
		// write "FileMode_zid04_u32"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileMode)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[5] {
		// write "FileOwner_zid05_str"
		err = en.Append(0xb3, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FileOwner)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[6] {
		// write "FileOwnerID_zid06_u32"
		err = en.Append(0xb5, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileOwnerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[7] {
		// write "FileGroup_zid07_str"
		err = en.Append(0xb3, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FileGroup)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[8] {
		// write "FileGroupID_zid08_u32"
		err = en.Append(0xb5, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileGroupID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[9] {
		// write "FileMeta_zid09_bin"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.FileMeta)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[10] {
		// write "HashName_zid10_str"
		err = en.Append(0xb2, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.HashName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[11] {
		// write "FullFileHashSum_zid11_str"
		err = en.Append(0xb9, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FullFileHashSum)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[12] {
		// write "ChunkerName_zid12_str"
		err = en.Append(0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ChunkerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[13] {
		// write "CDC_Config_zid13_ptr"
		err = en.Append(0xb4, 0x43, 0x44, 0x43, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.CDC_Config == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.CDC_Config)
			if err != nil {
				return
			}
			if !dup {
				err = z.CDC_Config.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[14] {
		// write "NumChunks_zid14_int"
		err = en.Append(0xb3, 0x4e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.NumChunks)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[15] {
		// write "Chunks_zid15_slc"
		err = en.Append(0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Chunks)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_27 := range z.Chunks {
			// gPtr.encodeGen():

			if z.Chunks[zgensym_9db0ba711f6a3e5a_27] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(z.Chunks[zgensym_9db0ba711f6a3e5a_27])
				if err != nil {
					return
				}
				if !dup {
					err = z.Chunks[zgensym_9db0ba711f6a3e5a_27].EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[16] {
		// write "Rsync0CallID_zid16_str"
		err = en.Append(0xb6, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x30, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Rsync0CallID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[17] {
		// write "IsFromSender_zid17_boo"
		err = en.Append(0xb6, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsFromSender)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_31[18] {
		// write "Created_zid18_tim"
		err = en.Append(0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Created)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncHashes) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [19]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Host_zid00_str"
		o = append(o, 0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Host)
	}

	if !empty[1] {
		// string "Path_zid01_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[2] {
		// string "ModTime_zid02_tim"
		o = append(o, 0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ModTime)
	}

	if !empty[3] {
		// string "FileSize_zid03_i64"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FileSize)
	}

	if !empty[4] {
		// string "FileMode_zid04_u32"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileMode)
	}

	if !empty[5] {
		// string "FileOwner_zid05_str"
		o = append(o, 0xb3, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FileOwner)
	}

	if !empty[6] {
		// string "FileOwnerID_zid06_u32"
		o = append(o, 0xb5, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileOwnerID)
	}

	if !empty[7] {
		// string "FileGroup_zid07_str"
		o = append(o, 0xb3, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FileGroup)
	}

	if !empty[8] {
		// string "FileGroupID_zid08_u32"
		o = append(o, 0xb5, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileGroupID)
	}

	if !empty[9] {
		// string "FileMeta_zid09_bin"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.FileMeta)
	}

	if !empty[10] {
		// string "HashName_zid10_str"
		o = append(o, 0xb2, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.HashName)
	}

	if !empty[11] {
		// string "FullFileHashSum_zid11_str"
		o = append(o, 0xb9, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FullFileHashSum)
	}

	if !empty[12] {
		// string "ChunkerName_zid12_str"
		o = append(o, 0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ChunkerName)
	}

	if !empty[13] {
		// string "CDC_Config_zid13_ptr"
		o = append(o, 0xb4, 0x43, 0x44, 0x43, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.CDC_Config == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.CDC_Config.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[14] {
		// string "NumChunks_zid14_int"
		o = append(o, 0xb3, 0x4e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.NumChunks)
	}

	if !empty[15] {
		// string "Chunks_zid15_slc"
		o = append(o, 0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Chunks)))
		for zgensym_9db0ba711f6a3e5a_27 := range z.Chunks {
			// marshalGen.gPtr()

			if z.Chunks[zgensym_9db0ba711f6a3e5a_27] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Chunks[zgensym_9db0ba711f6a3e5a_27].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[16] {
		// string "Rsync0CallID_zid16_str"
		o = append(o, 0xb6, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x30, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Rsync0CallID)
	}

	if !empty[17] {
		// string "IsFromSender_zid17_boo"
		o = append(o, 0xb6, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsFromSender)
	}

	if !empty[18] {
		// string "Created_zid18_tim"
		o = append(o, 0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Created)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncHashes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncHashes) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields33zgensym_9db0ba711f6a3e5a_34 = 19

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields33zgensym_9db0ba711f6a3e5a_34 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields33zgensym_9db0ba711f6a3e5a_34, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft33zgensym_9db0ba711f6a3e5a_34 := totalEncodedFields33zgensym_9db0ba711f6a3e5a_34
	missingFieldsLeft33zgensym_9db0ba711f6a3e5a_34 := maxFields33zgensym_9db0ba711f6a3e5a_34 - totalEncodedFields33zgensym_9db0ba711f6a3e5a_34

	var nextMiss33zgensym_9db0ba711f6a3e5a_34 int32 = -1
	var found33zgensym_9db0ba711f6a3e5a_34 [maxFields33zgensym_9db0ba711f6a3e5a_34]bool
	var curField33zgensym_9db0ba711f6a3e5a_34 string

doneWithStruct33zgensym_9db0ba711f6a3e5a_34:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft33zgensym_9db0ba711f6a3e5a_34 > 0 || missingFieldsLeft33zgensym_9db0ba711f6a3e5a_34 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft33zgensym_9db0ba711f6a3e5a_34, missingFieldsLeft33zgensym_9db0ba711f6a3e5a_34, msgp.ShowFound(found33zgensym_9db0ba711f6a3e5a_34[:]), unmarshalMsgFieldOrder33zgensym_9db0ba711f6a3e5a_34)
		if encodedFieldsLeft33zgensym_9db0ba711f6a3e5a_34 > 0 {
			encodedFieldsLeft33zgensym_9db0ba711f6a3e5a_34--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField33zgensym_9db0ba711f6a3e5a_34 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss33zgensym_9db0ba711f6a3e5a_34 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss33zgensym_9db0ba711f6a3e5a_34 = 0
			}
			for nextMiss33zgensym_9db0ba711f6a3e5a_34 < maxFields33zgensym_9db0ba711f6a3e5a_34 && (found33zgensym_9db0ba711f6a3e5a_34[nextMiss33zgensym_9db0ba711f6a3e5a_34] || unmarshalMsgFieldSkip33zgensym_9db0ba711f6a3e5a_34[nextMiss33zgensym_9db0ba711f6a3e5a_34]) {
				nextMiss33zgensym_9db0ba711f6a3e5a_34++
			}
			if nextMiss33zgensym_9db0ba711f6a3e5a_34 == maxFields33zgensym_9db0ba711f6a3e5a_34 {
				// filled all the empty fields!
				break doneWithStruct33zgensym_9db0ba711f6a3e5a_34
			}
			missingFieldsLeft33zgensym_9db0ba711f6a3e5a_34--
			curField33zgensym_9db0ba711f6a3e5a_34 = unmarshalMsgFieldOrder33zgensym_9db0ba711f6a3e5a_34[nextMiss33zgensym_9db0ba711f6a3e5a_34]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField33zgensym_9db0ba711f6a3e5a_34)
		switch curField33zgensym_9db0ba711f6a3e5a_34 {
		// -- templateUnmarshalMsg ends here --

		case "Host_zid00_str":
			found33zgensym_9db0ba711f6a3e5a_34[0] = true
			z.Host, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Path_zid01_str":
			found33zgensym_9db0ba711f6a3e5a_34[1] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ModTime_zid02_tim":
			found33zgensym_9db0ba711f6a3e5a_34[2] = true
			z.ModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "FileSize_zid03_i64":
			found33zgensym_9db0ba711f6a3e5a_34[3] = true
			z.FileSize, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FileMode_zid04_u32":
			found33zgensym_9db0ba711f6a3e5a_34[4] = true
			z.FileMode, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "FileOwner_zid05_str":
			found33zgensym_9db0ba711f6a3e5a_34[5] = true
			z.FileOwner, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FileOwnerID_zid06_u32":
			found33zgensym_9db0ba711f6a3e5a_34[6] = true
			z.FileOwnerID, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "FileGroup_zid07_str":
			found33zgensym_9db0ba711f6a3e5a_34[7] = true
			z.FileGroup, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FileGroupID_zid08_u32":
			found33zgensym_9db0ba711f6a3e5a_34[8] = true
			z.FileGroupID, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "FileMeta_zid09_bin":
			found33zgensym_9db0ba711f6a3e5a_34[9] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.FileMeta = z.FileMeta[:0]
			} else {
				z.FileMeta, bts, err = nbs.ReadBytesBytes(bts, z.FileMeta)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "HashName_zid10_str":
			found33zgensym_9db0ba711f6a3e5a_34[10] = true
			z.HashName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FullFileHashSum_zid11_str":
			found33zgensym_9db0ba711f6a3e5a_34[11] = true
			z.FullFileHashSum, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ChunkerName_zid12_str":
			found33zgensym_9db0ba711f6a3e5a_34[12] = true
			z.ChunkerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CDC_Config_zid13_ptr":
			found33zgensym_9db0ba711f6a3e5a_34[13] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.CDC_Config", alias:"jcdc.CDC_Config", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:true, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.CDC_Config != nil {
					z.CDC_Config.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.CDC_Config {
						z.CDC_Config.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.CDC_Config == nil {
						z.CDC_Config = new(jcdc.CDC_Config)
					}

					bts, err = z.CDC_Config.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "NumChunks_zid14_int":
			found33zgensym_9db0ba711f6a3e5a_34[14] = true
			z.NumChunks, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Chunks_zid15_slc":
			found33zgensym_9db0ba711f6a3e5a_34[15] = true
			if nbs.AlwaysNil {
				(z.Chunks) = (z.Chunks)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_35 uint32
				zgensym_9db0ba711f6a3e5a_35, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chunks) >= int(zgensym_9db0ba711f6a3e5a_35) {
					z.Chunks = (z.Chunks)[:zgensym_9db0ba711f6a3e5a_35]
				} else {
					z.Chunks = make([]*RsyncChunk, zgensym_9db0ba711f6a3e5a_35)
				}
				for zgensym_9db0ba711f6a3e5a_27 := range z.Chunks {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Chunks[zgensym_9db0ba711f6a3e5a_27]", alias:"RsyncChunk", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Chunks[zgensym_9db0ba711f6a3e5a_27] != nil {
							z.Chunks[zgensym_9db0ba711f6a3e5a_27].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Chunks[zgensym_9db0ba711f6a3e5a_27] {
								z.Chunks[zgensym_9db0ba711f6a3e5a_27].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Chunks[zgensym_9db0ba711f6a3e5a_27] == nil {
								z.Chunks[zgensym_9db0ba711f6a3e5a_27] = new(RsyncChunk)
							}

							bts, err = z.Chunks[zgensym_9db0ba711f6a3e5a_27].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Rsync0CallID_zid16_str":
			found33zgensym_9db0ba711f6a3e5a_34[16] = true
			z.Rsync0CallID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsFromSender_zid17_boo":
			found33zgensym_9db0ba711f6a3e5a_34[17] = true
			z.IsFromSender, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Created_zid18_tim":
			found33zgensym_9db0ba711f6a3e5a_34[18] = true
			z.Created, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss33zgensym_9db0ba711f6a3e5a_34 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncHashes
var unmarshalMsgFieldOrder33zgensym_9db0ba711f6a3e5a_34 = []string{"Host_zid00_str", "Path_zid01_str", "ModTime_zid02_tim", "FileSize_zid03_i64", "FileMode_zid04_u32", "FileOwner_zid05_str", "FileOwnerID_zid06_u32", "FileGroup_zid07_str", "FileGroupID_zid08_u32", "FileMeta_zid09_bin", "HashName_zid10_str", "FullFileHashSum_zid11_str", "ChunkerName_zid12_str", "CDC_Config_zid13_ptr", "NumChunks_zid14_int", "Chunks_zid15_slc", "Rsync0CallID_zid16_str", "IsFromSender_zid17_boo", "Created_zid18_tim"}

var unmarshalMsgFieldSkip33zgensym_9db0ba711f6a3e5a_34 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncHashes) Msgsize() (s int) {
	s = 3 + 15 + msgp.StringPrefixSize + len(z.Host) + 15 + msgp.StringPrefixSize + len(z.Path) + 18 + msgp.TimeSize + 19 + msgp.Int64Size + 19 + msgp.Uint32Size + 20 + msgp.StringPrefixSize + len(z.FileOwner) + 22 + msgp.Uint32Size + 20 + msgp.StringPrefixSize + len(z.FileGroup) + 22 + msgp.Uint32Size + 19 + msgp.BytesPrefixSize + len(z.FileMeta) + 19 + msgp.StringPrefixSize + len(z.HashName) + 26 + msgp.StringPrefixSize + len(z.FullFileHashSum) + 22 + msgp.StringPrefixSize + len(z.ChunkerName) + 21
	if z.CDC_Config == nil {
		s += msgp.NilSize
	} else {
		s += z.CDC_Config.Msgsize()
	}
	s += 20 + msgp.IntSize + 17 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_27 := range z.Chunks {
		if z.Chunks[zgensym_9db0ba711f6a3e5a_27] == nil {
			s += msgp.NilSize
		} else {
			s += z.Chunks[zgensym_9db0ba711f6a3e5a_27].Msgsize()
		}
	}
	s += 23 + msgp.StringPrefixSize + len(z.Rsync0CallID) + 23 + msgp.BoolSize + 18 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncStep0_ClientRequestsRead) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields36zgensym_9db0ba711f6a3e5a_37 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields36zgensym_9db0ba711f6a3e5a_37 uint32
	totalEncodedFields36zgensym_9db0ba711f6a3e5a_37, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft36zgensym_9db0ba711f6a3e5a_37 := totalEncodedFields36zgensym_9db0ba711f6a3e5a_37
	missingFieldsLeft36zgensym_9db0ba711f6a3e5a_37 := maxFields36zgensym_9db0ba711f6a3e5a_37 - totalEncodedFields36zgensym_9db0ba711f6a3e5a_37

	var nextMiss36zgensym_9db0ba711f6a3e5a_37 int32 = -1
	var found36zgensym_9db0ba711f6a3e5a_37 [maxFields36zgensym_9db0ba711f6a3e5a_37]bool
	var curField36zgensym_9db0ba711f6a3e5a_37 string

doneWithStruct36zgensym_9db0ba711f6a3e5a_37:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft36zgensym_9db0ba711f6a3e5a_37 > 0 || missingFieldsLeft36zgensym_9db0ba711f6a3e5a_37 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft36zgensym_9db0ba711f6a3e5a_37, missingFieldsLeft36zgensym_9db0ba711f6a3e5a_37, msgp.ShowFound(found36zgensym_9db0ba711f6a3e5a_37[:]), decodeMsgFieldOrder36zgensym_9db0ba711f6a3e5a_37)
		if encodedFieldsLeft36zgensym_9db0ba711f6a3e5a_37 > 0 {
			encodedFieldsLeft36zgensym_9db0ba711f6a3e5a_37--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField36zgensym_9db0ba711f6a3e5a_37 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss36zgensym_9db0ba711f6a3e5a_37 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss36zgensym_9db0ba711f6a3e5a_37 = 0
			}
			for nextMiss36zgensym_9db0ba711f6a3e5a_37 < maxFields36zgensym_9db0ba711f6a3e5a_37 && (found36zgensym_9db0ba711f6a3e5a_37[nextMiss36zgensym_9db0ba711f6a3e5a_37] || decodeMsgFieldSkip36zgensym_9db0ba711f6a3e5a_37[nextMiss36zgensym_9db0ba711f6a3e5a_37]) {
				nextMiss36zgensym_9db0ba711f6a3e5a_37++
			}
			if nextMiss36zgensym_9db0ba711f6a3e5a_37 == maxFields36zgensym_9db0ba711f6a3e5a_37 {
				// filled all the empty fields!
				break doneWithStruct36zgensym_9db0ba711f6a3e5a_37
			}
			missingFieldsLeft36zgensym_9db0ba711f6a3e5a_37--
			curField36zgensym_9db0ba711f6a3e5a_37 = decodeMsgFieldOrder36zgensym_9db0ba711f6a3e5a_37[nextMiss36zgensym_9db0ba711f6a3e5a_37]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField36zgensym_9db0ba711f6a3e5a_37)
		switch curField36zgensym_9db0ba711f6a3e5a_37 {
		// -- templateDecodeMsg ends here --

		case "ReaderHost_zid00_str":
			found36zgensym_9db0ba711f6a3e5a_37[0] = true
			z.ReaderHost, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ReaderPath_zid01_str":
			found36zgensym_9db0ba711f6a3e5a_37[1] = true
			z.ReaderPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ReaderLenBytes_zid02_i64":
			found36zgensym_9db0ba711f6a3e5a_37[2] = true
			z.ReaderLenBytes, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ReaderModTime_zid03_tim":
			found36zgensym_9db0ba711f6a3e5a_37[3] = true
			z.ReaderModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ReaderFullHash_zid04_str":
			found36zgensym_9db0ba711f6a3e5a_37[4] = true
			z.ReaderFullHash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss36zgensym_9db0ba711f6a3e5a_37 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep0_ClientRequestsRead
var decodeMsgFieldOrder36zgensym_9db0ba711f6a3e5a_37 = []string{"ReaderHost_zid00_str", "ReaderPath_zid01_str", "ReaderLenBytes_zid02_i64", "ReaderModTime_zid03_tim", "ReaderFullHash_zid04_str"}

var decodeMsgFieldSkip36zgensym_9db0ba711f6a3e5a_37 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncStep0_ClientRequestsRead) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.ReaderHost) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.ReaderPath) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ReaderLenBytes == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ReaderModTime.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.ReaderFullHash) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncStep0_ClientRequestsRead) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_38 [5]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_39 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_38[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_39 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncStep0_ClientRequestsRead'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x30, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_38[0] {
		// write "ReaderHost_zid00_str"
		err = en.Append(0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ReaderHost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_38[1] {
		// write "ReaderPath_zid01_str"
		err = en.Append(0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ReaderPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_38[2] {
		// write "ReaderLenBytes_zid02_i64"
		err = en.Append(0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ReaderLenBytes)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_38[3] {
		// write "ReaderModTime_zid03_tim"
		err = en.Append(0xb7, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ReaderModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_38[4] {
		// write "ReaderFullHash_zid04_str"
		err = en.Append(0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ReaderFullHash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncStep0_ClientRequestsRead) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ReaderHost_zid00_str"
		o = append(o, 0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ReaderHost)
	}

	if !empty[1] {
		// string "ReaderPath_zid01_str"
		o = append(o, 0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ReaderPath)
	}

	if !empty[2] {
		// string "ReaderLenBytes_zid02_i64"
		o = append(o, 0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ReaderLenBytes)
	}

	if !empty[3] {
		// string "ReaderModTime_zid03_tim"
		o = append(o, 0xb7, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ReaderModTime)
	}

	if !empty[4] {
		// string "ReaderFullHash_zid04_str"
		o = append(o, 0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ReaderFullHash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncStep0_ClientRequestsRead) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncStep0_ClientRequestsRead) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields40zgensym_9db0ba711f6a3e5a_41 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields40zgensym_9db0ba711f6a3e5a_41 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields40zgensym_9db0ba711f6a3e5a_41, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft40zgensym_9db0ba711f6a3e5a_41 := totalEncodedFields40zgensym_9db0ba711f6a3e5a_41
	missingFieldsLeft40zgensym_9db0ba711f6a3e5a_41 := maxFields40zgensym_9db0ba711f6a3e5a_41 - totalEncodedFields40zgensym_9db0ba711f6a3e5a_41

	var nextMiss40zgensym_9db0ba711f6a3e5a_41 int32 = -1
	var found40zgensym_9db0ba711f6a3e5a_41 [maxFields40zgensym_9db0ba711f6a3e5a_41]bool
	var curField40zgensym_9db0ba711f6a3e5a_41 string

doneWithStruct40zgensym_9db0ba711f6a3e5a_41:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft40zgensym_9db0ba711f6a3e5a_41 > 0 || missingFieldsLeft40zgensym_9db0ba711f6a3e5a_41 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft40zgensym_9db0ba711f6a3e5a_41, missingFieldsLeft40zgensym_9db0ba711f6a3e5a_41, msgp.ShowFound(found40zgensym_9db0ba711f6a3e5a_41[:]), unmarshalMsgFieldOrder40zgensym_9db0ba711f6a3e5a_41)
		if encodedFieldsLeft40zgensym_9db0ba711f6a3e5a_41 > 0 {
			encodedFieldsLeft40zgensym_9db0ba711f6a3e5a_41--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField40zgensym_9db0ba711f6a3e5a_41 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss40zgensym_9db0ba711f6a3e5a_41 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss40zgensym_9db0ba711f6a3e5a_41 = 0
			}
			for nextMiss40zgensym_9db0ba711f6a3e5a_41 < maxFields40zgensym_9db0ba711f6a3e5a_41 && (found40zgensym_9db0ba711f6a3e5a_41[nextMiss40zgensym_9db0ba711f6a3e5a_41] || unmarshalMsgFieldSkip40zgensym_9db0ba711f6a3e5a_41[nextMiss40zgensym_9db0ba711f6a3e5a_41]) {
				nextMiss40zgensym_9db0ba711f6a3e5a_41++
			}
			if nextMiss40zgensym_9db0ba711f6a3e5a_41 == maxFields40zgensym_9db0ba711f6a3e5a_41 {
				// filled all the empty fields!
				break doneWithStruct40zgensym_9db0ba711f6a3e5a_41
			}
			missingFieldsLeft40zgensym_9db0ba711f6a3e5a_41--
			curField40zgensym_9db0ba711f6a3e5a_41 = unmarshalMsgFieldOrder40zgensym_9db0ba711f6a3e5a_41[nextMiss40zgensym_9db0ba711f6a3e5a_41]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField40zgensym_9db0ba711f6a3e5a_41)
		switch curField40zgensym_9db0ba711f6a3e5a_41 {
		// -- templateUnmarshalMsg ends here --

		case "ReaderHost_zid00_str":
			found40zgensym_9db0ba711f6a3e5a_41[0] = true
			z.ReaderHost, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ReaderPath_zid01_str":
			found40zgensym_9db0ba711f6a3e5a_41[1] = true
			z.ReaderPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ReaderLenBytes_zid02_i64":
			found40zgensym_9db0ba711f6a3e5a_41[2] = true
			z.ReaderLenBytes, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ReaderModTime_zid03_tim":
			found40zgensym_9db0ba711f6a3e5a_41[3] = true
			z.ReaderModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ReaderFullHash_zid04_str":
			found40zgensym_9db0ba711f6a3e5a_41[4] = true
			z.ReaderFullHash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss40zgensym_9db0ba711f6a3e5a_41 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep0_ClientRequestsRead
var unmarshalMsgFieldOrder40zgensym_9db0ba711f6a3e5a_41 = []string{"ReaderHost_zid00_str", "ReaderPath_zid01_str", "ReaderLenBytes_zid02_i64", "ReaderModTime_zid03_tim", "ReaderFullHash_zid04_str"}

var unmarshalMsgFieldSkip40zgensym_9db0ba711f6a3e5a_41 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncStep0_ClientRequestsRead) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.ReaderHost) + 21 + msgp.StringPrefixSize + len(z.ReaderPath) + 25 + msgp.Int64Size + 24 + msgp.TimeSize + 25 + msgp.StringPrefixSize + len(z.ReaderFullHash)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncStep1_SenderOverview) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields42zgensym_9db0ba711f6a3e5a_43 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields42zgensym_9db0ba711f6a3e5a_43 uint32
	totalEncodedFields42zgensym_9db0ba711f6a3e5a_43, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft42zgensym_9db0ba711f6a3e5a_43 := totalEncodedFields42zgensym_9db0ba711f6a3e5a_43
	missingFieldsLeft42zgensym_9db0ba711f6a3e5a_43 := maxFields42zgensym_9db0ba711f6a3e5a_43 - totalEncodedFields42zgensym_9db0ba711f6a3e5a_43

	var nextMiss42zgensym_9db0ba711f6a3e5a_43 int32 = -1
	var found42zgensym_9db0ba711f6a3e5a_43 [maxFields42zgensym_9db0ba711f6a3e5a_43]bool
	var curField42zgensym_9db0ba711f6a3e5a_43 string

doneWithStruct42zgensym_9db0ba711f6a3e5a_43:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft42zgensym_9db0ba711f6a3e5a_43 > 0 || missingFieldsLeft42zgensym_9db0ba711f6a3e5a_43 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft42zgensym_9db0ba711f6a3e5a_43, missingFieldsLeft42zgensym_9db0ba711f6a3e5a_43, msgp.ShowFound(found42zgensym_9db0ba711f6a3e5a_43[:]), decodeMsgFieldOrder42zgensym_9db0ba711f6a3e5a_43)
		if encodedFieldsLeft42zgensym_9db0ba711f6a3e5a_43 > 0 {
			encodedFieldsLeft42zgensym_9db0ba711f6a3e5a_43--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField42zgensym_9db0ba711f6a3e5a_43 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss42zgensym_9db0ba711f6a3e5a_43 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss42zgensym_9db0ba711f6a3e5a_43 = 0
			}
			for nextMiss42zgensym_9db0ba711f6a3e5a_43 < maxFields42zgensym_9db0ba711f6a3e5a_43 && (found42zgensym_9db0ba711f6a3e5a_43[nextMiss42zgensym_9db0ba711f6a3e5a_43] || decodeMsgFieldSkip42zgensym_9db0ba711f6a3e5a_43[nextMiss42zgensym_9db0ba711f6a3e5a_43]) {
				nextMiss42zgensym_9db0ba711f6a3e5a_43++
			}
			if nextMiss42zgensym_9db0ba711f6a3e5a_43 == maxFields42zgensym_9db0ba711f6a3e5a_43 {
				// filled all the empty fields!
				break doneWithStruct42zgensym_9db0ba711f6a3e5a_43
			}
			missingFieldsLeft42zgensym_9db0ba711f6a3e5a_43--
			curField42zgensym_9db0ba711f6a3e5a_43 = decodeMsgFieldOrder42zgensym_9db0ba711f6a3e5a_43[nextMiss42zgensym_9db0ba711f6a3e5a_43]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField42zgensym_9db0ba711f6a3e5a_43)
		switch curField42zgensym_9db0ba711f6a3e5a_43 {
		// -- templateDecodeMsg ends here --

		case "SenderHost_zid00_str":
			found42zgensym_9db0ba711f6a3e5a_43[0] = true
			z.SenderHost, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SenderPath_zid01_str":
			found42zgensym_9db0ba711f6a3e5a_43[1] = true
			z.SenderPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SenderLenBytes_zid02_i64":
			found42zgensym_9db0ba711f6a3e5a_43[2] = true
			z.SenderLenBytes, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SenderModTime_zid03_tim":
			found42zgensym_9db0ba711f6a3e5a_43[3] = true
			z.SenderModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "SenderFullHash_zid04_str":
			found42zgensym_9db0ba711f6a3e5a_43[4] = true
			z.SenderFullHash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss42zgensym_9db0ba711f6a3e5a_43 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep1_SenderOverview
var decodeMsgFieldOrder42zgensym_9db0ba711f6a3e5a_43 = []string{"SenderHost_zid00_str", "SenderPath_zid01_str", "SenderLenBytes_zid02_i64", "SenderModTime_zid03_tim", "SenderFullHash_zid04_str"}

var decodeMsgFieldSkip42zgensym_9db0ba711f6a3e5a_43 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncStep1_SenderOverview) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.SenderHost) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.SenderPath) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.SenderLenBytes == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.SenderModTime.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.SenderFullHash) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncStep1_SenderOverview) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_44 [5]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_45 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_44[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_45 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncStep1_SenderOverview'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x31, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_44[0] {
		// write "SenderHost_zid00_str"
		err = en.Append(0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SenderHost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_44[1] {
		// write "SenderPath_zid01_str"
		err = en.Append(0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SenderPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_44[2] {
		// write "SenderLenBytes_zid02_i64"
		err = en.Append(0xb8, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SenderLenBytes)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_44[3] {
		// write "SenderModTime_zid03_tim"
		err = en.Append(0xb7, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.SenderModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_44[4] {
		// write "SenderFullHash_zid04_str"
		err = en.Append(0xb8, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SenderFullHash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncStep1_SenderOverview) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SenderHost_zid00_str"
		o = append(o, 0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SenderHost)
	}

	if !empty[1] {
		// string "SenderPath_zid01_str"
		o = append(o, 0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SenderPath)
	}

	if !empty[2] {
		// string "SenderLenBytes_zid02_i64"
		o = append(o, 0xb8, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SenderLenBytes)
	}

	if !empty[3] {
		// string "SenderModTime_zid03_tim"
		o = append(o, 0xb7, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.SenderModTime)
	}

	if !empty[4] {
		// string "SenderFullHash_zid04_str"
		o = append(o, 0xb8, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SenderFullHash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncStep1_SenderOverview) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncStep1_SenderOverview) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields46zgensym_9db0ba711f6a3e5a_47 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields46zgensym_9db0ba711f6a3e5a_47 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields46zgensym_9db0ba711f6a3e5a_47, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft46zgensym_9db0ba711f6a3e5a_47 := totalEncodedFields46zgensym_9db0ba711f6a3e5a_47
	missingFieldsLeft46zgensym_9db0ba711f6a3e5a_47 := maxFields46zgensym_9db0ba711f6a3e5a_47 - totalEncodedFields46zgensym_9db0ba711f6a3e5a_47

	var nextMiss46zgensym_9db0ba711f6a3e5a_47 int32 = -1
	var found46zgensym_9db0ba711f6a3e5a_47 [maxFields46zgensym_9db0ba711f6a3e5a_47]bool
	var curField46zgensym_9db0ba711f6a3e5a_47 string

doneWithStruct46zgensym_9db0ba711f6a3e5a_47:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft46zgensym_9db0ba711f6a3e5a_47 > 0 || missingFieldsLeft46zgensym_9db0ba711f6a3e5a_47 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft46zgensym_9db0ba711f6a3e5a_47, missingFieldsLeft46zgensym_9db0ba711f6a3e5a_47, msgp.ShowFound(found46zgensym_9db0ba711f6a3e5a_47[:]), unmarshalMsgFieldOrder46zgensym_9db0ba711f6a3e5a_47)
		if encodedFieldsLeft46zgensym_9db0ba711f6a3e5a_47 > 0 {
			encodedFieldsLeft46zgensym_9db0ba711f6a3e5a_47--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField46zgensym_9db0ba711f6a3e5a_47 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss46zgensym_9db0ba711f6a3e5a_47 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss46zgensym_9db0ba711f6a3e5a_47 = 0
			}
			for nextMiss46zgensym_9db0ba711f6a3e5a_47 < maxFields46zgensym_9db0ba711f6a3e5a_47 && (found46zgensym_9db0ba711f6a3e5a_47[nextMiss46zgensym_9db0ba711f6a3e5a_47] || unmarshalMsgFieldSkip46zgensym_9db0ba711f6a3e5a_47[nextMiss46zgensym_9db0ba711f6a3e5a_47]) {
				nextMiss46zgensym_9db0ba711f6a3e5a_47++
			}
			if nextMiss46zgensym_9db0ba711f6a3e5a_47 == maxFields46zgensym_9db0ba711f6a3e5a_47 {
				// filled all the empty fields!
				break doneWithStruct46zgensym_9db0ba711f6a3e5a_47
			}
			missingFieldsLeft46zgensym_9db0ba711f6a3e5a_47--
			curField46zgensym_9db0ba711f6a3e5a_47 = unmarshalMsgFieldOrder46zgensym_9db0ba711f6a3e5a_47[nextMiss46zgensym_9db0ba711f6a3e5a_47]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField46zgensym_9db0ba711f6a3e5a_47)
		switch curField46zgensym_9db0ba711f6a3e5a_47 {
		// -- templateUnmarshalMsg ends here --

		case "SenderHost_zid00_str":
			found46zgensym_9db0ba711f6a3e5a_47[0] = true
			z.SenderHost, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SenderPath_zid01_str":
			found46zgensym_9db0ba711f6a3e5a_47[1] = true
			z.SenderPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SenderLenBytes_zid02_i64":
			found46zgensym_9db0ba711f6a3e5a_47[2] = true
			z.SenderLenBytes, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SenderModTime_zid03_tim":
			found46zgensym_9db0ba711f6a3e5a_47[3] = true
			z.SenderModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "SenderFullHash_zid04_str":
			found46zgensym_9db0ba711f6a3e5a_47[4] = true
			z.SenderFullHash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss46zgensym_9db0ba711f6a3e5a_47 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep1_SenderOverview
var unmarshalMsgFieldOrder46zgensym_9db0ba711f6a3e5a_47 = []string{"SenderHost_zid00_str", "SenderPath_zid01_str", "SenderLenBytes_zid02_i64", "SenderModTime_zid03_tim", "SenderFullHash_zid04_str"}

var unmarshalMsgFieldSkip46zgensym_9db0ba711f6a3e5a_47 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncStep1_SenderOverview) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.SenderHost) + 21 + msgp.StringPrefixSize + len(z.SenderPath) + 25 + msgp.Int64Size + 24 + msgp.TimeSize + 25 + msgp.StringPrefixSize + len(z.SenderFullHash)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncStep2_ReaderAcksOverview) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields48zgensym_9db0ba711f6a3e5a_49 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields48zgensym_9db0ba711f6a3e5a_49 uint32
	totalEncodedFields48zgensym_9db0ba711f6a3e5a_49, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft48zgensym_9db0ba711f6a3e5a_49 := totalEncodedFields48zgensym_9db0ba711f6a3e5a_49
	missingFieldsLeft48zgensym_9db0ba711f6a3e5a_49 := maxFields48zgensym_9db0ba711f6a3e5a_49 - totalEncodedFields48zgensym_9db0ba711f6a3e5a_49

	var nextMiss48zgensym_9db0ba711f6a3e5a_49 int32 = -1
	var found48zgensym_9db0ba711f6a3e5a_49 [maxFields48zgensym_9db0ba711f6a3e5a_49]bool
	var curField48zgensym_9db0ba711f6a3e5a_49 string

doneWithStruct48zgensym_9db0ba711f6a3e5a_49:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft48zgensym_9db0ba711f6a3e5a_49 > 0 || missingFieldsLeft48zgensym_9db0ba711f6a3e5a_49 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft48zgensym_9db0ba711f6a3e5a_49, missingFieldsLeft48zgensym_9db0ba711f6a3e5a_49, msgp.ShowFound(found48zgensym_9db0ba711f6a3e5a_49[:]), decodeMsgFieldOrder48zgensym_9db0ba711f6a3e5a_49)
		if encodedFieldsLeft48zgensym_9db0ba711f6a3e5a_49 > 0 {
			encodedFieldsLeft48zgensym_9db0ba711f6a3e5a_49--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField48zgensym_9db0ba711f6a3e5a_49 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss48zgensym_9db0ba711f6a3e5a_49 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss48zgensym_9db0ba711f6a3e5a_49 = 0
			}
			for nextMiss48zgensym_9db0ba711f6a3e5a_49 < maxFields48zgensym_9db0ba711f6a3e5a_49 && (found48zgensym_9db0ba711f6a3e5a_49[nextMiss48zgensym_9db0ba711f6a3e5a_49] || decodeMsgFieldSkip48zgensym_9db0ba711f6a3e5a_49[nextMiss48zgensym_9db0ba711f6a3e5a_49]) {
				nextMiss48zgensym_9db0ba711f6a3e5a_49++
			}
			if nextMiss48zgensym_9db0ba711f6a3e5a_49 == maxFields48zgensym_9db0ba711f6a3e5a_49 {
				// filled all the empty fields!
				break doneWithStruct48zgensym_9db0ba711f6a3e5a_49
			}
			missingFieldsLeft48zgensym_9db0ba711f6a3e5a_49--
			curField48zgensym_9db0ba711f6a3e5a_49 = decodeMsgFieldOrder48zgensym_9db0ba711f6a3e5a_49[nextMiss48zgensym_9db0ba711f6a3e5a_49]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField48zgensym_9db0ba711f6a3e5a_49)
		switch curField48zgensym_9db0ba711f6a3e5a_49 {
		// -- templateDecodeMsg ends here --

		case "ReaderMatchesSenderAllGood_zid00_boo":
			found48zgensym_9db0ba711f6a3e5a_49[0] = true
			z.ReaderMatchesSenderAllGood, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "ReaderHashes_zid01_ptr":
			found48zgensym_9db0ba711f6a3e5a_49[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ReaderHashes != nil {
					dc.PushAlwaysNil()
					err = z.ReaderHashes.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ReaderHashes == nil {
					z.ReaderHashes = new(RsyncHashes)
				}
				dc.DedupIndexEachPtr(z.ReaderHashes)

				err = z.ReaderHashes.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss48zgensym_9db0ba711f6a3e5a_49 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep2_ReaderAcksOverview
var decodeMsgFieldOrder48zgensym_9db0ba711f6a3e5a_49 = []string{"ReaderMatchesSenderAllGood_zid00_boo", "ReaderHashes_zid01_ptr"}

var decodeMsgFieldSkip48zgensym_9db0ba711f6a3e5a_49 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncStep2_ReaderAcksOverview) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (!z.ReaderMatchesSenderAllGood) // bool, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.ReaderHashes == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncStep2_ReaderAcksOverview) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_50 [2]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_51 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_50[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_51 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncStep2_ReaderAcksOverview'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x32, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_50[0] {
		// write "ReaderMatchesSenderAllGood_zid00_boo"
		err = en.Append(0xd9, 0x24, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.ReaderMatchesSenderAllGood)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_50[1] {
		// write "ReaderHashes_zid01_ptr"
		err = en.Append(0xb6, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ReaderHashes == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.ReaderHashes)
			if err != nil {
				return
			}
			if !dup {
				err = z.ReaderHashes.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncStep2_ReaderAcksOverview) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ReaderMatchesSenderAllGood_zid00_boo"
		o = append(o, 0xd9, 0x24, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.ReaderMatchesSenderAllGood)
	}

	if !empty[1] {
		// string "ReaderHashes_zid01_ptr"
		o = append(o, 0xb6, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ReaderHashes == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ReaderHashes.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncStep2_ReaderAcksOverview) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncStep2_ReaderAcksOverview) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields52zgensym_9db0ba711f6a3e5a_53 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields52zgensym_9db0ba711f6a3e5a_53 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields52zgensym_9db0ba711f6a3e5a_53, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft52zgensym_9db0ba711f6a3e5a_53 := totalEncodedFields52zgensym_9db0ba711f6a3e5a_53
	missingFieldsLeft52zgensym_9db0ba711f6a3e5a_53 := maxFields52zgensym_9db0ba711f6a3e5a_53 - totalEncodedFields52zgensym_9db0ba711f6a3e5a_53

	var nextMiss52zgensym_9db0ba711f6a3e5a_53 int32 = -1
	var found52zgensym_9db0ba711f6a3e5a_53 [maxFields52zgensym_9db0ba711f6a3e5a_53]bool
	var curField52zgensym_9db0ba711f6a3e5a_53 string

doneWithStruct52zgensym_9db0ba711f6a3e5a_53:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft52zgensym_9db0ba711f6a3e5a_53 > 0 || missingFieldsLeft52zgensym_9db0ba711f6a3e5a_53 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft52zgensym_9db0ba711f6a3e5a_53, missingFieldsLeft52zgensym_9db0ba711f6a3e5a_53, msgp.ShowFound(found52zgensym_9db0ba711f6a3e5a_53[:]), unmarshalMsgFieldOrder52zgensym_9db0ba711f6a3e5a_53)
		if encodedFieldsLeft52zgensym_9db0ba711f6a3e5a_53 > 0 {
			encodedFieldsLeft52zgensym_9db0ba711f6a3e5a_53--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField52zgensym_9db0ba711f6a3e5a_53 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss52zgensym_9db0ba711f6a3e5a_53 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss52zgensym_9db0ba711f6a3e5a_53 = 0
			}
			for nextMiss52zgensym_9db0ba711f6a3e5a_53 < maxFields52zgensym_9db0ba711f6a3e5a_53 && (found52zgensym_9db0ba711f6a3e5a_53[nextMiss52zgensym_9db0ba711f6a3e5a_53] || unmarshalMsgFieldSkip52zgensym_9db0ba711f6a3e5a_53[nextMiss52zgensym_9db0ba711f6a3e5a_53]) {
				nextMiss52zgensym_9db0ba711f6a3e5a_53++
			}
			if nextMiss52zgensym_9db0ba711f6a3e5a_53 == maxFields52zgensym_9db0ba711f6a3e5a_53 {
				// filled all the empty fields!
				break doneWithStruct52zgensym_9db0ba711f6a3e5a_53
			}
			missingFieldsLeft52zgensym_9db0ba711f6a3e5a_53--
			curField52zgensym_9db0ba711f6a3e5a_53 = unmarshalMsgFieldOrder52zgensym_9db0ba711f6a3e5a_53[nextMiss52zgensym_9db0ba711f6a3e5a_53]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField52zgensym_9db0ba711f6a3e5a_53)
		switch curField52zgensym_9db0ba711f6a3e5a_53 {
		// -- templateUnmarshalMsg ends here --

		case "ReaderMatchesSenderAllGood_zid00_boo":
			found52zgensym_9db0ba711f6a3e5a_53[0] = true
			z.ReaderMatchesSenderAllGood, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "ReaderHashes_zid01_ptr":
			found52zgensym_9db0ba711f6a3e5a_53[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.ReaderHashes", alias:"RsyncHashes", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ReaderHashes != nil {
					z.ReaderHashes.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ReaderHashes {
						z.ReaderHashes.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ReaderHashes == nil {
						z.ReaderHashes = new(RsyncHashes)
					}

					bts, err = z.ReaderHashes.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss52zgensym_9db0ba711f6a3e5a_53 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep2_ReaderAcksOverview
var unmarshalMsgFieldOrder52zgensym_9db0ba711f6a3e5a_53 = []string{"ReaderMatchesSenderAllGood_zid00_boo", "ReaderHashes_zid01_ptr"}

var unmarshalMsgFieldSkip52zgensym_9db0ba711f6a3e5a_53 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncStep2_ReaderAcksOverview) Msgsize() (s int) {
	s = 1 + 38 + msgp.BoolSize + 23
	if z.ReaderHashes == nil {
		s += msgp.NilSize
	} else {
		s += z.ReaderHashes.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncStep3_SenderProvidesDeltas) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields55zgensym_9db0ba711f6a3e5a_56 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields55zgensym_9db0ba711f6a3e5a_56 uint32
	totalEncodedFields55zgensym_9db0ba711f6a3e5a_56, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56 := totalEncodedFields55zgensym_9db0ba711f6a3e5a_56
	missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56 := maxFields55zgensym_9db0ba711f6a3e5a_56 - totalEncodedFields55zgensym_9db0ba711f6a3e5a_56

	var nextMiss55zgensym_9db0ba711f6a3e5a_56 int32 = -1
	var found55zgensym_9db0ba711f6a3e5a_56 [maxFields55zgensym_9db0ba711f6a3e5a_56]bool
	var curField55zgensym_9db0ba711f6a3e5a_56 string

doneWithStruct55zgensym_9db0ba711f6a3e5a_56:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56 > 0 || missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56, missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56, msgp.ShowFound(found55zgensym_9db0ba711f6a3e5a_56[:]), decodeMsgFieldOrder55zgensym_9db0ba711f6a3e5a_56)
		if encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56 > 0 {
			encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField55zgensym_9db0ba711f6a3e5a_56 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss55zgensym_9db0ba711f6a3e5a_56 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss55zgensym_9db0ba711f6a3e5a_56 = 0
			}
			for nextMiss55zgensym_9db0ba711f6a3e5a_56 < maxFields55zgensym_9db0ba711f6a3e5a_56 && (found55zgensym_9db0ba711f6a3e5a_56[nextMiss55zgensym_9db0ba711f6a3e5a_56] || decodeMsgFieldSkip55zgensym_9db0ba711f6a3e5a_56[nextMiss55zgensym_9db0ba711f6a3e5a_56]) {
				nextMiss55zgensym_9db0ba711f6a3e5a_56++
			}
			if nextMiss55zgensym_9db0ba711f6a3e5a_56 == maxFields55zgensym_9db0ba711f6a3e5a_56 {
				// filled all the empty fields!
				break doneWithStruct55zgensym_9db0ba711f6a3e5a_56
			}
			missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56--
			curField55zgensym_9db0ba711f6a3e5a_56 = decodeMsgFieldOrder55zgensym_9db0ba711f6a3e5a_56[nextMiss55zgensym_9db0ba711f6a3e5a_56]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField55zgensym_9db0ba711f6a3e5a_56)
		switch curField55zgensym_9db0ba711f6a3e5a_56 {
		// -- templateDecodeMsg ends here --

		case "SenderHashes_zid00_ptr":
			found55zgensym_9db0ba711f6a3e5a_56[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SenderHashes != nil {
					dc.PushAlwaysNil()
					err = z.SenderHashes.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SenderHashes == nil {
					z.SenderHashes = new(RsyncHashes)
				}
				dc.DedupIndexEachPtr(z.SenderHashes)

				err = z.SenderHashes.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ChunkDiff_zid01_ptr":
			found55zgensym_9db0ba711f6a3e5a_56[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ChunkDiff != nil {
					dc.PushAlwaysNil()
					err = z.ChunkDiff.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ChunkDiff == nil {
					z.ChunkDiff = new(RsyncDiff)
				}
				dc.DedupIndexEachPtr(z.ChunkDiff)

				err = z.ChunkDiff.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "DeltaHashesPreCompression_zid02_slc":
			found55zgensym_9db0ba711f6a3e5a_56[2] = true
			var zgensym_9db0ba711f6a3e5a_57 uint32
			zgensym_9db0ba711f6a3e5a_57, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.DeltaHashesPreCompression) >= int(zgensym_9db0ba711f6a3e5a_57) {
				z.DeltaHashesPreCompression = (z.DeltaHashesPreCompression)[:zgensym_9db0ba711f6a3e5a_57]
			} else {
				z.DeltaHashesPreCompression = make([]string, zgensym_9db0ba711f6a3e5a_57)
			}
			for zgensym_9db0ba711f6a3e5a_54 := range z.DeltaHashesPreCompression {
				z.DeltaHashesPreCompression[zgensym_9db0ba711f6a3e5a_54], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "CompressionAlgo_zid03_str":
			found55zgensym_9db0ba711f6a3e5a_56[3] = true
			z.CompressionAlgo, err = dc.ReadString()
			if err != nil {
				return
			}
		case "DeltaDataStreamedPath_zid04_str":
			found55zgensym_9db0ba711f6a3e5a_56[4] = true
			z.DeltaDataStreamedPath, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss55zgensym_9db0ba711f6a3e5a_56 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep3_SenderProvidesDeltas
var decodeMsgFieldOrder55zgensym_9db0ba711f6a3e5a_56 = []string{"SenderHashes_zid00_ptr", "ChunkDiff_zid01_ptr", "DeltaHashesPreCompression_zid02_slc", "CompressionAlgo_zid03_str", "DeltaDataStreamedPath_zid04_str"}

var decodeMsgFieldSkip55zgensym_9db0ba711f6a3e5a_56 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncStep3_SenderProvidesDeltas) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (z.SenderHashes == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.ChunkDiff == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.DeltaHashesPreCompression) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CompressionAlgo) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.DeltaDataStreamedPath) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncStep3_SenderProvidesDeltas) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_58 [5]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_59 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_58[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_59 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncStep3_SenderProvidesDeltas'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x33, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_58[0] {
		// write "SenderHashes_zid00_ptr"
		err = en.Append(0xb6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SenderHashes == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.SenderHashes)
			if err != nil {
				return
			}
			if !dup {
				err = z.SenderHashes.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_58[1] {
		// write "ChunkDiff_zid01_ptr"
		err = en.Append(0xb3, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ChunkDiff == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.ChunkDiff)
			if err != nil {
				return
			}
			if !dup {
				err = z.ChunkDiff.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_58[2] {
		// write "DeltaHashesPreCompression_zid02_slc"
		err = en.Append(0xd9, 0x23, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.DeltaHashesPreCompression)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_54 := range z.DeltaHashesPreCompression {
			err = en.WriteString(z.DeltaHashesPreCompression[zgensym_9db0ba711f6a3e5a_54])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_58[3] {
		// write "CompressionAlgo_zid03_str"
		err = en.Append(0xb9, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CompressionAlgo)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_58[4] {
		// write "DeltaDataStreamedPath_zid04_str"
		err = en.Append(0xbf, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.DeltaDataStreamedPath)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncStep3_SenderProvidesDeltas) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SenderHashes_zid00_ptr"
		o = append(o, 0xb6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SenderHashes == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SenderHashes.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "ChunkDiff_zid01_ptr"
		o = append(o, 0xb3, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ChunkDiff == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ChunkDiff.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "DeltaHashesPreCompression_zid02_slc"
		o = append(o, 0xd9, 0x23, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.DeltaHashesPreCompression)))
		for zgensym_9db0ba711f6a3e5a_54 := range z.DeltaHashesPreCompression {
			o = msgp.AppendString(o, z.DeltaHashesPreCompression[zgensym_9db0ba711f6a3e5a_54])
		}
	}

	if !empty[3] {
		// string "CompressionAlgo_zid03_str"
		o = append(o, 0xb9, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CompressionAlgo)
	}

	if !empty[4] {
		// string "DeltaDataStreamedPath_zid04_str"
		o = append(o, 0xbf, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.DeltaDataStreamedPath)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncStep3_SenderProvidesDeltas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncStep3_SenderProvidesDeltas) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields60zgensym_9db0ba711f6a3e5a_61 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields60zgensym_9db0ba711f6a3e5a_61 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields60zgensym_9db0ba711f6a3e5a_61, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft60zgensym_9db0ba711f6a3e5a_61 := totalEncodedFields60zgensym_9db0ba711f6a3e5a_61
	missingFieldsLeft60zgensym_9db0ba711f6a3e5a_61 := maxFields60zgensym_9db0ba711f6a3e5a_61 - totalEncodedFields60zgensym_9db0ba711f6a3e5a_61

	var nextMiss60zgensym_9db0ba711f6a3e5a_61 int32 = -1
	var found60zgensym_9db0ba711f6a3e5a_61 [maxFields60zgensym_9db0ba711f6a3e5a_61]bool
	var curField60zgensym_9db0ba711f6a3e5a_61 string

doneWithStruct60zgensym_9db0ba711f6a3e5a_61:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft60zgensym_9db0ba711f6a3e5a_61 > 0 || missingFieldsLeft60zgensym_9db0ba711f6a3e5a_61 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft60zgensym_9db0ba711f6a3e5a_61, missingFieldsLeft60zgensym_9db0ba711f6a3e5a_61, msgp.ShowFound(found60zgensym_9db0ba711f6a3e5a_61[:]), unmarshalMsgFieldOrder60zgensym_9db0ba711f6a3e5a_61)
		if encodedFieldsLeft60zgensym_9db0ba711f6a3e5a_61 > 0 {
			encodedFieldsLeft60zgensym_9db0ba711f6a3e5a_61--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField60zgensym_9db0ba711f6a3e5a_61 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss60zgensym_9db0ba711f6a3e5a_61 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss60zgensym_9db0ba711f6a3e5a_61 = 0
			}
			for nextMiss60zgensym_9db0ba711f6a3e5a_61 < maxFields60zgensym_9db0ba711f6a3e5a_61 && (found60zgensym_9db0ba711f6a3e5a_61[nextMiss60zgensym_9db0ba711f6a3e5a_61] || unmarshalMsgFieldSkip60zgensym_9db0ba711f6a3e5a_61[nextMiss60zgensym_9db0ba711f6a3e5a_61]) {
				nextMiss60zgensym_9db0ba711f6a3e5a_61++
			}
			if nextMiss60zgensym_9db0ba711f6a3e5a_61 == maxFields60zgensym_9db0ba711f6a3e5a_61 {
				// filled all the empty fields!
				break doneWithStruct60zgensym_9db0ba711f6a3e5a_61
			}
			missingFieldsLeft60zgensym_9db0ba711f6a3e5a_61--
			curField60zgensym_9db0ba711f6a3e5a_61 = unmarshalMsgFieldOrder60zgensym_9db0ba711f6a3e5a_61[nextMiss60zgensym_9db0ba711f6a3e5a_61]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField60zgensym_9db0ba711f6a3e5a_61)
		switch curField60zgensym_9db0ba711f6a3e5a_61 {
		// -- templateUnmarshalMsg ends here --

		case "SenderHashes_zid00_ptr":
			found60zgensym_9db0ba711f6a3e5a_61[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.SenderHashes", alias:"RsyncHashes", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SenderHashes != nil {
					z.SenderHashes.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SenderHashes {
						z.SenderHashes.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SenderHashes == nil {
						z.SenderHashes = new(RsyncHashes)
					}

					bts, err = z.SenderHashes.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "ChunkDiff_zid01_ptr":
			found60zgensym_9db0ba711f6a3e5a_61[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.ChunkDiff", alias:"RsyncDiff", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ChunkDiff != nil {
					z.ChunkDiff.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ChunkDiff {
						z.ChunkDiff.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ChunkDiff == nil {
						z.ChunkDiff = new(RsyncDiff)
					}

					bts, err = z.ChunkDiff.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "DeltaHashesPreCompression_zid02_slc":
			found60zgensym_9db0ba711f6a3e5a_61[2] = true
			if nbs.AlwaysNil {
				(z.DeltaHashesPreCompression) = (z.DeltaHashesPreCompression)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_62 uint32
				zgensym_9db0ba711f6a3e5a_62, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.DeltaHashesPreCompression) >= int(zgensym_9db0ba711f6a3e5a_62) {
					z.DeltaHashesPreCompression = (z.DeltaHashesPreCompression)[:zgensym_9db0ba711f6a3e5a_62]
				} else {
					z.DeltaHashesPreCompression = make([]string, zgensym_9db0ba711f6a3e5a_62)
				}
				for zgensym_9db0ba711f6a3e5a_54 := range z.DeltaHashesPreCompression {
					z.DeltaHashesPreCompression[zgensym_9db0ba711f6a3e5a_54], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "CompressionAlgo_zid03_str":
			found60zgensym_9db0ba711f6a3e5a_61[3] = true
			z.CompressionAlgo, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "DeltaDataStreamedPath_zid04_str":
			found60zgensym_9db0ba711f6a3e5a_61[4] = true
			z.DeltaDataStreamedPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss60zgensym_9db0ba711f6a3e5a_61 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep3_SenderProvidesDeltas
var unmarshalMsgFieldOrder60zgensym_9db0ba711f6a3e5a_61 = []string{"SenderHashes_zid00_ptr", "ChunkDiff_zid01_ptr", "DeltaHashesPreCompression_zid02_slc", "CompressionAlgo_zid03_str", "DeltaDataStreamedPath_zid04_str"}

var unmarshalMsgFieldSkip60zgensym_9db0ba711f6a3e5a_61 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncStep3_SenderProvidesDeltas) Msgsize() (s int) {
	s = 1 + 23
	if z.SenderHashes == nil {
		s += msgp.NilSize
	} else {
		s += z.SenderHashes.Msgsize()
	}
	s += 20
	if z.ChunkDiff == nil {
		s += msgp.NilSize
	} else {
		s += z.ChunkDiff.Msgsize()
	}
	s += 37 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_54 := range z.DeltaHashesPreCompression {
		s += msgp.StringPrefixSize + len(z.DeltaHashesPreCompression[zgensym_9db0ba711f6a3e5a_54])
	}
	s += 26 + msgp.StringPrefixSize + len(z.CompressionAlgo) + 32 + msgp.StringPrefixSize + len(z.DeltaDataStreamedPath)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncStep4_ReaderAcksDeltasFin) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields63zgensym_9db0ba711f6a3e5a_64 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields63zgensym_9db0ba711f6a3e5a_64 uint32
	totalEncodedFields63zgensym_9db0ba711f6a3e5a_64, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft63zgensym_9db0ba711f6a3e5a_64 := totalEncodedFields63zgensym_9db0ba711f6a3e5a_64
	missingFieldsLeft63zgensym_9db0ba711f6a3e5a_64 := maxFields63zgensym_9db0ba711f6a3e5a_64 - totalEncodedFields63zgensym_9db0ba711f6a3e5a_64

	var nextMiss63zgensym_9db0ba711f6a3e5a_64 int32 = -1
	var found63zgensym_9db0ba711f6a3e5a_64 [maxFields63zgensym_9db0ba711f6a3e5a_64]bool
	var curField63zgensym_9db0ba711f6a3e5a_64 string

doneWithStruct63zgensym_9db0ba711f6a3e5a_64:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft63zgensym_9db0ba711f6a3e5a_64 > 0 || missingFieldsLeft63zgensym_9db0ba711f6a3e5a_64 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft63zgensym_9db0ba711f6a3e5a_64, missingFieldsLeft63zgensym_9db0ba711f6a3e5a_64, msgp.ShowFound(found63zgensym_9db0ba711f6a3e5a_64[:]), decodeMsgFieldOrder63zgensym_9db0ba711f6a3e5a_64)
		if encodedFieldsLeft63zgensym_9db0ba711f6a3e5a_64 > 0 {
			encodedFieldsLeft63zgensym_9db0ba711f6a3e5a_64--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField63zgensym_9db0ba711f6a3e5a_64 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss63zgensym_9db0ba711f6a3e5a_64 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss63zgensym_9db0ba711f6a3e5a_64 = 0
			}
			for nextMiss63zgensym_9db0ba711f6a3e5a_64 < maxFields63zgensym_9db0ba711f6a3e5a_64 && (found63zgensym_9db0ba711f6a3e5a_64[nextMiss63zgensym_9db0ba711f6a3e5a_64] || decodeMsgFieldSkip63zgensym_9db0ba711f6a3e5a_64[nextMiss63zgensym_9db0ba711f6a3e5a_64]) {
				nextMiss63zgensym_9db0ba711f6a3e5a_64++
			}
			if nextMiss63zgensym_9db0ba711f6a3e5a_64 == maxFields63zgensym_9db0ba711f6a3e5a_64 {
				// filled all the empty fields!
				break doneWithStruct63zgensym_9db0ba711f6a3e5a_64
			}
			missingFieldsLeft63zgensym_9db0ba711f6a3e5a_64--
			curField63zgensym_9db0ba711f6a3e5a_64 = decodeMsgFieldOrder63zgensym_9db0ba711f6a3e5a_64[nextMiss63zgensym_9db0ba711f6a3e5a_64]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField63zgensym_9db0ba711f6a3e5a_64)
		switch curField63zgensym_9db0ba711f6a3e5a_64 {
		// -- templateDecodeMsg ends here --

		case "ReaderHost_zid00_str":
			found63zgensym_9db0ba711f6a3e5a_64[0] = true
			z.ReaderHost, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ReaderPath_zid01_str":
			found63zgensym_9db0ba711f6a3e5a_64[1] = true
			z.ReaderPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ReaderLenBytes_zid02_i64":
			found63zgensym_9db0ba711f6a3e5a_64[2] = true
			z.ReaderLenBytes, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ReaderModTime_zid03_tim":
			found63zgensym_9db0ba711f6a3e5a_64[3] = true
			z.ReaderModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ReaderFullHash_zid04_str":
			found63zgensym_9db0ba711f6a3e5a_64[4] = true
			z.ReaderFullHash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss63zgensym_9db0ba711f6a3e5a_64 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep4_ReaderAcksDeltasFin
var decodeMsgFieldOrder63zgensym_9db0ba711f6a3e5a_64 = []string{"ReaderHost_zid00_str", "ReaderPath_zid01_str", "ReaderLenBytes_zid02_i64", "ReaderModTime_zid03_tim", "ReaderFullHash_zid04_str"}

var decodeMsgFieldSkip63zgensym_9db0ba711f6a3e5a_64 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncStep4_ReaderAcksDeltasFin) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.ReaderHost) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.ReaderPath) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ReaderLenBytes == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ReaderModTime.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.ReaderFullHash) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncStep4_ReaderAcksDeltasFin) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_65 [5]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_66 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_65[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_66 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncStep4_ReaderAcksDeltasFin'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x65, 0x70, 0x34, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x46, 0x69, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_65[0] {
		// write "ReaderHost_zid00_str"
		err = en.Append(0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ReaderHost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_65[1] {
		// write "ReaderPath_zid01_str"
		err = en.Append(0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ReaderPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_65[2] {
		// write "ReaderLenBytes_zid02_i64"
		err = en.Append(0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ReaderLenBytes)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_65[3] {
		// write "ReaderModTime_zid03_tim"
		err = en.Append(0xb7, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ReaderModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_65[4] {
		// write "ReaderFullHash_zid04_str"
		err = en.Append(0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ReaderFullHash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncStep4_ReaderAcksDeltasFin) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ReaderHost_zid00_str"
		o = append(o, 0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ReaderHost)
	}

	if !empty[1] {
		// string "ReaderPath_zid01_str"
		o = append(o, 0xb4, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ReaderPath)
	}

	if !empty[2] {
		// string "ReaderLenBytes_zid02_i64"
		o = append(o, 0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ReaderLenBytes)
	}

	if !empty[3] {
		// string "ReaderModTime_zid03_tim"
		o = append(o, 0xb7, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ReaderModTime)
	}

	if !empty[4] {
		// string "ReaderFullHash_zid04_str"
		o = append(o, 0xb8, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ReaderFullHash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncStep4_ReaderAcksDeltasFin) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncStep4_ReaderAcksDeltasFin) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields67zgensym_9db0ba711f6a3e5a_68 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields67zgensym_9db0ba711f6a3e5a_68 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields67zgensym_9db0ba711f6a3e5a_68, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft67zgensym_9db0ba711f6a3e5a_68 := totalEncodedFields67zgensym_9db0ba711f6a3e5a_68
	missingFieldsLeft67zgensym_9db0ba711f6a3e5a_68 := maxFields67zgensym_9db0ba711f6a3e5a_68 - totalEncodedFields67zgensym_9db0ba711f6a3e5a_68

	var nextMiss67zgensym_9db0ba711f6a3e5a_68 int32 = -1
	var found67zgensym_9db0ba711f6a3e5a_68 [maxFields67zgensym_9db0ba711f6a3e5a_68]bool
	var curField67zgensym_9db0ba711f6a3e5a_68 string

doneWithStruct67zgensym_9db0ba711f6a3e5a_68:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft67zgensym_9db0ba711f6a3e5a_68 > 0 || missingFieldsLeft67zgensym_9db0ba711f6a3e5a_68 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft67zgensym_9db0ba711f6a3e5a_68, missingFieldsLeft67zgensym_9db0ba711f6a3e5a_68, msgp.ShowFound(found67zgensym_9db0ba711f6a3e5a_68[:]), unmarshalMsgFieldOrder67zgensym_9db0ba711f6a3e5a_68)
		if encodedFieldsLeft67zgensym_9db0ba711f6a3e5a_68 > 0 {
			encodedFieldsLeft67zgensym_9db0ba711f6a3e5a_68--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField67zgensym_9db0ba711f6a3e5a_68 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss67zgensym_9db0ba711f6a3e5a_68 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss67zgensym_9db0ba711f6a3e5a_68 = 0
			}
			for nextMiss67zgensym_9db0ba711f6a3e5a_68 < maxFields67zgensym_9db0ba711f6a3e5a_68 && (found67zgensym_9db0ba711f6a3e5a_68[nextMiss67zgensym_9db0ba711f6a3e5a_68] || unmarshalMsgFieldSkip67zgensym_9db0ba711f6a3e5a_68[nextMiss67zgensym_9db0ba711f6a3e5a_68]) {
				nextMiss67zgensym_9db0ba711f6a3e5a_68++
			}
			if nextMiss67zgensym_9db0ba711f6a3e5a_68 == maxFields67zgensym_9db0ba711f6a3e5a_68 {
				// filled all the empty fields!
				break doneWithStruct67zgensym_9db0ba711f6a3e5a_68
			}
			missingFieldsLeft67zgensym_9db0ba711f6a3e5a_68--
			curField67zgensym_9db0ba711f6a3e5a_68 = unmarshalMsgFieldOrder67zgensym_9db0ba711f6a3e5a_68[nextMiss67zgensym_9db0ba711f6a3e5a_68]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField67zgensym_9db0ba711f6a3e5a_68)
		switch curField67zgensym_9db0ba711f6a3e5a_68 {
		// -- templateUnmarshalMsg ends here --

		case "ReaderHost_zid00_str":
			found67zgensym_9db0ba711f6a3e5a_68[0] = true
			z.ReaderHost, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ReaderPath_zid01_str":
			found67zgensym_9db0ba711f6a3e5a_68[1] = true
			z.ReaderPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ReaderLenBytes_zid02_i64":
			found67zgensym_9db0ba711f6a3e5a_68[2] = true
			z.ReaderLenBytes, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ReaderModTime_zid03_tim":
			found67zgensym_9db0ba711f6a3e5a_68[3] = true
			z.ReaderModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ReaderFullHash_zid04_str":
			found67zgensym_9db0ba711f6a3e5a_68[4] = true
			z.ReaderFullHash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss67zgensym_9db0ba711f6a3e5a_68 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncStep4_ReaderAcksDeltasFin
var unmarshalMsgFieldOrder67zgensym_9db0ba711f6a3e5a_68 = []string{"ReaderHost_zid00_str", "ReaderPath_zid01_str", "ReaderLenBytes_zid02_i64", "ReaderModTime_zid03_tim", "ReaderFullHash_zid04_str"}

var unmarshalMsgFieldSkip67zgensym_9db0ba711f6a3e5a_68 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncStep4_ReaderAcksDeltasFin) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.ReaderHost) + 21 + msgp.StringPrefixSize + len(z.ReaderPath) + 25 + msgp.Int64Size + 24 + msgp.TimeSize + 25 + msgp.StringPrefixSize + len(z.ReaderFullHash)
	return
}
