// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncChunk) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_9db0ba711f6a3e5a_1 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_9db0ba711f6a3e5a_1 uint32
	totalEncodedFields0zgensym_9db0ba711f6a3e5a_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 := totalEncodedFields0zgensym_9db0ba711f6a3e5a_1
	missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1 := maxFields0zgensym_9db0ba711f6a3e5a_1 - totalEncodedFields0zgensym_9db0ba711f6a3e5a_1

	var nextMiss0zgensym_9db0ba711f6a3e5a_1 int32 = -1
	var found0zgensym_9db0ba711f6a3e5a_1 [maxFields0zgensym_9db0ba711f6a3e5a_1]bool
	var curField0zgensym_9db0ba711f6a3e5a_1 string

doneWithStruct0zgensym_9db0ba711f6a3e5a_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 || missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1, missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1, msgp.ShowFound(found0zgensym_9db0ba711f6a3e5a_1[:]), decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1)
		if encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 {
			encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_9db0ba711f6a3e5a_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_9db0ba711f6a3e5a_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_9db0ba711f6a3e5a_1 = 0
			}
			for nextMiss0zgensym_9db0ba711f6a3e5a_1 < maxFields0zgensym_9db0ba711f6a3e5a_1 && (found0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1] || decodeMsgFieldSkip0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1]) {
				nextMiss0zgensym_9db0ba711f6a3e5a_1++
			}
			if nextMiss0zgensym_9db0ba711f6a3e5a_1 == maxFields0zgensym_9db0ba711f6a3e5a_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_9db0ba711f6a3e5a_1
			}
			missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1--
			curField0zgensym_9db0ba711f6a3e5a_1 = decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_9db0ba711f6a3e5a_1)
		switch curField0zgensym_9db0ba711f6a3e5a_1 {
		// -- templateDecodeMsg ends here --

		case "Beg_zid00_int":
			found0zgensym_9db0ba711f6a3e5a_1[0] = true
			z.Beg, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Endx_zid01_int":
			found0zgensym_9db0ba711f6a3e5a_1[1] = true
			z.Endx, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Blake3Hash_zid02_str":
			found0zgensym_9db0ba711f6a3e5a_1[2] = true
			z.Blake3Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_9db0ba711f6a3e5a_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncChunk
var decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1 = []string{"Beg_zid00_int", "Endx_zid01_int", "Blake3Hash_zid02_str"}

var decodeMsgFieldSkip0zgensym_9db0ba711f6a3e5a_1 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z RsyncChunk) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.Beg == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Endx == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Blake3Hash) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z RsyncChunk) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_2 [3]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_3 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncChunk'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[0] {
		// write "Beg_zid00_int"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[1] {
		// write "Endx_zid01_int"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Endx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[2] {
		// write "Blake3Hash_zid02_str"
		err = en.Append(0xb4, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Blake3Hash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z RsyncChunk) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Beg_zid00_int"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Beg)
	}

	if !empty[1] {
		// string "Endx_zid01_int"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Endx)
	}

	if !empty[2] {
		// string "Blake3Hash_zid02_str"
		o = append(o, 0xb4, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Blake3Hash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncChunk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncChunk) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_9db0ba711f6a3e5a_5 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_9db0ba711f6a3e5a_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_9db0ba711f6a3e5a_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 := totalEncodedFields4zgensym_9db0ba711f6a3e5a_5
	missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5 := maxFields4zgensym_9db0ba711f6a3e5a_5 - totalEncodedFields4zgensym_9db0ba711f6a3e5a_5

	var nextMiss4zgensym_9db0ba711f6a3e5a_5 int32 = -1
	var found4zgensym_9db0ba711f6a3e5a_5 [maxFields4zgensym_9db0ba711f6a3e5a_5]bool
	var curField4zgensym_9db0ba711f6a3e5a_5 string

doneWithStruct4zgensym_9db0ba711f6a3e5a_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 || missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5, missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5, msgp.ShowFound(found4zgensym_9db0ba711f6a3e5a_5[:]), unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5)
		if encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 {
			encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_9db0ba711f6a3e5a_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_9db0ba711f6a3e5a_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_9db0ba711f6a3e5a_5 = 0
			}
			for nextMiss4zgensym_9db0ba711f6a3e5a_5 < maxFields4zgensym_9db0ba711f6a3e5a_5 && (found4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5] || unmarshalMsgFieldSkip4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5]) {
				nextMiss4zgensym_9db0ba711f6a3e5a_5++
			}
			if nextMiss4zgensym_9db0ba711f6a3e5a_5 == maxFields4zgensym_9db0ba711f6a3e5a_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_9db0ba711f6a3e5a_5
			}
			missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5--
			curField4zgensym_9db0ba711f6a3e5a_5 = unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_9db0ba711f6a3e5a_5)
		switch curField4zgensym_9db0ba711f6a3e5a_5 {
		// -- templateUnmarshalMsg ends here --

		case "Beg_zid00_int":
			found4zgensym_9db0ba711f6a3e5a_5[0] = true
			z.Beg, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid01_int":
			found4zgensym_9db0ba711f6a3e5a_5[1] = true
			z.Endx, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Blake3Hash_zid02_str":
			found4zgensym_9db0ba711f6a3e5a_5[2] = true
			z.Blake3Hash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_9db0ba711f6a3e5a_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncChunk
var unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5 = []string{"Beg_zid00_int", "Endx_zid01_int", "Blake3Hash_zid02_str"}

var unmarshalMsgFieldSkip4zgensym_9db0ba711f6a3e5a_5 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RsyncChunk) Msgsize() (s int) {
	s = 1 + 14 + msgp.IntSize + 15 + msgp.IntSize + 21 + msgp.StringPrefixSize + len(z.Blake3Hash)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncHashes) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields7zgensym_9db0ba711f6a3e5a_8 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields7zgensym_9db0ba711f6a3e5a_8 uint32
	totalEncodedFields7zgensym_9db0ba711f6a3e5a_8, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 := totalEncodedFields7zgensym_9db0ba711f6a3e5a_8
	missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8 := maxFields7zgensym_9db0ba711f6a3e5a_8 - totalEncodedFields7zgensym_9db0ba711f6a3e5a_8

	var nextMiss7zgensym_9db0ba711f6a3e5a_8 int32 = -1
	var found7zgensym_9db0ba711f6a3e5a_8 [maxFields7zgensym_9db0ba711f6a3e5a_8]bool
	var curField7zgensym_9db0ba711f6a3e5a_8 string

doneWithStruct7zgensym_9db0ba711f6a3e5a_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 || missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8, missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8, msgp.ShowFound(found7zgensym_9db0ba711f6a3e5a_8[:]), decodeMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8)
		if encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 {
			encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField7zgensym_9db0ba711f6a3e5a_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_9db0ba711f6a3e5a_8 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss7zgensym_9db0ba711f6a3e5a_8 = 0
			}
			for nextMiss7zgensym_9db0ba711f6a3e5a_8 < maxFields7zgensym_9db0ba711f6a3e5a_8 && (found7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8] || decodeMsgFieldSkip7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8]) {
				nextMiss7zgensym_9db0ba711f6a3e5a_8++
			}
			if nextMiss7zgensym_9db0ba711f6a3e5a_8 == maxFields7zgensym_9db0ba711f6a3e5a_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_9db0ba711f6a3e5a_8
			}
			missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8--
			curField7zgensym_9db0ba711f6a3e5a_8 = decodeMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_9db0ba711f6a3e5a_8)
		switch curField7zgensym_9db0ba711f6a3e5a_8 {
		// -- templateDecodeMsg ends here --

		case "Path_zid00_str":
			found7zgensym_9db0ba711f6a3e5a_8[0] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Blake3FullFileSum_zid01_str":
			found7zgensym_9db0ba711f6a3e5a_8[1] = true
			z.Blake3FullFileSum, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ChunkerName_zid02_str":
			found7zgensym_9db0ba711f6a3e5a_8[2] = true
			z.ChunkerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Chunk_zid03_slc":
			found7zgensym_9db0ba711f6a3e5a_8[3] = true
			var zgensym_9db0ba711f6a3e5a_9 uint32
			zgensym_9db0ba711f6a3e5a_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Chunk) >= int(zgensym_9db0ba711f6a3e5a_9) {
				z.Chunk = (z.Chunk)[:zgensym_9db0ba711f6a3e5a_9]
			} else {
				z.Chunk = make([]RsyncChunk, zgensym_9db0ba711f6a3e5a_9)
			}
			for zgensym_9db0ba711f6a3e5a_6 := range z.Chunk {
				const maxFields10zgensym_9db0ba711f6a3e5a_11 = 3

				// -- templateDecodeMsg starts here--
				var totalEncodedFields10zgensym_9db0ba711f6a3e5a_11 uint32
				totalEncodedFields10zgensym_9db0ba711f6a3e5a_11, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 := totalEncodedFields10zgensym_9db0ba711f6a3e5a_11
				missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11 := maxFields10zgensym_9db0ba711f6a3e5a_11 - totalEncodedFields10zgensym_9db0ba711f6a3e5a_11

				var nextMiss10zgensym_9db0ba711f6a3e5a_11 int32 = -1
				var found10zgensym_9db0ba711f6a3e5a_11 [maxFields10zgensym_9db0ba711f6a3e5a_11]bool
				var curField10zgensym_9db0ba711f6a3e5a_11 string

			doneWithStruct10zgensym_9db0ba711f6a3e5a_11:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 || missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11, missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11, msgp.ShowFound(found10zgensym_9db0ba711f6a3e5a_11[:]), decodeMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11)
					if encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 {
						encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField10zgensym_9db0ba711f6a3e5a_11 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss10zgensym_9db0ba711f6a3e5a_11 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss10zgensym_9db0ba711f6a3e5a_11 = 0
						}
						for nextMiss10zgensym_9db0ba711f6a3e5a_11 < maxFields10zgensym_9db0ba711f6a3e5a_11 && (found10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11] || decodeMsgFieldSkip10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11]) {
							nextMiss10zgensym_9db0ba711f6a3e5a_11++
						}
						if nextMiss10zgensym_9db0ba711f6a3e5a_11 == maxFields10zgensym_9db0ba711f6a3e5a_11 {
							// filled all the empty fields!
							break doneWithStruct10zgensym_9db0ba711f6a3e5a_11
						}
						missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11--
						curField10zgensym_9db0ba711f6a3e5a_11 = decodeMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_9db0ba711f6a3e5a_11)
					switch curField10zgensym_9db0ba711f6a3e5a_11 {
					// -- templateDecodeMsg ends here --

					case "Beg_zid00_int":
						found10zgensym_9db0ba711f6a3e5a_11[0] = true
						z.Chunk[zgensym_9db0ba711f6a3e5a_6].Beg, err = dc.ReadInt()
						if err != nil {
							return
						}
					case "Endx_zid01_int":
						found10zgensym_9db0ba711f6a3e5a_11[1] = true
						z.Chunk[zgensym_9db0ba711f6a3e5a_6].Endx, err = dc.ReadInt()
						if err != nil {
							return
						}
					case "Blake3Hash_zid02_str":
						found10zgensym_9db0ba711f6a3e5a_11[2] = true
						z.Chunk[zgensym_9db0ba711f6a3e5a_6].Blake3Hash, err = dc.ReadString()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss10zgensym_9db0ba711f6a3e5a_11 != -1 {
					dc.PopAlwaysNil()
				}

			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_9db0ba711f6a3e5a_8 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncHashes
var decodeMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8 = []string{"Path_zid00_str", "Blake3FullFileSum_zid01_str", "ChunkerName_zid02_str", "Chunk_zid03_slc"}

var decodeMsgFieldSkip7zgensym_9db0ba711f6a3e5a_8 = []bool{false, false, false, false}

// fields of RsyncChunk
var decodeMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11 = []string{"Beg_zid00_int", "Endx_zid01_int", "Blake3Hash_zid02_str"}

var decodeMsgFieldSkip10zgensym_9db0ba711f6a3e5a_11 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncHashes) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (len(z.Path) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Blake3FullFileSum) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.ChunkerName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Chunk) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncHashes) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_12 [4]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_13 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_12[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_13 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncHashes'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[0] {
		// write "Path_zid00_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[1] {
		// write "Blake3FullFileSum_zid01_str"
		err = en.Append(0xbb, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Blake3FullFileSum)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[2] {
		// write "ChunkerName_zid02_str"
		err = en.Append(0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ChunkerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[3] {
		// write "Chunk_zid03_slc"
		err = en.Append(0xaf, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Chunk)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_6 := range z.Chunk {

			// honor the omitempty tags
			var empty_zgensym_9db0ba711f6a3e5a_14 [3]bool
			fieldsInUse_zgensym_9db0ba711f6a3e5a_15 := z.Chunk[zgensym_9db0ba711f6a3e5a_6].fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_14[:])

			// map header
			err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_15 + 1)
			if err != nil {
				return err
			}

			// runtime struct type identification for 'RsyncChunk'
			err = en.Append(0xa1, 0x40)
			if err != nil {
				return err
			}
			err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b})
			if err != nil {
				return err
			}

			if !empty_zgensym_9db0ba711f6a3e5a_14[0] {
				// write "Beg_zid00_int"
				err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
				if err != nil {
					return err
				}
				err = en.WriteInt(z.Chunk[zgensym_9db0ba711f6a3e5a_6].Beg)
				if err != nil {
					return
				}
			}

			if !empty_zgensym_9db0ba711f6a3e5a_14[1] {
				// write "Endx_zid01_int"
				err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
				if err != nil {
					return err
				}
				err = en.WriteInt(z.Chunk[zgensym_9db0ba711f6a3e5a_6].Endx)
				if err != nil {
					return
				}
			}

			if !empty_zgensym_9db0ba711f6a3e5a_14[2] {
				// write "Blake3Hash_zid02_str"
				err = en.Append(0xb4, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
				if err != nil {
					return err
				}
				err = en.WriteString(z.Chunk[zgensym_9db0ba711f6a3e5a_6].Blake3Hash)
				if err != nil {
					return
				}
			}

		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncHashes) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Path_zid00_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[1] {
		// string "Blake3FullFileSum_zid01_str"
		o = append(o, 0xbb, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Blake3FullFileSum)
	}

	if !empty[2] {
		// string "ChunkerName_zid02_str"
		o = append(o, 0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ChunkerName)
	}

	if !empty[3] {
		// string "Chunk_zid03_slc"
		o = append(o, 0xaf, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Chunk)))
		for zgensym_9db0ba711f6a3e5a_6 := range z.Chunk {

			// honor the omitempty tags
			var empty [3]bool
			fieldsInUse := z.Chunk[zgensym_9db0ba711f6a3e5a_6].fieldsNotEmpty(empty[:])
			o = msgp.AppendMapHeader(o, fieldsInUse)

			if !empty[0] {
				// string "Beg_zid00_int"
				o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
				o = msgp.AppendInt(o, z.Chunk[zgensym_9db0ba711f6a3e5a_6].Beg)
			}

			if !empty[1] {
				// string "Endx_zid01_int"
				o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
				o = msgp.AppendInt(o, z.Chunk[zgensym_9db0ba711f6a3e5a_6].Endx)
			}

			if !empty[2] {
				// string "Blake3Hash_zid02_str"
				o = append(o, 0xb4, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
				o = msgp.AppendString(o, z.Chunk[zgensym_9db0ba711f6a3e5a_6].Blake3Hash)
			}

		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncHashes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncHashes) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_9db0ba711f6a3e5a_17 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_9db0ba711f6a3e5a_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_9db0ba711f6a3e5a_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_9db0ba711f6a3e5a_17 := totalEncodedFields16zgensym_9db0ba711f6a3e5a_17
	missingFieldsLeft16zgensym_9db0ba711f6a3e5a_17 := maxFields16zgensym_9db0ba711f6a3e5a_17 - totalEncodedFields16zgensym_9db0ba711f6a3e5a_17

	var nextMiss16zgensym_9db0ba711f6a3e5a_17 int32 = -1
	var found16zgensym_9db0ba711f6a3e5a_17 [maxFields16zgensym_9db0ba711f6a3e5a_17]bool
	var curField16zgensym_9db0ba711f6a3e5a_17 string

doneWithStruct16zgensym_9db0ba711f6a3e5a_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_9db0ba711f6a3e5a_17 > 0 || missingFieldsLeft16zgensym_9db0ba711f6a3e5a_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_9db0ba711f6a3e5a_17, missingFieldsLeft16zgensym_9db0ba711f6a3e5a_17, msgp.ShowFound(found16zgensym_9db0ba711f6a3e5a_17[:]), unmarshalMsgFieldOrder16zgensym_9db0ba711f6a3e5a_17)
		if encodedFieldsLeft16zgensym_9db0ba711f6a3e5a_17 > 0 {
			encodedFieldsLeft16zgensym_9db0ba711f6a3e5a_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_9db0ba711f6a3e5a_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_9db0ba711f6a3e5a_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_9db0ba711f6a3e5a_17 = 0
			}
			for nextMiss16zgensym_9db0ba711f6a3e5a_17 < maxFields16zgensym_9db0ba711f6a3e5a_17 && (found16zgensym_9db0ba711f6a3e5a_17[nextMiss16zgensym_9db0ba711f6a3e5a_17] || unmarshalMsgFieldSkip16zgensym_9db0ba711f6a3e5a_17[nextMiss16zgensym_9db0ba711f6a3e5a_17]) {
				nextMiss16zgensym_9db0ba711f6a3e5a_17++
			}
			if nextMiss16zgensym_9db0ba711f6a3e5a_17 == maxFields16zgensym_9db0ba711f6a3e5a_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_9db0ba711f6a3e5a_17
			}
			missingFieldsLeft16zgensym_9db0ba711f6a3e5a_17--
			curField16zgensym_9db0ba711f6a3e5a_17 = unmarshalMsgFieldOrder16zgensym_9db0ba711f6a3e5a_17[nextMiss16zgensym_9db0ba711f6a3e5a_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_9db0ba711f6a3e5a_17)
		switch curField16zgensym_9db0ba711f6a3e5a_17 {
		// -- templateUnmarshalMsg ends here --

		case "Path_zid00_str":
			found16zgensym_9db0ba711f6a3e5a_17[0] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Blake3FullFileSum_zid01_str":
			found16zgensym_9db0ba711f6a3e5a_17[1] = true
			z.Blake3FullFileSum, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ChunkerName_zid02_str":
			found16zgensym_9db0ba711f6a3e5a_17[2] = true
			z.ChunkerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Chunk_zid03_slc":
			found16zgensym_9db0ba711f6a3e5a_17[3] = true
			if nbs.AlwaysNil {
				(z.Chunk) = (z.Chunk)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_18 uint32
				zgensym_9db0ba711f6a3e5a_18, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chunk) >= int(zgensym_9db0ba711f6a3e5a_18) {
					z.Chunk = (z.Chunk)[:zgensym_9db0ba711f6a3e5a_18]
				} else {
					z.Chunk = make([]RsyncChunk, zgensym_9db0ba711f6a3e5a_18)
				}
				for zgensym_9db0ba711f6a3e5a_6 := range z.Chunk {
					const maxFields19zgensym_9db0ba711f6a3e5a_20 = 3

					// -- templateUnmarshalMsg starts here--
					var totalEncodedFields19zgensym_9db0ba711f6a3e5a_20 uint32
					if !nbs.AlwaysNil {
						totalEncodedFields19zgensym_9db0ba711f6a3e5a_20, bts, err = nbs.ReadMapHeaderBytes(bts)
						if err != nil {
							return
						}
					}
					encodedFieldsLeft19zgensym_9db0ba711f6a3e5a_20 := totalEncodedFields19zgensym_9db0ba711f6a3e5a_20
					missingFieldsLeft19zgensym_9db0ba711f6a3e5a_20 := maxFields19zgensym_9db0ba711f6a3e5a_20 - totalEncodedFields19zgensym_9db0ba711f6a3e5a_20

					var nextMiss19zgensym_9db0ba711f6a3e5a_20 int32 = -1
					var found19zgensym_9db0ba711f6a3e5a_20 [maxFields19zgensym_9db0ba711f6a3e5a_20]bool
					var curField19zgensym_9db0ba711f6a3e5a_20 string

				doneWithStruct19zgensym_9db0ba711f6a3e5a_20:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft19zgensym_9db0ba711f6a3e5a_20 > 0 || missingFieldsLeft19zgensym_9db0ba711f6a3e5a_20 > 0 {
						//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft19zgensym_9db0ba711f6a3e5a_20, missingFieldsLeft19zgensym_9db0ba711f6a3e5a_20, msgp.ShowFound(found19zgensym_9db0ba711f6a3e5a_20[:]), unmarshalMsgFieldOrder19zgensym_9db0ba711f6a3e5a_20)
						if encodedFieldsLeft19zgensym_9db0ba711f6a3e5a_20 > 0 {
							encodedFieldsLeft19zgensym_9db0ba711f6a3e5a_20--
							field, bts, err = nbs.ReadMapKeyZC(bts)
							if err != nil {
								return
							}
							curField19zgensym_9db0ba711f6a3e5a_20 = msgp.UnsafeString(field)
						} else {
							//missing fields need handling
							if nextMiss19zgensym_9db0ba711f6a3e5a_20 < 0 {
								// set bts to contain just mnil (0xc0)
								bts = nbs.PushAlwaysNil(bts)
								nextMiss19zgensym_9db0ba711f6a3e5a_20 = 0
							}
							for nextMiss19zgensym_9db0ba711f6a3e5a_20 < maxFields19zgensym_9db0ba711f6a3e5a_20 && (found19zgensym_9db0ba711f6a3e5a_20[nextMiss19zgensym_9db0ba711f6a3e5a_20] || unmarshalMsgFieldSkip19zgensym_9db0ba711f6a3e5a_20[nextMiss19zgensym_9db0ba711f6a3e5a_20]) {
								nextMiss19zgensym_9db0ba711f6a3e5a_20++
							}
							if nextMiss19zgensym_9db0ba711f6a3e5a_20 == maxFields19zgensym_9db0ba711f6a3e5a_20 {
								// filled all the empty fields!
								break doneWithStruct19zgensym_9db0ba711f6a3e5a_20
							}
							missingFieldsLeft19zgensym_9db0ba711f6a3e5a_20--
							curField19zgensym_9db0ba711f6a3e5a_20 = unmarshalMsgFieldOrder19zgensym_9db0ba711f6a3e5a_20[nextMiss19zgensym_9db0ba711f6a3e5a_20]
						}
						//fmt.Printf("switching on curField: '%v'\n", curField19zgensym_9db0ba711f6a3e5a_20)
						switch curField19zgensym_9db0ba711f6a3e5a_20 {
						// -- templateUnmarshalMsg ends here --

						case "Beg_zid00_int":
							found19zgensym_9db0ba711f6a3e5a_20[0] = true
							z.Chunk[zgensym_9db0ba711f6a3e5a_6].Beg, bts, err = nbs.ReadIntBytes(bts)

							if err != nil {
								return
							}
						case "Endx_zid01_int":
							found19zgensym_9db0ba711f6a3e5a_20[1] = true
							z.Chunk[zgensym_9db0ba711f6a3e5a_6].Endx, bts, err = nbs.ReadIntBytes(bts)

							if err != nil {
								return
							}
						case "Blake3Hash_zid02_str":
							found19zgensym_9db0ba711f6a3e5a_20[2] = true
							z.Chunk[zgensym_9db0ba711f6a3e5a_6].Blake3Hash, bts, err = nbs.ReadStringBytes(bts)

							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
					if nextMiss19zgensym_9db0ba711f6a3e5a_20 != -1 {
						bts = nbs.PopAlwaysNil()
					}

				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_9db0ba711f6a3e5a_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncHashes
var unmarshalMsgFieldOrder16zgensym_9db0ba711f6a3e5a_17 = []string{"Path_zid00_str", "Blake3FullFileSum_zid01_str", "ChunkerName_zid02_str", "Chunk_zid03_slc"}

var unmarshalMsgFieldSkip16zgensym_9db0ba711f6a3e5a_17 = []bool{false, false, false, false}

// fields of RsyncChunk
var unmarshalMsgFieldOrder19zgensym_9db0ba711f6a3e5a_20 = []string{"Beg_zid00_int", "Endx_zid01_int", "Blake3Hash_zid02_str"}

var unmarshalMsgFieldSkip19zgensym_9db0ba711f6a3e5a_20 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncHashes) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Path) + 28 + msgp.StringPrefixSize + len(z.Blake3FullFileSum) + 22 + msgp.StringPrefixSize + len(z.ChunkerName) + 16 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_6 := range z.Chunk {
		s += 1 + 14 + msgp.IntSize + 15 + msgp.IntSize + 21 + msgp.StringPrefixSize + len(z.Chunk[zgensym_9db0ba711f6a3e5a_6].Blake3Hash)
	}
	return
}
