// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
	"github.com/glycerine/rpc25519/ultracdc"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncChunk) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_9db0ba711f6a3e5a_1 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_9db0ba711f6a3e5a_1 uint32
	totalEncodedFields0zgensym_9db0ba711f6a3e5a_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 := totalEncodedFields0zgensym_9db0ba711f6a3e5a_1
	missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1 := maxFields0zgensym_9db0ba711f6a3e5a_1 - totalEncodedFields0zgensym_9db0ba711f6a3e5a_1

	var nextMiss0zgensym_9db0ba711f6a3e5a_1 int32 = -1
	var found0zgensym_9db0ba711f6a3e5a_1 [maxFields0zgensym_9db0ba711f6a3e5a_1]bool
	var curField0zgensym_9db0ba711f6a3e5a_1 string

doneWithStruct0zgensym_9db0ba711f6a3e5a_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 || missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1, missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1, msgp.ShowFound(found0zgensym_9db0ba711f6a3e5a_1[:]), decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1)
		if encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1 > 0 {
			encodedFieldsLeft0zgensym_9db0ba711f6a3e5a_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_9db0ba711f6a3e5a_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_9db0ba711f6a3e5a_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_9db0ba711f6a3e5a_1 = 0
			}
			for nextMiss0zgensym_9db0ba711f6a3e5a_1 < maxFields0zgensym_9db0ba711f6a3e5a_1 && (found0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1] || decodeMsgFieldSkip0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1]) {
				nextMiss0zgensym_9db0ba711f6a3e5a_1++
			}
			if nextMiss0zgensym_9db0ba711f6a3e5a_1 == maxFields0zgensym_9db0ba711f6a3e5a_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_9db0ba711f6a3e5a_1
			}
			missingFieldsLeft0zgensym_9db0ba711f6a3e5a_1--
			curField0zgensym_9db0ba711f6a3e5a_1 = decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1[nextMiss0zgensym_9db0ba711f6a3e5a_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_9db0ba711f6a3e5a_1)
		switch curField0zgensym_9db0ba711f6a3e5a_1 {
		// -- templateDecodeMsg ends here --

		case "Beg_zid00_int":
			found0zgensym_9db0ba711f6a3e5a_1[0] = true
			z.Beg, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Endx_zid01_int":
			found0zgensym_9db0ba711f6a3e5a_1[1] = true
			z.Endx, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "Blake3Hash_zid02_str":
			found0zgensym_9db0ba711f6a3e5a_1[2] = true
			z.Blake3Hash, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Len_zid03_int":
			found0zgensym_9db0ba711f6a3e5a_1[3] = true
			z.Len, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_9db0ba711f6a3e5a_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncChunk
var decodeMsgFieldOrder0zgensym_9db0ba711f6a3e5a_1 = []string{"Beg_zid00_int", "Endx_zid01_int", "Blake3Hash_zid02_str", "Len_zid03_int"}

var decodeMsgFieldSkip0zgensym_9db0ba711f6a3e5a_1 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncChunk) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.Beg == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Endx == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Blake3Hash) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Len == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncChunk) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_2 [4]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_3 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncChunk'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[0] {
		// write "Beg_zid00_int"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[1] {
		// write "Endx_zid01_int"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Endx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[2] {
		// write "Blake3Hash_zid02_str"
		err = en.Append(0xb4, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Blake3Hash)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_2[3] {
		// write "Len_zid03_int"
		err = en.Append(0xad, 0x4c, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Len)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncChunk) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Beg_zid00_int"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Beg)
	}

	if !empty[1] {
		// string "Endx_zid01_int"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Endx)
	}

	if !empty[2] {
		// string "Blake3Hash_zid02_str"
		o = append(o, 0xb4, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Blake3Hash)
	}

	if !empty[3] {
		// string "Len_zid03_int"
		o = append(o, 0xad, 0x4c, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Len)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncChunk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncChunk) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_9db0ba711f6a3e5a_5 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_9db0ba711f6a3e5a_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_9db0ba711f6a3e5a_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 := totalEncodedFields4zgensym_9db0ba711f6a3e5a_5
	missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5 := maxFields4zgensym_9db0ba711f6a3e5a_5 - totalEncodedFields4zgensym_9db0ba711f6a3e5a_5

	var nextMiss4zgensym_9db0ba711f6a3e5a_5 int32 = -1
	var found4zgensym_9db0ba711f6a3e5a_5 [maxFields4zgensym_9db0ba711f6a3e5a_5]bool
	var curField4zgensym_9db0ba711f6a3e5a_5 string

doneWithStruct4zgensym_9db0ba711f6a3e5a_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 || missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5, missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5, msgp.ShowFound(found4zgensym_9db0ba711f6a3e5a_5[:]), unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5)
		if encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5 > 0 {
			encodedFieldsLeft4zgensym_9db0ba711f6a3e5a_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_9db0ba711f6a3e5a_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_9db0ba711f6a3e5a_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_9db0ba711f6a3e5a_5 = 0
			}
			for nextMiss4zgensym_9db0ba711f6a3e5a_5 < maxFields4zgensym_9db0ba711f6a3e5a_5 && (found4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5] || unmarshalMsgFieldSkip4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5]) {
				nextMiss4zgensym_9db0ba711f6a3e5a_5++
			}
			if nextMiss4zgensym_9db0ba711f6a3e5a_5 == maxFields4zgensym_9db0ba711f6a3e5a_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_9db0ba711f6a3e5a_5
			}
			missingFieldsLeft4zgensym_9db0ba711f6a3e5a_5--
			curField4zgensym_9db0ba711f6a3e5a_5 = unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5[nextMiss4zgensym_9db0ba711f6a3e5a_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_9db0ba711f6a3e5a_5)
		switch curField4zgensym_9db0ba711f6a3e5a_5 {
		// -- templateUnmarshalMsg ends here --

		case "Beg_zid00_int":
			found4zgensym_9db0ba711f6a3e5a_5[0] = true
			z.Beg, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid01_int":
			found4zgensym_9db0ba711f6a3e5a_5[1] = true
			z.Endx, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "Blake3Hash_zid02_str":
			found4zgensym_9db0ba711f6a3e5a_5[2] = true
			z.Blake3Hash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Len_zid03_int":
			found4zgensym_9db0ba711f6a3e5a_5[3] = true
			z.Len, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_9db0ba711f6a3e5a_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncChunk
var unmarshalMsgFieldOrder4zgensym_9db0ba711f6a3e5a_5 = []string{"Beg_zid00_int", "Endx_zid01_int", "Blake3Hash_zid02_str", "Len_zid03_int"}

var unmarshalMsgFieldSkip4zgensym_9db0ba711f6a3e5a_5 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncChunk) Msgsize() (s int) {
	s = 1 + 14 + msgp.IntSize + 15 + msgp.IntSize + 21 + msgp.StringPrefixSize + len(z.Blake3Hash) + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncHashes) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields7zgensym_9db0ba711f6a3e5a_8 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields7zgensym_9db0ba711f6a3e5a_8 uint32
	totalEncodedFields7zgensym_9db0ba711f6a3e5a_8, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 := totalEncodedFields7zgensym_9db0ba711f6a3e5a_8
	missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8 := maxFields7zgensym_9db0ba711f6a3e5a_8 - totalEncodedFields7zgensym_9db0ba711f6a3e5a_8

	var nextMiss7zgensym_9db0ba711f6a3e5a_8 int32 = -1
	var found7zgensym_9db0ba711f6a3e5a_8 [maxFields7zgensym_9db0ba711f6a3e5a_8]bool
	var curField7zgensym_9db0ba711f6a3e5a_8 string

doneWithStruct7zgensym_9db0ba711f6a3e5a_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 || missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8, missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8, msgp.ShowFound(found7zgensym_9db0ba711f6a3e5a_8[:]), decodeMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8)
		if encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 {
			encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField7zgensym_9db0ba711f6a3e5a_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_9db0ba711f6a3e5a_8 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss7zgensym_9db0ba711f6a3e5a_8 = 0
			}
			for nextMiss7zgensym_9db0ba711f6a3e5a_8 < maxFields7zgensym_9db0ba711f6a3e5a_8 && (found7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8] || decodeMsgFieldSkip7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8]) {
				nextMiss7zgensym_9db0ba711f6a3e5a_8++
			}
			if nextMiss7zgensym_9db0ba711f6a3e5a_8 == maxFields7zgensym_9db0ba711f6a3e5a_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_9db0ba711f6a3e5a_8
			}
			missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8--
			curField7zgensym_9db0ba711f6a3e5a_8 = decodeMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_9db0ba711f6a3e5a_8)
		switch curField7zgensym_9db0ba711f6a3e5a_8 {
		// -- templateDecodeMsg ends here --

		case "Path_zid00_str":
			found7zgensym_9db0ba711f6a3e5a_8[0] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Blake3FullFileSum_zid01_str":
			found7zgensym_9db0ba711f6a3e5a_8[1] = true
			z.Blake3FullFileSum, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ChunkerName_zid02_str":
			found7zgensym_9db0ba711f6a3e5a_8[2] = true
			z.ChunkerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ChunkerOpts_zid03_ptr":
			found7zgensym_9db0ba711f6a3e5a_8[3] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ChunkerOpts != nil {
					dc.PushAlwaysNil()
					err = z.ChunkerOpts.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ChunkerOpts == nil {
					z.ChunkerOpts = new(ultracdc.ChunkerOpts)
				}
				dc.DedupIndexEachPtr(z.ChunkerOpts)

				err = z.ChunkerOpts.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Chunks_zid04_slc":
			found7zgensym_9db0ba711f6a3e5a_8[4] = true
			var zgensym_9db0ba711f6a3e5a_9 uint32
			zgensym_9db0ba711f6a3e5a_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Chunks) >= int(zgensym_9db0ba711f6a3e5a_9) {
				z.Chunks = (z.Chunks)[:zgensym_9db0ba711f6a3e5a_9]
			} else {
				z.Chunks = make([]RsyncChunk, zgensym_9db0ba711f6a3e5a_9)
			}
			for zgensym_9db0ba711f6a3e5a_6 := range z.Chunks {
				err = z.Chunks[zgensym_9db0ba711f6a3e5a_6].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "NumChunks_zid05_int":
			found7zgensym_9db0ba711f6a3e5a_8[5] = true
			z.NumChunks, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "HashName__str":
			found7zgensym_9db0ba711f6a3e5a_8[6] = true
			z.HashName, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_9db0ba711f6a3e5a_8 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncHashes
var decodeMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8 = []string{"Path_zid00_str", "Blake3FullFileSum_zid01_str", "ChunkerName_zid02_str", "ChunkerOpts_zid03_ptr", "Chunks_zid04_slc", "NumChunks_zid05_int", "HashName__str"}

var decodeMsgFieldSkip7zgensym_9db0ba711f6a3e5a_8 = []bool{false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncHashes) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (len(z.Path) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Blake3FullFileSum) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.ChunkerName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ChunkerOpts == nil) // pointer, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Chunks) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.NumChunks == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.HashName) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncHashes) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_10 [7]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_11 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncHashes'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[0] {
		// write "Path_zid00_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[1] {
		// write "Blake3FullFileSum_zid01_str"
		err = en.Append(0xbb, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Blake3FullFileSum)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[2] {
		// write "ChunkerName_zid02_str"
		err = en.Append(0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ChunkerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[3] {
		// write "ChunkerOpts_zid03_ptr"
		err = en.Append(0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ChunkerOpts == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.ChunkerOpts)
			if err != nil {
				return
			}
			if !dup {
				err = z.ChunkerOpts.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[4] {
		// write "Chunks_zid04_slc"
		err = en.Append(0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Chunks)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_6 := range z.Chunks {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Chunks[zgensym_9db0ba711f6a3e5a_6])
			if err != nil {
				return
			}
			if !dup {
				err = z.Chunks[zgensym_9db0ba711f6a3e5a_6].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[5] {
		// write "NumChunks_zid05_int"
		err = en.Append(0xb3, 0x4e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.NumChunks)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_10[6] {
		// write "HashName__str"
		err = en.Append(0xad, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.HashName)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncHashes) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Path_zid00_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[1] {
		// string "Blake3FullFileSum_zid01_str"
		o = append(o, 0xbb, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Blake3FullFileSum)
	}

	if !empty[2] {
		// string "ChunkerName_zid02_str"
		o = append(o, 0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ChunkerName)
	}

	if !empty[3] {
		// string "ChunkerOpts_zid03_ptr"
		o = append(o, 0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ChunkerOpts == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ChunkerOpts.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[4] {
		// string "Chunks_zid04_slc"
		o = append(o, 0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Chunks)))
		for zgensym_9db0ba711f6a3e5a_6 := range z.Chunks {
			o, err = z.Chunks[zgensym_9db0ba711f6a3e5a_6].MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[5] {
		// string "NumChunks_zid05_int"
		o = append(o, 0xb3, 0x4e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.NumChunks)
	}

	if !empty[6] {
		// string "HashName__str"
		o = append(o, 0xad, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.HashName)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncHashes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncHashes) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields12zgensym_9db0ba711f6a3e5a_13 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields12zgensym_9db0ba711f6a3e5a_13 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields12zgensym_9db0ba711f6a3e5a_13, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft12zgensym_9db0ba711f6a3e5a_13 := totalEncodedFields12zgensym_9db0ba711f6a3e5a_13
	missingFieldsLeft12zgensym_9db0ba711f6a3e5a_13 := maxFields12zgensym_9db0ba711f6a3e5a_13 - totalEncodedFields12zgensym_9db0ba711f6a3e5a_13

	var nextMiss12zgensym_9db0ba711f6a3e5a_13 int32 = -1
	var found12zgensym_9db0ba711f6a3e5a_13 [maxFields12zgensym_9db0ba711f6a3e5a_13]bool
	var curField12zgensym_9db0ba711f6a3e5a_13 string

doneWithStruct12zgensym_9db0ba711f6a3e5a_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_9db0ba711f6a3e5a_13 > 0 || missingFieldsLeft12zgensym_9db0ba711f6a3e5a_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_9db0ba711f6a3e5a_13, missingFieldsLeft12zgensym_9db0ba711f6a3e5a_13, msgp.ShowFound(found12zgensym_9db0ba711f6a3e5a_13[:]), unmarshalMsgFieldOrder12zgensym_9db0ba711f6a3e5a_13)
		if encodedFieldsLeft12zgensym_9db0ba711f6a3e5a_13 > 0 {
			encodedFieldsLeft12zgensym_9db0ba711f6a3e5a_13--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField12zgensym_9db0ba711f6a3e5a_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_9db0ba711f6a3e5a_13 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss12zgensym_9db0ba711f6a3e5a_13 = 0
			}
			for nextMiss12zgensym_9db0ba711f6a3e5a_13 < maxFields12zgensym_9db0ba711f6a3e5a_13 && (found12zgensym_9db0ba711f6a3e5a_13[nextMiss12zgensym_9db0ba711f6a3e5a_13] || unmarshalMsgFieldSkip12zgensym_9db0ba711f6a3e5a_13[nextMiss12zgensym_9db0ba711f6a3e5a_13]) {
				nextMiss12zgensym_9db0ba711f6a3e5a_13++
			}
			if nextMiss12zgensym_9db0ba711f6a3e5a_13 == maxFields12zgensym_9db0ba711f6a3e5a_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_9db0ba711f6a3e5a_13
			}
			missingFieldsLeft12zgensym_9db0ba711f6a3e5a_13--
			curField12zgensym_9db0ba711f6a3e5a_13 = unmarshalMsgFieldOrder12zgensym_9db0ba711f6a3e5a_13[nextMiss12zgensym_9db0ba711f6a3e5a_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_9db0ba711f6a3e5a_13)
		switch curField12zgensym_9db0ba711f6a3e5a_13 {
		// -- templateUnmarshalMsg ends here --

		case "Path_zid00_str":
			found12zgensym_9db0ba711f6a3e5a_13[0] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Blake3FullFileSum_zid01_str":
			found12zgensym_9db0ba711f6a3e5a_13[1] = true
			z.Blake3FullFileSum, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ChunkerName_zid02_str":
			found12zgensym_9db0ba711f6a3e5a_13[2] = true
			z.ChunkerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ChunkerOpts_zid03_ptr":
			found12zgensym_9db0ba711f6a3e5a_13[3] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.ChunkerOpts", alias:"ultracdc.ChunkerOpts", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:true, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ChunkerOpts != nil {
					z.ChunkerOpts.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ChunkerOpts {
						z.ChunkerOpts.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ChunkerOpts == nil {
						z.ChunkerOpts = new(ultracdc.ChunkerOpts)
					}

					bts, err = z.ChunkerOpts.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Chunks_zid04_slc":
			found12zgensym_9db0ba711f6a3e5a_13[4] = true
			if nbs.AlwaysNil {
				(z.Chunks) = (z.Chunks)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_14 uint32
				zgensym_9db0ba711f6a3e5a_14, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chunks) >= int(zgensym_9db0ba711f6a3e5a_14) {
					z.Chunks = (z.Chunks)[:zgensym_9db0ba711f6a3e5a_14]
				} else {
					z.Chunks = make([]RsyncChunk, zgensym_9db0ba711f6a3e5a_14)
				}
				for zgensym_9db0ba711f6a3e5a_6 := range z.Chunks {
					bts, err = z.Chunks[zgensym_9db0ba711f6a3e5a_6].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "NumChunks_zid05_int":
			found12zgensym_9db0ba711f6a3e5a_13[5] = true
			z.NumChunks, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "HashName__str":
			found12zgensym_9db0ba711f6a3e5a_13[6] = true
			z.HashName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_9db0ba711f6a3e5a_13 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncHashes
var unmarshalMsgFieldOrder12zgensym_9db0ba711f6a3e5a_13 = []string{"Path_zid00_str", "Blake3FullFileSum_zid01_str", "ChunkerName_zid02_str", "ChunkerOpts_zid03_ptr", "Chunks_zid04_slc", "NumChunks_zid05_int", "HashName__str"}

var unmarshalMsgFieldSkip12zgensym_9db0ba711f6a3e5a_13 = []bool{false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncHashes) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Path) + 28 + msgp.StringPrefixSize + len(z.Blake3FullFileSum) + 22 + msgp.StringPrefixSize + len(z.ChunkerName) + 22
	if z.ChunkerOpts == nil {
		s += msgp.NilSize
	} else {
		s += z.ChunkerOpts.Msgsize()
	}
	s += 17 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_6 := range z.Chunks {
		s += z.Chunks[zgensym_9db0ba711f6a3e5a_6].Msgsize()
	}
	s += 20 + msgp.IntSize + 14 + msgp.StringPrefixSize + len(z.HashName)
	return
}
