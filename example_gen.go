// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Args) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_7ba73e3e9c15c593_1 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_7ba73e3e9c15c593_1 uint32
	totalEncodedFields0zgensym_7ba73e3e9c15c593_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_7ba73e3e9c15c593_1 := totalEncodedFields0zgensym_7ba73e3e9c15c593_1
	missingFieldsLeft0zgensym_7ba73e3e9c15c593_1 := maxFields0zgensym_7ba73e3e9c15c593_1 - totalEncodedFields0zgensym_7ba73e3e9c15c593_1

	var nextMiss0zgensym_7ba73e3e9c15c593_1 int32 = -1
	var found0zgensym_7ba73e3e9c15c593_1 [maxFields0zgensym_7ba73e3e9c15c593_1]bool
	var curField0zgensym_7ba73e3e9c15c593_1 string

doneWithStruct0zgensym_7ba73e3e9c15c593_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_7ba73e3e9c15c593_1 > 0 || missingFieldsLeft0zgensym_7ba73e3e9c15c593_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_7ba73e3e9c15c593_1, missingFieldsLeft0zgensym_7ba73e3e9c15c593_1, msgp.ShowFound(found0zgensym_7ba73e3e9c15c593_1[:]), decodeMsgFieldOrder0zgensym_7ba73e3e9c15c593_1)
		if encodedFieldsLeft0zgensym_7ba73e3e9c15c593_1 > 0 {
			encodedFieldsLeft0zgensym_7ba73e3e9c15c593_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_7ba73e3e9c15c593_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_7ba73e3e9c15c593_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_7ba73e3e9c15c593_1 = 0
			}
			for nextMiss0zgensym_7ba73e3e9c15c593_1 < maxFields0zgensym_7ba73e3e9c15c593_1 && (found0zgensym_7ba73e3e9c15c593_1[nextMiss0zgensym_7ba73e3e9c15c593_1] || decodeMsgFieldSkip0zgensym_7ba73e3e9c15c593_1[nextMiss0zgensym_7ba73e3e9c15c593_1]) {
				nextMiss0zgensym_7ba73e3e9c15c593_1++
			}
			if nextMiss0zgensym_7ba73e3e9c15c593_1 == maxFields0zgensym_7ba73e3e9c15c593_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_7ba73e3e9c15c593_1
			}
			missingFieldsLeft0zgensym_7ba73e3e9c15c593_1--
			curField0zgensym_7ba73e3e9c15c593_1 = decodeMsgFieldOrder0zgensym_7ba73e3e9c15c593_1[nextMiss0zgensym_7ba73e3e9c15c593_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_7ba73e3e9c15c593_1)
		switch curField0zgensym_7ba73e3e9c15c593_1 {
		// -- templateDecodeMsg ends here --

		case "A__int":
			found0zgensym_7ba73e3e9c15c593_1[0] = true
			z.A, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "B__int":
			found0zgensym_7ba73e3e9c15c593_1[1] = true
			z.B, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_7ba73e3e9c15c593_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Args
var decodeMsgFieldOrder0zgensym_7ba73e3e9c15c593_1 = []string{"A__int", "B__int"}

var decodeMsgFieldSkip0zgensym_7ba73e3e9c15c593_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z Args) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.A == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.B == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Args) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_7ba73e3e9c15c593_2 [2]bool
	fieldsInUse_zgensym_7ba73e3e9c15c593_3 := z.fieldsNotEmpty(empty_zgensym_7ba73e3e9c15c593_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_7ba73e3e9c15c593_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Args'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x41, 0x72, 0x67, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_7ba73e3e9c15c593_2[0] {
		// write "A__int"
		err = en.Append(0xa6, 0x41, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.A)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7ba73e3e9c15c593_2[1] {
		// write "B__int"
		err = en.Append(0xa6, 0x42, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.B)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Args) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "A__int"
		o = append(o, 0xa6, 0x41, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.A)
	}

	if !empty[1] {
		// string "B__int"
		o = append(o, 0xa6, 0x42, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.B)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Args) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Args) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_7ba73e3e9c15c593_5 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_7ba73e3e9c15c593_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_7ba73e3e9c15c593_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_7ba73e3e9c15c593_5 := totalEncodedFields4zgensym_7ba73e3e9c15c593_5
	missingFieldsLeft4zgensym_7ba73e3e9c15c593_5 := maxFields4zgensym_7ba73e3e9c15c593_5 - totalEncodedFields4zgensym_7ba73e3e9c15c593_5

	var nextMiss4zgensym_7ba73e3e9c15c593_5 int32 = -1
	var found4zgensym_7ba73e3e9c15c593_5 [maxFields4zgensym_7ba73e3e9c15c593_5]bool
	var curField4zgensym_7ba73e3e9c15c593_5 string

doneWithStruct4zgensym_7ba73e3e9c15c593_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_7ba73e3e9c15c593_5 > 0 || missingFieldsLeft4zgensym_7ba73e3e9c15c593_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_7ba73e3e9c15c593_5, missingFieldsLeft4zgensym_7ba73e3e9c15c593_5, msgp.ShowFound(found4zgensym_7ba73e3e9c15c593_5[:]), unmarshalMsgFieldOrder4zgensym_7ba73e3e9c15c593_5)
		if encodedFieldsLeft4zgensym_7ba73e3e9c15c593_5 > 0 {
			encodedFieldsLeft4zgensym_7ba73e3e9c15c593_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_7ba73e3e9c15c593_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_7ba73e3e9c15c593_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_7ba73e3e9c15c593_5 = 0
			}
			for nextMiss4zgensym_7ba73e3e9c15c593_5 < maxFields4zgensym_7ba73e3e9c15c593_5 && (found4zgensym_7ba73e3e9c15c593_5[nextMiss4zgensym_7ba73e3e9c15c593_5] || unmarshalMsgFieldSkip4zgensym_7ba73e3e9c15c593_5[nextMiss4zgensym_7ba73e3e9c15c593_5]) {
				nextMiss4zgensym_7ba73e3e9c15c593_5++
			}
			if nextMiss4zgensym_7ba73e3e9c15c593_5 == maxFields4zgensym_7ba73e3e9c15c593_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_7ba73e3e9c15c593_5
			}
			missingFieldsLeft4zgensym_7ba73e3e9c15c593_5--
			curField4zgensym_7ba73e3e9c15c593_5 = unmarshalMsgFieldOrder4zgensym_7ba73e3e9c15c593_5[nextMiss4zgensym_7ba73e3e9c15c593_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_7ba73e3e9c15c593_5)
		switch curField4zgensym_7ba73e3e9c15c593_5 {
		// -- templateUnmarshalMsg ends here --

		case "A__int":
			found4zgensym_7ba73e3e9c15c593_5[0] = true
			z.A, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "B__int":
			found4zgensym_7ba73e3e9c15c593_5[1] = true
			z.B, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_7ba73e3e9c15c593_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Args
var unmarshalMsgFieldOrder4zgensym_7ba73e3e9c15c593_5 = []string{"A__int", "B__int"}

var unmarshalMsgFieldSkip4zgensym_7ba73e3e9c15c593_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Args) Msgsize() (s int) {
	s = 1 + 7 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Arith) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_7ba73e3e9c15c593_6 int
		zgensym_7ba73e3e9c15c593_6, err = dc.ReadInt()
		(*z) = Arith(zgensym_7ba73e3e9c15c593_6)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Arith) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Arith) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Arith) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Arith) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_7ba73e3e9c15c593_7 int
		zgensym_7ba73e3e9c15c593_7, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = Arith(zgensym_7ba73e3e9c15c593_7)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Arith) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Reply) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields8zgensym_7ba73e3e9c15c593_9 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields8zgensym_7ba73e3e9c15c593_9 uint32
	totalEncodedFields8zgensym_7ba73e3e9c15c593_9, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft8zgensym_7ba73e3e9c15c593_9 := totalEncodedFields8zgensym_7ba73e3e9c15c593_9
	missingFieldsLeft8zgensym_7ba73e3e9c15c593_9 := maxFields8zgensym_7ba73e3e9c15c593_9 - totalEncodedFields8zgensym_7ba73e3e9c15c593_9

	var nextMiss8zgensym_7ba73e3e9c15c593_9 int32 = -1
	var found8zgensym_7ba73e3e9c15c593_9 [maxFields8zgensym_7ba73e3e9c15c593_9]bool
	var curField8zgensym_7ba73e3e9c15c593_9 string

doneWithStruct8zgensym_7ba73e3e9c15c593_9:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft8zgensym_7ba73e3e9c15c593_9 > 0 || missingFieldsLeft8zgensym_7ba73e3e9c15c593_9 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_7ba73e3e9c15c593_9, missingFieldsLeft8zgensym_7ba73e3e9c15c593_9, msgp.ShowFound(found8zgensym_7ba73e3e9c15c593_9[:]), decodeMsgFieldOrder8zgensym_7ba73e3e9c15c593_9)
		if encodedFieldsLeft8zgensym_7ba73e3e9c15c593_9 > 0 {
			encodedFieldsLeft8zgensym_7ba73e3e9c15c593_9--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField8zgensym_7ba73e3e9c15c593_9 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss8zgensym_7ba73e3e9c15c593_9 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss8zgensym_7ba73e3e9c15c593_9 = 0
			}
			for nextMiss8zgensym_7ba73e3e9c15c593_9 < maxFields8zgensym_7ba73e3e9c15c593_9 && (found8zgensym_7ba73e3e9c15c593_9[nextMiss8zgensym_7ba73e3e9c15c593_9] || decodeMsgFieldSkip8zgensym_7ba73e3e9c15c593_9[nextMiss8zgensym_7ba73e3e9c15c593_9]) {
				nextMiss8zgensym_7ba73e3e9c15c593_9++
			}
			if nextMiss8zgensym_7ba73e3e9c15c593_9 == maxFields8zgensym_7ba73e3e9c15c593_9 {
				// filled all the empty fields!
				break doneWithStruct8zgensym_7ba73e3e9c15c593_9
			}
			missingFieldsLeft8zgensym_7ba73e3e9c15c593_9--
			curField8zgensym_7ba73e3e9c15c593_9 = decodeMsgFieldOrder8zgensym_7ba73e3e9c15c593_9[nextMiss8zgensym_7ba73e3e9c15c593_9]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_7ba73e3e9c15c593_9)
		switch curField8zgensym_7ba73e3e9c15c593_9 {
		// -- templateDecodeMsg ends here --

		case "C__int":
			found8zgensym_7ba73e3e9c15c593_9[0] = true
			z.C, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss8zgensym_7ba73e3e9c15c593_9 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Reply
var decodeMsgFieldOrder8zgensym_7ba73e3e9c15c593_9 = []string{"C__int"}

var decodeMsgFieldSkip8zgensym_7ba73e3e9c15c593_9 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z Reply) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.C == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Reply) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_7ba73e3e9c15c593_10 [1]bool
	fieldsInUse_zgensym_7ba73e3e9c15c593_11 := z.fieldsNotEmpty(empty_zgensym_7ba73e3e9c15c593_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_7ba73e3e9c15c593_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Reply'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x65, 0x70, 0x6c, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_7ba73e3e9c15c593_10[0] {
		// write "C__int"
		err = en.Append(0xa6, 0x43, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.C)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Reply) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "C__int"
		o = append(o, 0xa6, 0x43, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.C)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Reply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Reply) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields12zgensym_7ba73e3e9c15c593_13 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields12zgensym_7ba73e3e9c15c593_13 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields12zgensym_7ba73e3e9c15c593_13, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft12zgensym_7ba73e3e9c15c593_13 := totalEncodedFields12zgensym_7ba73e3e9c15c593_13
	missingFieldsLeft12zgensym_7ba73e3e9c15c593_13 := maxFields12zgensym_7ba73e3e9c15c593_13 - totalEncodedFields12zgensym_7ba73e3e9c15c593_13

	var nextMiss12zgensym_7ba73e3e9c15c593_13 int32 = -1
	var found12zgensym_7ba73e3e9c15c593_13 [maxFields12zgensym_7ba73e3e9c15c593_13]bool
	var curField12zgensym_7ba73e3e9c15c593_13 string

doneWithStruct12zgensym_7ba73e3e9c15c593_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_7ba73e3e9c15c593_13 > 0 || missingFieldsLeft12zgensym_7ba73e3e9c15c593_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_7ba73e3e9c15c593_13, missingFieldsLeft12zgensym_7ba73e3e9c15c593_13, msgp.ShowFound(found12zgensym_7ba73e3e9c15c593_13[:]), unmarshalMsgFieldOrder12zgensym_7ba73e3e9c15c593_13)
		if encodedFieldsLeft12zgensym_7ba73e3e9c15c593_13 > 0 {
			encodedFieldsLeft12zgensym_7ba73e3e9c15c593_13--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField12zgensym_7ba73e3e9c15c593_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_7ba73e3e9c15c593_13 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss12zgensym_7ba73e3e9c15c593_13 = 0
			}
			for nextMiss12zgensym_7ba73e3e9c15c593_13 < maxFields12zgensym_7ba73e3e9c15c593_13 && (found12zgensym_7ba73e3e9c15c593_13[nextMiss12zgensym_7ba73e3e9c15c593_13] || unmarshalMsgFieldSkip12zgensym_7ba73e3e9c15c593_13[nextMiss12zgensym_7ba73e3e9c15c593_13]) {
				nextMiss12zgensym_7ba73e3e9c15c593_13++
			}
			if nextMiss12zgensym_7ba73e3e9c15c593_13 == maxFields12zgensym_7ba73e3e9c15c593_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_7ba73e3e9c15c593_13
			}
			missingFieldsLeft12zgensym_7ba73e3e9c15c593_13--
			curField12zgensym_7ba73e3e9c15c593_13 = unmarshalMsgFieldOrder12zgensym_7ba73e3e9c15c593_13[nextMiss12zgensym_7ba73e3e9c15c593_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_7ba73e3e9c15c593_13)
		switch curField12zgensym_7ba73e3e9c15c593_13 {
		// -- templateUnmarshalMsg ends here --

		case "C__int":
			found12zgensym_7ba73e3e9c15c593_13[0] = true
			z.C, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_7ba73e3e9c15c593_13 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Reply
var unmarshalMsgFieldOrder12zgensym_7ba73e3e9c15c593_13 = []string{"C__int"}

var unmarshalMsgFieldSkip12zgensym_7ba73e3e9c15c593_13 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Reply) Msgsize() (s int) {
	s = 1 + 7 + msgp.IntSize
	return
}
