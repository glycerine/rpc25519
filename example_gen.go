// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Args) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_0 uint32
	zgensym_7ba73e3e9c15c593_0, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_0 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_7ba73e3e9c15c593_0}
		return
	}
	z.A, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.B, err = dc.ReadInt()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Args) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return err
	}
	err = en.WriteInt(z.A)
	if err != nil {
		return
	}
	err = en.WriteInt(z.B)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Args) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.A)
	o = msgp.AppendInt(o, z.B)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Args) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Args) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_1 uint32
	zgensym_7ba73e3e9c15c593_1, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_1 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_7ba73e3e9c15c593_1}
		return
	}
	z.A, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	z.B, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Args) Msgsize() (s int) {
	s = 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Arith) DecodeMsg(dc *msgp.Reader) (err error) {

	{
		var zgensym_7ba73e3e9c15c593_2 int
		zgensym_7ba73e3e9c15c593_2, err = dc.ReadInt()
		(*z) = Arith(zgensym_7ba73e3e9c15c593_2)
	}
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Arith) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Arith) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Arith) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Arith) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_7ba73e3e9c15c593_3 int
		zgensym_7ba73e3e9c15c593_3, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = Arith(zgensym_7ba73e3e9c15c593_3)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Arith) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BenchmarkMessage) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_5 uint32
	zgensym_7ba73e3e9c15c593_5, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_5 != 40 {
		err = msgp.ArrayError{Wanted: 40, Got: zgensym_7ba73e3e9c15c593_5}
		return
	}
	z.Field1, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field9, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field18, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field80, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field81, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field2, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field3, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field280, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field6, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field22, err = dc.ReadInt64()
	if err != nil {
		return
	}
	z.Field4, err = dc.ReadString()
	if err != nil {
		return
	}
	var zgensym_7ba73e3e9c15c593_6 uint32
	zgensym_7ba73e3e9c15c593_6, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Field5) >= int(zgensym_7ba73e3e9c15c593_6) {
		z.Field5 = (z.Field5)[:zgensym_7ba73e3e9c15c593_6]
	} else {
		z.Field5 = make([]uint64, zgensym_7ba73e3e9c15c593_6)
	}
	for zgensym_7ba73e3e9c15c593_4 := range z.Field5 {
		z.Field5[zgensym_7ba73e3e9c15c593_4], err = dc.ReadUint64()
		if err != nil {
			return
		}
	}
	z.Field59, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field7, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field16, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field130, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field12, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field17, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field13, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field14, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field104, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field100, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field101, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field102, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field103, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field29, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field30, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field60, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field271, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field272, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field150, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field23, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field24, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field25, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field78, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Field67, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field68, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field128, err = dc.ReadInt32()
	if err != nil {
		return
	}
	z.Field129, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Field131, err = dc.ReadInt32()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z *BenchmarkMessage) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 40
	err = en.Append(0xdc, 0x0, 0x28)
	if err != nil {
		return err
	}
	err = en.WriteString(z.Field1)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field9)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field18)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field80)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field81)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field2)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field3)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field280)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field6)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Field22)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field4)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Field5)))
	if err != nil {
		return
	}
	for zgensym_7ba73e3e9c15c593_4 := range z.Field5 {
		err = en.WriteUint64(z.Field5[zgensym_7ba73e3e9c15c593_4])
		if err != nil {
			return
		}
	}
	err = en.WriteBool(z.Field59)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field7)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field16)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field130)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field12)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field17)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field13)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field14)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field104)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field100)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field101)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field102)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field103)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field29)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field30)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field60)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field271)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field272)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field150)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field23)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field24)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field25)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Field78)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field67)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field68)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field128)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field129)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Field131)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BenchmarkMessage) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 40
	o = append(o, 0xdc, 0x0, 0x28)
	o = msgp.AppendString(o, z.Field1)
	o = msgp.AppendString(o, z.Field9)
	o = msgp.AppendString(o, z.Field18)
	o = msgp.AppendBool(o, z.Field80)
	o = msgp.AppendBool(o, z.Field81)
	o = msgp.AppendInt32(o, z.Field2)
	o = msgp.AppendInt32(o, z.Field3)
	o = msgp.AppendInt32(o, z.Field280)
	o = msgp.AppendInt32(o, z.Field6)
	o = msgp.AppendInt64(o, z.Field22)
	o = msgp.AppendString(o, z.Field4)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Field5)))
	for zgensym_7ba73e3e9c15c593_4 := range z.Field5 {
		o = msgp.AppendUint64(o, z.Field5[zgensym_7ba73e3e9c15c593_4])
	}
	o = msgp.AppendBool(o, z.Field59)
	o = msgp.AppendString(o, z.Field7)
	o = msgp.AppendInt32(o, z.Field16)
	o = msgp.AppendInt32(o, z.Field130)
	o = msgp.AppendBool(o, z.Field12)
	o = msgp.AppendBool(o, z.Field17)
	o = msgp.AppendBool(o, z.Field13)
	o = msgp.AppendBool(o, z.Field14)
	o = msgp.AppendInt32(o, z.Field104)
	o = msgp.AppendInt32(o, z.Field100)
	o = msgp.AppendInt32(o, z.Field101)
	o = msgp.AppendString(o, z.Field102)
	o = msgp.AppendString(o, z.Field103)
	o = msgp.AppendInt32(o, z.Field29)
	o = msgp.AppendBool(o, z.Field30)
	o = msgp.AppendInt32(o, z.Field60)
	o = msgp.AppendInt32(o, z.Field271)
	o = msgp.AppendInt32(o, z.Field272)
	o = msgp.AppendInt32(o, z.Field150)
	o = msgp.AppendInt32(o, z.Field23)
	o = msgp.AppendBool(o, z.Field24)
	o = msgp.AppendInt32(o, z.Field25)
	o = msgp.AppendBool(o, z.Field78)
	o = msgp.AppendInt32(o, z.Field67)
	o = msgp.AppendInt32(o, z.Field68)
	o = msgp.AppendInt32(o, z.Field128)
	o = msgp.AppendString(o, z.Field129)
	o = msgp.AppendInt32(o, z.Field131)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BenchmarkMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *BenchmarkMessage) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_7 uint32
	zgensym_7ba73e3e9c15c593_7, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_7 != 40 {
		err = msgp.ArrayError{Wanted: 40, Got: zgensym_7ba73e3e9c15c593_7}
		return
	}
	z.Field1, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field9, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field18, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field80, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field81, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field2, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field3, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field280, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field6, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field22, bts, err = nbs.ReadInt64Bytes(bts)

	if err != nil {
		return
	}
	z.Field4, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	if nbs.AlwaysNil {
		(z.Field5) = (z.Field5)[:0]
	} else {

		var zgensym_7ba73e3e9c15c593_8 uint32
		zgensym_7ba73e3e9c15c593_8, bts, err = nbs.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if cap(z.Field5) >= int(zgensym_7ba73e3e9c15c593_8) {
			z.Field5 = (z.Field5)[:zgensym_7ba73e3e9c15c593_8]
		} else {
			z.Field5 = make([]uint64, zgensym_7ba73e3e9c15c593_8)
		}
		for zgensym_7ba73e3e9c15c593_4 := range z.Field5 {
			z.Field5[zgensym_7ba73e3e9c15c593_4], bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		}
	}
	z.Field59, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field7, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field16, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field130, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field12, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field17, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field13, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field14, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field104, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field100, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field101, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field102, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field103, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field29, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field30, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field60, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field271, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field272, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field150, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field23, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field24, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field25, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field78, bts, err = nbs.ReadBoolBytes(bts)

	if err != nil {
		return
	}
	z.Field67, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field68, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field128, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	z.Field129, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Field131, bts, err = nbs.ReadInt32Bytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BenchmarkMessage) Msgsize() (s int) {
	s = 3 + msgp.StringPrefixSize + len(z.Field1) + msgp.StringPrefixSize + len(z.Field9) + msgp.StringPrefixSize + len(z.Field18) + msgp.BoolSize + msgp.BoolSize + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.Int64Size + msgp.StringPrefixSize + len(z.Field4) + msgp.ArrayHeaderSize + (len(z.Field5) * (msgp.Uint64Size)) + msgp.BoolSize + msgp.StringPrefixSize + len(z.Field7) + msgp.Int32Size + msgp.Int32Size + msgp.BoolSize + msgp.BoolSize + msgp.BoolSize + msgp.BoolSize + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.StringPrefixSize + len(z.Field102) + msgp.StringPrefixSize + len(z.Field103) + msgp.Int32Size + msgp.BoolSize + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.BoolSize + msgp.Int32Size + msgp.BoolSize + msgp.Int32Size + msgp.Int32Size + msgp.Int32Size + msgp.StringPrefixSize + len(z.Field129) + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BuiltinTypes) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_9 uint32
	zgensym_7ba73e3e9c15c593_9, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_9 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_9}
		return
	}
	z.Placeholder, err = dc.ReadInt()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z BuiltinTypes) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteInt(z.Placeholder)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BuiltinTypes) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt(o, z.Placeholder)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BuiltinTypes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *BuiltinTypes) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_10 uint32
	zgensym_7ba73e3e9c15c593_10, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_10 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_10}
		return
	}
	z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BuiltinTypes) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Embed) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_11 uint32
	zgensym_7ba73e3e9c15c593_11, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_11 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_11}
		return
	}
	{
		var zgensym_7ba73e3e9c15c593_12 int
		zgensym_7ba73e3e9c15c593_12, err = dc.ReadInt()
		z.Simple = Simple(zgensym_7ba73e3e9c15c593_12)
	}
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Embed) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteInt(int(z.Simple))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Embed) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt(o, int(z.Simple))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Embed) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Embed) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_13 uint32
	zgensym_7ba73e3e9c15c593_13, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_13 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_13}
		return
	}
	{
		var zgensym_7ba73e3e9c15c593_14 int
		zgensym_7ba73e3e9c15c593_14, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		z.Simple = Simple(zgensym_7ba73e3e9c15c593_14)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Embed) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Hello) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_15 uint32
	zgensym_7ba73e3e9c15c593_15, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_15 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_15}
		return
	}
	z.Placeholder, err = dc.ReadInt()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Hello) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteInt(z.Placeholder)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Hello) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt(o, z.Placeholder)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Hello) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Hello) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_16 uint32
	zgensym_7ba73e3e9c15c593_16, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_16 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_16}
		return
	}
	z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Hello) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *InvalidRequest) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_17 uint32
	zgensym_7ba73e3e9c15c593_17, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_17 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_17}
		return
	}
	z.Placeholder, err = dc.ReadInt()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z InvalidRequest) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteInt(z.Placeholder)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z InvalidRequest) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt(o, z.Placeholder)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InvalidRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *InvalidRequest) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_18 uint32
	zgensym_7ba73e3e9c15c593_18, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_18 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_18}
		return
	}
	z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z InvalidRequest) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *MustBeCancelled) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_19 uint32
	zgensym_7ba73e3e9c15c593_19, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_19 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_19}
		return
	}
	z.Placeholder, err = dc.ReadInt()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z MustBeCancelled) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteInt(z.Placeholder)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MustBeCancelled) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt(o, z.Placeholder)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MustBeCancelled) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *MustBeCancelled) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_20 uint32
	zgensym_7ba73e3e9c15c593_20, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_20 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_20}
		return
	}
	z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MustBeCancelled) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Reply) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_21 uint32
	zgensym_7ba73e3e9c15c593_21, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_21 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_21}
		return
	}
	z.C, err = dc.ReadInt()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Reply) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return err
	}
	err = en.WriteInt(z.C)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Reply) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt(o, z.C)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Reply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Reply) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_22 uint32
	zgensym_7ba73e3e9c15c593_22, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_22 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zgensym_7ba73e3e9c15c593_22}
		return
	}
	z.C, bts, err = nbs.ReadIntBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Reply) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Request) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_23 uint32
	zgensym_7ba73e3e9c15c593_23, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_23 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_7ba73e3e9c15c593_23}
		return
	}
	z.ServiceMethod, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Seq, err = dc.ReadUint64()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Request) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return err
	}
	err = en.WriteString(z.ServiceMethod)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Seq)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Request) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendString(o, z.ServiceMethod)
	o = msgp.AppendUint64(o, z.Seq)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Request) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Request) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_24 uint32
	zgensym_7ba73e3e9c15c593_24, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_24 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zgensym_7ba73e3e9c15c593_24}
		return
	}
	z.ServiceMethod, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Seq, bts, err = nbs.ReadUint64Bytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Request) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.ServiceMethod) + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {

	var zgensym_7ba73e3e9c15c593_25 uint32
	zgensym_7ba73e3e9c15c593_25, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_25 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zgensym_7ba73e3e9c15c593_25}
		return
	}
	z.ServiceMethod, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Seq, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Error, err = dc.ReadString()
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Response) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return err
	}
	err = en.WriteString(z.ServiceMethod)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Seq)
	if err != nil {
		return
	}
	err = en.WriteString(z.Error)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Response) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.ServiceMethod)
	o = msgp.AppendUint64(o, z.Seq)
	o = msgp.AppendString(o, z.Error)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Response) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var zgensym_7ba73e3e9c15c593_26 uint32
	zgensym_7ba73e3e9c15c593_26, bts, err = nbs.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zgensym_7ba73e3e9c15c593_26 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zgensym_7ba73e3e9c15c593_26}
		return
	}
	z.ServiceMethod, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	z.Seq, bts, err = nbs.ReadUint64Bytes(bts)

	if err != nil {
		return
	}
	z.Error, bts, err = nbs.ReadStringBytes(bts)

	if err != nil {
		return
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Response) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.ServiceMethod) + msgp.Uint64Size + msgp.StringPrefixSize + len(z.Error)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Simple) DecodeMsg(dc *msgp.Reader) (err error) {

	{
		var zgensym_7ba73e3e9c15c593_27 int
		zgensym_7ba73e3e9c15c593_27, err = dc.ReadInt()
		(*z) = Simple(zgensym_7ba73e3e9c15c593_27)
	}
	if err != nil {
		return
	}
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Simple) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Simple) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Simple) UnmarshalMsg(bts []byte) (o []byte, err error) {
	cfg := &msgp.RuntimeConfig{UnsafeZeroCopy: true}
	return z.UnmarshalMsgWithCfg(bts, cfg)
}
func (z *Simple) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_7ba73e3e9c15c593_28 int
		zgensym_7ba73e3e9c15c593_28, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = Simple(zgensym_7ba73e3e9c15c593_28)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Simple) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
