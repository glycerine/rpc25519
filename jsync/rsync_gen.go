// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package jsync

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
	"github.com/glycerine/rpc25519/jcdc"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *BlobStore) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_9db0ba711f6a3e5a_3 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_9db0ba711f6a3e5a_3 uint32
	totalEncodedFields2zgensym_9db0ba711f6a3e5a_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_9db0ba711f6a3e5a_3 := totalEncodedFields2zgensym_9db0ba711f6a3e5a_3
	missingFieldsLeft2zgensym_9db0ba711f6a3e5a_3 := maxFields2zgensym_9db0ba711f6a3e5a_3 - totalEncodedFields2zgensym_9db0ba711f6a3e5a_3

	var nextMiss2zgensym_9db0ba711f6a3e5a_3 int32 = -1
	var found2zgensym_9db0ba711f6a3e5a_3 [maxFields2zgensym_9db0ba711f6a3e5a_3]bool
	var curField2zgensym_9db0ba711f6a3e5a_3 string

doneWithStruct2zgensym_9db0ba711f6a3e5a_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_9db0ba711f6a3e5a_3 > 0 || missingFieldsLeft2zgensym_9db0ba711f6a3e5a_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_9db0ba711f6a3e5a_3, missingFieldsLeft2zgensym_9db0ba711f6a3e5a_3, msgp.ShowFound(found2zgensym_9db0ba711f6a3e5a_3[:]), decodeMsgFieldOrder2zgensym_9db0ba711f6a3e5a_3)
		if encodedFieldsLeft2zgensym_9db0ba711f6a3e5a_3 > 0 {
			encodedFieldsLeft2zgensym_9db0ba711f6a3e5a_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_9db0ba711f6a3e5a_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_9db0ba711f6a3e5a_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_9db0ba711f6a3e5a_3 = 0
			}
			for nextMiss2zgensym_9db0ba711f6a3e5a_3 < maxFields2zgensym_9db0ba711f6a3e5a_3 && (found2zgensym_9db0ba711f6a3e5a_3[nextMiss2zgensym_9db0ba711f6a3e5a_3] || decodeMsgFieldSkip2zgensym_9db0ba711f6a3e5a_3[nextMiss2zgensym_9db0ba711f6a3e5a_3]) {
				nextMiss2zgensym_9db0ba711f6a3e5a_3++
			}
			if nextMiss2zgensym_9db0ba711f6a3e5a_3 == maxFields2zgensym_9db0ba711f6a3e5a_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_9db0ba711f6a3e5a_3
			}
			missingFieldsLeft2zgensym_9db0ba711f6a3e5a_3--
			curField2zgensym_9db0ba711f6a3e5a_3 = decodeMsgFieldOrder2zgensym_9db0ba711f6a3e5a_3[nextMiss2zgensym_9db0ba711f6a3e5a_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_9db0ba711f6a3e5a_3)
		switch curField2zgensym_9db0ba711f6a3e5a_3 {
		// -- templateDecodeMsg ends here --

		case "Map__map":
			found2zgensym_9db0ba711f6a3e5a_3[0] = true
			var zgensym_9db0ba711f6a3e5a_4 uint32
			zgensym_9db0ba711f6a3e5a_4, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Map == nil && zgensym_9db0ba711f6a3e5a_4 > 0 {
				z.Map = make(map[string]*Chunk, zgensym_9db0ba711f6a3e5a_4)
			} else if len(z.Map) > 0 {
				for key, _ := range z.Map {
					delete(z.Map, key)
				}
			}
			for zgensym_9db0ba711f6a3e5a_4 > 0 {
				zgensym_9db0ba711f6a3e5a_4--
				var zgensym_9db0ba711f6a3e5a_0 string
				var zgensym_9db0ba711f6a3e5a_1 *Chunk
				zgensym_9db0ba711f6a3e5a_0, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_9db0ba711f6a3e5a_1 != nil {
						dc.PushAlwaysNil()
						err = zgensym_9db0ba711f6a3e5a_1.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_9db0ba711f6a3e5a_1 == nil {
						zgensym_9db0ba711f6a3e5a_1 = new(Chunk)
					}
					dc.DedupIndexEachPtr(zgensym_9db0ba711f6a3e5a_1)

					err = zgensym_9db0ba711f6a3e5a_1.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.Map[zgensym_9db0ba711f6a3e5a_0] = zgensym_9db0ba711f6a3e5a_1
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_9db0ba711f6a3e5a_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of BlobStore
var decodeMsgFieldOrder2zgensym_9db0ba711f6a3e5a_3 = []string{"Map__map"}

var decodeMsgFieldSkip2zgensym_9db0ba711f6a3e5a_3 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *BlobStore) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Map) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *BlobStore) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_5 [1]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_6 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_5[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_6 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'BlobStore'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_5[0] {
		// write "Map__map"
		err = en.Append(0xa8, 0x4d, 0x61, 0x70, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Map)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_0, zgensym_9db0ba711f6a3e5a_1 := range z.Map {
			err = en.WriteString(zgensym_9db0ba711f6a3e5a_0)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_9db0ba711f6a3e5a_1 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_9db0ba711f6a3e5a_1.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BlobStore) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Map__map"
		o = append(o, 0xa8, 0x4d, 0x61, 0x70, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Map)))
		for zgensym_9db0ba711f6a3e5a_0, zgensym_9db0ba711f6a3e5a_1 := range z.Map {
			o = msgp.AppendString(o, zgensym_9db0ba711f6a3e5a_0)
			// marshalGen.gPtr()

			if zgensym_9db0ba711f6a3e5a_1 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_9db0ba711f6a3e5a_1.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlobStore) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *BlobStore) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields7zgensym_9db0ba711f6a3e5a_8 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields7zgensym_9db0ba711f6a3e5a_8 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields7zgensym_9db0ba711f6a3e5a_8, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 := totalEncodedFields7zgensym_9db0ba711f6a3e5a_8
	missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8 := maxFields7zgensym_9db0ba711f6a3e5a_8 - totalEncodedFields7zgensym_9db0ba711f6a3e5a_8

	var nextMiss7zgensym_9db0ba711f6a3e5a_8 int32 = -1
	var found7zgensym_9db0ba711f6a3e5a_8 [maxFields7zgensym_9db0ba711f6a3e5a_8]bool
	var curField7zgensym_9db0ba711f6a3e5a_8 string

doneWithStruct7zgensym_9db0ba711f6a3e5a_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 || missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8, missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8, msgp.ShowFound(found7zgensym_9db0ba711f6a3e5a_8[:]), unmarshalMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8)
		if encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8 > 0 {
			encodedFieldsLeft7zgensym_9db0ba711f6a3e5a_8--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField7zgensym_9db0ba711f6a3e5a_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_9db0ba711f6a3e5a_8 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss7zgensym_9db0ba711f6a3e5a_8 = 0
			}
			for nextMiss7zgensym_9db0ba711f6a3e5a_8 < maxFields7zgensym_9db0ba711f6a3e5a_8 && (found7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8] || unmarshalMsgFieldSkip7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8]) {
				nextMiss7zgensym_9db0ba711f6a3e5a_8++
			}
			if nextMiss7zgensym_9db0ba711f6a3e5a_8 == maxFields7zgensym_9db0ba711f6a3e5a_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_9db0ba711f6a3e5a_8
			}
			missingFieldsLeft7zgensym_9db0ba711f6a3e5a_8--
			curField7zgensym_9db0ba711f6a3e5a_8 = unmarshalMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8[nextMiss7zgensym_9db0ba711f6a3e5a_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_9db0ba711f6a3e5a_8)
		switch curField7zgensym_9db0ba711f6a3e5a_8 {
		// -- templateUnmarshalMsg ends here --

		case "Map__map":
			found7zgensym_9db0ba711f6a3e5a_8[0] = true
			if nbs.AlwaysNil {
				if len(z.Map) > 0 {
					for key, _ := range z.Map {
						delete(z.Map, key)
					}
				}

			} else {

				var zgensym_9db0ba711f6a3e5a_9 uint32
				zgensym_9db0ba711f6a3e5a_9, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Map == nil && zgensym_9db0ba711f6a3e5a_9 > 0 {
					z.Map = make(map[string]*Chunk, zgensym_9db0ba711f6a3e5a_9)
				} else if len(z.Map) > 0 {
					for key, _ := range z.Map {
						delete(z.Map, key)
					}
				}
				for zgensym_9db0ba711f6a3e5a_9 > 0 {
					var zgensym_9db0ba711f6a3e5a_0 string
					var zgensym_9db0ba711f6a3e5a_1 *Chunk
					zgensym_9db0ba711f6a3e5a_9--
					zgensym_9db0ba711f6a3e5a_0, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_9db0ba711f6a3e5a_1 != nil {
							zgensym_9db0ba711f6a3e5a_1.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_9db0ba711f6a3e5a_1 {
								zgensym_9db0ba711f6a3e5a_1.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_9db0ba711f6a3e5a_1 == nil {
								zgensym_9db0ba711f6a3e5a_1 = new(Chunk)
							}

							bts, err = zgensym_9db0ba711f6a3e5a_1.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.Map[zgensym_9db0ba711f6a3e5a_0] = zgensym_9db0ba711f6a3e5a_1
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_9db0ba711f6a3e5a_8 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of BlobStore
var unmarshalMsgFieldOrder7zgensym_9db0ba711f6a3e5a_8 = []string{"Map__map"}

var unmarshalMsgFieldSkip7zgensym_9db0ba711f6a3e5a_8 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlobStore) Msgsize() (s int) {
	s = 1 + 9 + msgp.MapHeaderSize
	if z.Map != nil {
		for zgensym_9db0ba711f6a3e5a_0, zgensym_9db0ba711f6a3e5a_1 := range z.Map {
			_ = zgensym_9db0ba711f6a3e5a_1
			_ = zgensym_9db0ba711f6a3e5a_0
			s += msgp.StringPrefixSize + len(zgensym_9db0ba711f6a3e5a_0)
			if zgensym_9db0ba711f6a3e5a_1 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_9db0ba711f6a3e5a_1.Msgsize()
			}
		}
	}
	return
}
func (z *BlobStore) Gstring() (r string) {
	r = "&BlobStore{\n"
	r += fmt.Sprintf("Map: %v,\n", z.Map)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Chunk) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields10zgensym_9db0ba711f6a3e5a_11 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields10zgensym_9db0ba711f6a3e5a_11 uint32
	totalEncodedFields10zgensym_9db0ba711f6a3e5a_11, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 := totalEncodedFields10zgensym_9db0ba711f6a3e5a_11
	missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11 := maxFields10zgensym_9db0ba711f6a3e5a_11 - totalEncodedFields10zgensym_9db0ba711f6a3e5a_11

	var nextMiss10zgensym_9db0ba711f6a3e5a_11 int32 = -1
	var found10zgensym_9db0ba711f6a3e5a_11 [maxFields10zgensym_9db0ba711f6a3e5a_11]bool
	var curField10zgensym_9db0ba711f6a3e5a_11 string

doneWithStruct10zgensym_9db0ba711f6a3e5a_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 || missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11, missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11, msgp.ShowFound(found10zgensym_9db0ba711f6a3e5a_11[:]), decodeMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11)
		if encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11 > 0 {
			encodedFieldsLeft10zgensym_9db0ba711f6a3e5a_11--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField10zgensym_9db0ba711f6a3e5a_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_9db0ba711f6a3e5a_11 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss10zgensym_9db0ba711f6a3e5a_11 = 0
			}
			for nextMiss10zgensym_9db0ba711f6a3e5a_11 < maxFields10zgensym_9db0ba711f6a3e5a_11 && (found10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11] || decodeMsgFieldSkip10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11]) {
				nextMiss10zgensym_9db0ba711f6a3e5a_11++
			}
			if nextMiss10zgensym_9db0ba711f6a3e5a_11 == maxFields10zgensym_9db0ba711f6a3e5a_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_9db0ba711f6a3e5a_11
			}
			missingFieldsLeft10zgensym_9db0ba711f6a3e5a_11--
			curField10zgensym_9db0ba711f6a3e5a_11 = decodeMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11[nextMiss10zgensym_9db0ba711f6a3e5a_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_9db0ba711f6a3e5a_11)
		switch curField10zgensym_9db0ba711f6a3e5a_11 {
		// -- templateDecodeMsg ends here --

		case "Beg_zid00_i64":
			found10zgensym_9db0ba711f6a3e5a_11[0] = true
			z.Beg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Endx_zid01_i64":
			found10zgensym_9db0ba711f6a3e5a_11[1] = true
			z.Endx, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Cry_zid02_str":
			found10zgensym_9db0ba711f6a3e5a_11[2] = true
			z.Cry, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Data_zid03_bin":
			found10zgensym_9db0ba711f6a3e5a_11[3] = true
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_9db0ba711f6a3e5a_11 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Chunk
var decodeMsgFieldOrder10zgensym_9db0ba711f6a3e5a_11 = []string{"Beg_zid00_i64", "Endx_zid01_i64", "Cry_zid02_str", "Data_zid03_bin"}

var decodeMsgFieldSkip10zgensym_9db0ba711f6a3e5a_11 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Chunk) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.Beg == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Endx == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Cry) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Data) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Chunk) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_12 [4]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_13 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_12[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_13 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Chunk'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x68, 0x75, 0x6e, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[0] {
		// write "Beg_zid00_i64"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[1] {
		// write "Endx_zid01_i64"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Endx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[2] {
		// write "Cry_zid02_str"
		err = en.Append(0xad, 0x43, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Cry)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_12[3] {
		// write "Data_zid03_bin"
		err = en.Append(0xae, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Data)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Chunk) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Beg_zid00_i64"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Beg)
	}

	if !empty[1] {
		// string "Endx_zid01_i64"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Endx)
	}

	if !empty[2] {
		// string "Cry_zid02_str"
		o = append(o, 0xad, 0x43, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Cry)
	}

	if !empty[3] {
		// string "Data_zid03_bin"
		o = append(o, 0xae, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Data)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Chunk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Chunk) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields14zgensym_9db0ba711f6a3e5a_15 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields14zgensym_9db0ba711f6a3e5a_15 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields14zgensym_9db0ba711f6a3e5a_15, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft14zgensym_9db0ba711f6a3e5a_15 := totalEncodedFields14zgensym_9db0ba711f6a3e5a_15
	missingFieldsLeft14zgensym_9db0ba711f6a3e5a_15 := maxFields14zgensym_9db0ba711f6a3e5a_15 - totalEncodedFields14zgensym_9db0ba711f6a3e5a_15

	var nextMiss14zgensym_9db0ba711f6a3e5a_15 int32 = -1
	var found14zgensym_9db0ba711f6a3e5a_15 [maxFields14zgensym_9db0ba711f6a3e5a_15]bool
	var curField14zgensym_9db0ba711f6a3e5a_15 string

doneWithStruct14zgensym_9db0ba711f6a3e5a_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_9db0ba711f6a3e5a_15 > 0 || missingFieldsLeft14zgensym_9db0ba711f6a3e5a_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft14zgensym_9db0ba711f6a3e5a_15, missingFieldsLeft14zgensym_9db0ba711f6a3e5a_15, msgp.ShowFound(found14zgensym_9db0ba711f6a3e5a_15[:]), unmarshalMsgFieldOrder14zgensym_9db0ba711f6a3e5a_15)
		if encodedFieldsLeft14zgensym_9db0ba711f6a3e5a_15 > 0 {
			encodedFieldsLeft14zgensym_9db0ba711f6a3e5a_15--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField14zgensym_9db0ba711f6a3e5a_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_9db0ba711f6a3e5a_15 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss14zgensym_9db0ba711f6a3e5a_15 = 0
			}
			for nextMiss14zgensym_9db0ba711f6a3e5a_15 < maxFields14zgensym_9db0ba711f6a3e5a_15 && (found14zgensym_9db0ba711f6a3e5a_15[nextMiss14zgensym_9db0ba711f6a3e5a_15] || unmarshalMsgFieldSkip14zgensym_9db0ba711f6a3e5a_15[nextMiss14zgensym_9db0ba711f6a3e5a_15]) {
				nextMiss14zgensym_9db0ba711f6a3e5a_15++
			}
			if nextMiss14zgensym_9db0ba711f6a3e5a_15 == maxFields14zgensym_9db0ba711f6a3e5a_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_9db0ba711f6a3e5a_15
			}
			missingFieldsLeft14zgensym_9db0ba711f6a3e5a_15--
			curField14zgensym_9db0ba711f6a3e5a_15 = unmarshalMsgFieldOrder14zgensym_9db0ba711f6a3e5a_15[nextMiss14zgensym_9db0ba711f6a3e5a_15]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField14zgensym_9db0ba711f6a3e5a_15)
		switch curField14zgensym_9db0ba711f6a3e5a_15 {
		// -- templateUnmarshalMsg ends here --

		case "Beg_zid00_i64":
			found14zgensym_9db0ba711f6a3e5a_15[0] = true
			z.Beg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid01_i64":
			found14zgensym_9db0ba711f6a3e5a_15[1] = true
			z.Endx, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Cry_zid02_str":
			found14zgensym_9db0ba711f6a3e5a_15[2] = true
			z.Cry, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Data_zid03_bin":
			found14zgensym_9db0ba711f6a3e5a_15[3] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Data = z.Data[:0]
			} else {
				z.Data, bts, err = nbs.ReadBytesBytes(bts, z.Data)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_9db0ba711f6a3e5a_15 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Chunk
var unmarshalMsgFieldOrder14zgensym_9db0ba711f6a3e5a_15 = []string{"Beg_zid00_i64", "Endx_zid01_i64", "Cry_zid02_str", "Data_zid03_bin"}

var unmarshalMsgFieldSkip14zgensym_9db0ba711f6a3e5a_15 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Chunk) Msgsize() (s int) {
	s = 1 + 14 + msgp.Int64Size + 15 + msgp.Int64Size + 14 + msgp.StringPrefixSize + len(z.Cry) + 15 + msgp.BytesPrefixSize + len(z.Data)
	return
}
func (z *Chunk) Gstring() (r string) {
	r = "&Chunk{\n"
	r += fmt.Sprintf(" Beg: %v,\n", z.Beg)
	r += fmt.Sprintf("Endx: %v,\n", z.Endx)
	r += fmt.Sprintf(" Cry: \"%v\",\n", z.Cry)
	r += fmt.Sprintf("Data: %v,\n", z.Data)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Chunks) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields17zgensym_9db0ba711f6a3e5a_18 = 8

	// -- templateDecodeMsg starts here--
	var totalEncodedFields17zgensym_9db0ba711f6a3e5a_18 uint32
	totalEncodedFields17zgensym_9db0ba711f6a3e5a_18, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft17zgensym_9db0ba711f6a3e5a_18 := totalEncodedFields17zgensym_9db0ba711f6a3e5a_18
	missingFieldsLeft17zgensym_9db0ba711f6a3e5a_18 := maxFields17zgensym_9db0ba711f6a3e5a_18 - totalEncodedFields17zgensym_9db0ba711f6a3e5a_18

	var nextMiss17zgensym_9db0ba711f6a3e5a_18 int32 = -1
	var found17zgensym_9db0ba711f6a3e5a_18 [maxFields17zgensym_9db0ba711f6a3e5a_18]bool
	var curField17zgensym_9db0ba711f6a3e5a_18 string

doneWithStruct17zgensym_9db0ba711f6a3e5a_18:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft17zgensym_9db0ba711f6a3e5a_18 > 0 || missingFieldsLeft17zgensym_9db0ba711f6a3e5a_18 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft17zgensym_9db0ba711f6a3e5a_18, missingFieldsLeft17zgensym_9db0ba711f6a3e5a_18, msgp.ShowFound(found17zgensym_9db0ba711f6a3e5a_18[:]), decodeMsgFieldOrder17zgensym_9db0ba711f6a3e5a_18)
		if encodedFieldsLeft17zgensym_9db0ba711f6a3e5a_18 > 0 {
			encodedFieldsLeft17zgensym_9db0ba711f6a3e5a_18--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField17zgensym_9db0ba711f6a3e5a_18 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss17zgensym_9db0ba711f6a3e5a_18 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss17zgensym_9db0ba711f6a3e5a_18 = 0
			}
			for nextMiss17zgensym_9db0ba711f6a3e5a_18 < maxFields17zgensym_9db0ba711f6a3e5a_18 && (found17zgensym_9db0ba711f6a3e5a_18[nextMiss17zgensym_9db0ba711f6a3e5a_18] || decodeMsgFieldSkip17zgensym_9db0ba711f6a3e5a_18[nextMiss17zgensym_9db0ba711f6a3e5a_18]) {
				nextMiss17zgensym_9db0ba711f6a3e5a_18++
			}
			if nextMiss17zgensym_9db0ba711f6a3e5a_18 == maxFields17zgensym_9db0ba711f6a3e5a_18 {
				// filled all the empty fields!
				break doneWithStruct17zgensym_9db0ba711f6a3e5a_18
			}
			missingFieldsLeft17zgensym_9db0ba711f6a3e5a_18--
			curField17zgensym_9db0ba711f6a3e5a_18 = decodeMsgFieldOrder17zgensym_9db0ba711f6a3e5a_18[nextMiss17zgensym_9db0ba711f6a3e5a_18]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField17zgensym_9db0ba711f6a3e5a_18)
		switch curField17zgensym_9db0ba711f6a3e5a_18 {
		// -- templateDecodeMsg ends here --

		case "Chunks_zid00_slc":
			found17zgensym_9db0ba711f6a3e5a_18[0] = true
			var zgensym_9db0ba711f6a3e5a_19 uint32
			zgensym_9db0ba711f6a3e5a_19, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Chunks) >= int(zgensym_9db0ba711f6a3e5a_19) {
				z.Chunks = (z.Chunks)[:zgensym_9db0ba711f6a3e5a_19]
			} else {
				z.Chunks = make([]*Chunk, zgensym_9db0ba711f6a3e5a_19)
			}
			for zgensym_9db0ba711f6a3e5a_16 := range z.Chunks {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Chunks[zgensym_9db0ba711f6a3e5a_16] != nil {
						dc.PushAlwaysNil()
						err = z.Chunks[zgensym_9db0ba711f6a3e5a_16].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Chunks[zgensym_9db0ba711f6a3e5a_16] == nil {
						z.Chunks[zgensym_9db0ba711f6a3e5a_16] = new(Chunk)
					}
					dc.DedupIndexEachPtr(z.Chunks[zgensym_9db0ba711f6a3e5a_16])

					err = z.Chunks[zgensym_9db0ba711f6a3e5a_16].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "Path_zid01_str":
			found17zgensym_9db0ba711f6a3e5a_18[1] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FileSize_zid02_i64":
			found17zgensym_9db0ba711f6a3e5a_18[2] = true
			z.FileSize, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FileCry_zid03_str":
			found17zgensym_9db0ba711f6a3e5a_18[3] = true
			z.FileCry, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PreAllocUnwritBeg_zid04_i64":
			found17zgensym_9db0ba711f6a3e5a_18[4] = true
			z.PreAllocUnwritBeg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PreAllocUnwritEndx_zid05_i64":
			found17zgensym_9db0ba711f6a3e5a_18[5] = true
			z.PreAllocUnwritEndx, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PreAllocLargestSpan_zid06_i64":
			found17zgensym_9db0ba711f6a3e5a_18[6] = true
			z.PreAllocLargestSpan, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PreAllocBeforeLast_zid07_boo":
			found17zgensym_9db0ba711f6a3e5a_18[7] = true
			z.PreAllocBeforeLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss17zgensym_9db0ba711f6a3e5a_18 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Chunks
var decodeMsgFieldOrder17zgensym_9db0ba711f6a3e5a_18 = []string{"Chunks_zid00_slc", "Path_zid01_str", "FileSize_zid02_i64", "FileCry_zid03_str", "PreAllocUnwritBeg_zid04_i64", "PreAllocUnwritEndx_zid05_i64", "PreAllocLargestSpan_zid06_i64", "PreAllocBeforeLast_zid07_boo"}

var decodeMsgFieldSkip17zgensym_9db0ba711f6a3e5a_18 = []bool{false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Chunks) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 8
	}
	var fieldsInUse uint32 = 8
	isempty[0] = (len(z.Chunks) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Path) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.FileSize == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FileCry) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.PreAllocUnwritBeg == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.PreAllocUnwritEndx == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.PreAllocLargestSpan == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (!z.PreAllocBeforeLast) // bool, omitempty
	if isempty[7] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Chunks) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_20 [8]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_21 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_20[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_21 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Chunks'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[0] {
		// write "Chunks_zid00_slc"
		err = en.Append(0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Chunks)))
		if err != nil {
			return
		}
		for zgensym_9db0ba711f6a3e5a_16 := range z.Chunks {
			// gPtr.encodeGen():

			if z.Chunks[zgensym_9db0ba711f6a3e5a_16] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Chunks[zgensym_9db0ba711f6a3e5a_16].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[1] {
		// write "Path_zid01_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[2] {
		// write "FileSize_zid02_i64"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FileSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[3] {
		// write "FileCry_zid03_str"
		err = en.Append(0xb1, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FileCry)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[4] {
		// write "PreAllocUnwritBeg_zid04_i64"
		err = en.Append(0xbb, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PreAllocUnwritBeg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[5] {
		// write "PreAllocUnwritEndx_zid05_i64"
		err = en.Append(0xbc, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PreAllocUnwritEndx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[6] {
		// write "PreAllocLargestSpan_zid06_i64"
		err = en.Append(0xbd, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PreAllocLargestSpan)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_20[7] {
		// write "PreAllocBeforeLast_zid07_boo"
		err = en.Append(0xbc, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.PreAllocBeforeLast)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Chunks) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [8]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Chunks_zid00_slc"
		o = append(o, 0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Chunks)))
		for zgensym_9db0ba711f6a3e5a_16 := range z.Chunks {
			// marshalGen.gPtr()

			if z.Chunks[zgensym_9db0ba711f6a3e5a_16] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Chunks[zgensym_9db0ba711f6a3e5a_16].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "Path_zid01_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[2] {
		// string "FileSize_zid02_i64"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FileSize)
	}

	if !empty[3] {
		// string "FileCry_zid03_str"
		o = append(o, 0xb1, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FileCry)
	}

	if !empty[4] {
		// string "PreAllocUnwritBeg_zid04_i64"
		o = append(o, 0xbb, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PreAllocUnwritBeg)
	}

	if !empty[5] {
		// string "PreAllocUnwritEndx_zid05_i64"
		o = append(o, 0xbc, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PreAllocUnwritEndx)
	}

	if !empty[6] {
		// string "PreAllocLargestSpan_zid06_i64"
		o = append(o, 0xbd, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PreAllocLargestSpan)
	}

	if !empty[7] {
		// string "PreAllocBeforeLast_zid07_boo"
		o = append(o, 0xbc, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.PreAllocBeforeLast)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Chunks) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Chunks) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields22zgensym_9db0ba711f6a3e5a_23 = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields22zgensym_9db0ba711f6a3e5a_23 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields22zgensym_9db0ba711f6a3e5a_23, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23 := totalEncodedFields22zgensym_9db0ba711f6a3e5a_23
	missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23 := maxFields22zgensym_9db0ba711f6a3e5a_23 - totalEncodedFields22zgensym_9db0ba711f6a3e5a_23

	var nextMiss22zgensym_9db0ba711f6a3e5a_23 int32 = -1
	var found22zgensym_9db0ba711f6a3e5a_23 [maxFields22zgensym_9db0ba711f6a3e5a_23]bool
	var curField22zgensym_9db0ba711f6a3e5a_23 string

doneWithStruct22zgensym_9db0ba711f6a3e5a_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23 > 0 || missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23, missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23, msgp.ShowFound(found22zgensym_9db0ba711f6a3e5a_23[:]), unmarshalMsgFieldOrder22zgensym_9db0ba711f6a3e5a_23)
		if encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23 > 0 {
			encodedFieldsLeft22zgensym_9db0ba711f6a3e5a_23--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField22zgensym_9db0ba711f6a3e5a_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_9db0ba711f6a3e5a_23 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss22zgensym_9db0ba711f6a3e5a_23 = 0
			}
			for nextMiss22zgensym_9db0ba711f6a3e5a_23 < maxFields22zgensym_9db0ba711f6a3e5a_23 && (found22zgensym_9db0ba711f6a3e5a_23[nextMiss22zgensym_9db0ba711f6a3e5a_23] || unmarshalMsgFieldSkip22zgensym_9db0ba711f6a3e5a_23[nextMiss22zgensym_9db0ba711f6a3e5a_23]) {
				nextMiss22zgensym_9db0ba711f6a3e5a_23++
			}
			if nextMiss22zgensym_9db0ba711f6a3e5a_23 == maxFields22zgensym_9db0ba711f6a3e5a_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_9db0ba711f6a3e5a_23
			}
			missingFieldsLeft22zgensym_9db0ba711f6a3e5a_23--
			curField22zgensym_9db0ba711f6a3e5a_23 = unmarshalMsgFieldOrder22zgensym_9db0ba711f6a3e5a_23[nextMiss22zgensym_9db0ba711f6a3e5a_23]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField22zgensym_9db0ba711f6a3e5a_23)
		switch curField22zgensym_9db0ba711f6a3e5a_23 {
		// -- templateUnmarshalMsg ends here --

		case "Chunks_zid00_slc":
			found22zgensym_9db0ba711f6a3e5a_23[0] = true
			if nbs.AlwaysNil {
				(z.Chunks) = (z.Chunks)[:0]
			} else {

				var zgensym_9db0ba711f6a3e5a_24 uint32
				zgensym_9db0ba711f6a3e5a_24, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chunks) >= int(zgensym_9db0ba711f6a3e5a_24) {
					z.Chunks = (z.Chunks)[:zgensym_9db0ba711f6a3e5a_24]
				} else {
					z.Chunks = make([]*Chunk, zgensym_9db0ba711f6a3e5a_24)
				}
				for zgensym_9db0ba711f6a3e5a_16 := range z.Chunks {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Chunks[zgensym_9db0ba711f6a3e5a_16] != nil {
							z.Chunks[zgensym_9db0ba711f6a3e5a_16].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Chunks[zgensym_9db0ba711f6a3e5a_16] {
								z.Chunks[zgensym_9db0ba711f6a3e5a_16].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Chunks[zgensym_9db0ba711f6a3e5a_16] == nil {
								z.Chunks[zgensym_9db0ba711f6a3e5a_16] = new(Chunk)
							}

							bts, err = z.Chunks[zgensym_9db0ba711f6a3e5a_16].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Path_zid01_str":
			found22zgensym_9db0ba711f6a3e5a_23[1] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FileSize_zid02_i64":
			found22zgensym_9db0ba711f6a3e5a_23[2] = true
			z.FileSize, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FileCry_zid03_str":
			found22zgensym_9db0ba711f6a3e5a_23[3] = true
			z.FileCry, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PreAllocUnwritBeg_zid04_i64":
			found22zgensym_9db0ba711f6a3e5a_23[4] = true
			z.PreAllocUnwritBeg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PreAllocUnwritEndx_zid05_i64":
			found22zgensym_9db0ba711f6a3e5a_23[5] = true
			z.PreAllocUnwritEndx, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PreAllocLargestSpan_zid06_i64":
			found22zgensym_9db0ba711f6a3e5a_23[6] = true
			z.PreAllocLargestSpan, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PreAllocBeforeLast_zid07_boo":
			found22zgensym_9db0ba711f6a3e5a_23[7] = true
			z.PreAllocBeforeLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_9db0ba711f6a3e5a_23 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Chunks
var unmarshalMsgFieldOrder22zgensym_9db0ba711f6a3e5a_23 = []string{"Chunks_zid00_slc", "Path_zid01_str", "FileSize_zid02_i64", "FileCry_zid03_str", "PreAllocUnwritBeg_zid04_i64", "PreAllocUnwritEndx_zid05_i64", "PreAllocLargestSpan_zid06_i64", "PreAllocBeforeLast_zid07_boo"}

var unmarshalMsgFieldSkip22zgensym_9db0ba711f6a3e5a_23 = []bool{false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Chunks) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize
	for zgensym_9db0ba711f6a3e5a_16 := range z.Chunks {
		if z.Chunks[zgensym_9db0ba711f6a3e5a_16] == nil {
			s += msgp.NilSize
		} else {
			s += z.Chunks[zgensym_9db0ba711f6a3e5a_16].Msgsize()
		}
	}
	s += 15 + msgp.StringPrefixSize + len(z.Path) + 19 + msgp.Int64Size + 18 + msgp.StringPrefixSize + len(z.FileCry) + 28 + msgp.Int64Size + 29 + msgp.Int64Size + 30 + msgp.Int64Size + 29 + msgp.BoolSize
	return
}
func (z *Chunks) Gstring() (r string) {
	r = "&Chunks{\n"
	r += fmt.Sprintf("             Chunks: %v,\n", z.Chunks)
	r += fmt.Sprintf("               Path: \"%v\",\n", z.Path)
	r += fmt.Sprintf("           FileSize: %v,\n", z.FileSize)
	r += fmt.Sprintf("            FileCry: \"%v\",\n", z.FileCry)
	r += fmt.Sprintf("  PreAllocUnwritBeg: %v,\n", z.PreAllocUnwritBeg)
	r += fmt.Sprintf(" PreAllocUnwritEndx: %v,\n", z.PreAllocUnwritEndx)
	r += fmt.Sprintf("PreAllocLargestSpan: %v,\n", z.PreAllocLargestSpan)
	r += fmt.Sprintf(" PreAllocBeforeLast: %v,\n", z.PreAllocBeforeLast)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *FilePrecis) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields25zgensym_9db0ba711f6a3e5a_26 = 20

	// -- templateDecodeMsg starts here--
	var totalEncodedFields25zgensym_9db0ba711f6a3e5a_26 uint32
	totalEncodedFields25zgensym_9db0ba711f6a3e5a_26, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft25zgensym_9db0ba711f6a3e5a_26 := totalEncodedFields25zgensym_9db0ba711f6a3e5a_26
	missingFieldsLeft25zgensym_9db0ba711f6a3e5a_26 := maxFields25zgensym_9db0ba711f6a3e5a_26 - totalEncodedFields25zgensym_9db0ba711f6a3e5a_26

	var nextMiss25zgensym_9db0ba711f6a3e5a_26 int32 = -1
	var found25zgensym_9db0ba711f6a3e5a_26 [maxFields25zgensym_9db0ba711f6a3e5a_26]bool
	var curField25zgensym_9db0ba711f6a3e5a_26 string

doneWithStruct25zgensym_9db0ba711f6a3e5a_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_9db0ba711f6a3e5a_26 > 0 || missingFieldsLeft25zgensym_9db0ba711f6a3e5a_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_9db0ba711f6a3e5a_26, missingFieldsLeft25zgensym_9db0ba711f6a3e5a_26, msgp.ShowFound(found25zgensym_9db0ba711f6a3e5a_26[:]), decodeMsgFieldOrder25zgensym_9db0ba711f6a3e5a_26)
		if encodedFieldsLeft25zgensym_9db0ba711f6a3e5a_26 > 0 {
			encodedFieldsLeft25zgensym_9db0ba711f6a3e5a_26--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField25zgensym_9db0ba711f6a3e5a_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_9db0ba711f6a3e5a_26 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss25zgensym_9db0ba711f6a3e5a_26 = 0
			}
			for nextMiss25zgensym_9db0ba711f6a3e5a_26 < maxFields25zgensym_9db0ba711f6a3e5a_26 && (found25zgensym_9db0ba711f6a3e5a_26[nextMiss25zgensym_9db0ba711f6a3e5a_26] || decodeMsgFieldSkip25zgensym_9db0ba711f6a3e5a_26[nextMiss25zgensym_9db0ba711f6a3e5a_26]) {
				nextMiss25zgensym_9db0ba711f6a3e5a_26++
			}
			if nextMiss25zgensym_9db0ba711f6a3e5a_26 == maxFields25zgensym_9db0ba711f6a3e5a_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_9db0ba711f6a3e5a_26
			}
			missingFieldsLeft25zgensym_9db0ba711f6a3e5a_26--
			curField25zgensym_9db0ba711f6a3e5a_26 = decodeMsgFieldOrder25zgensym_9db0ba711f6a3e5a_26[nextMiss25zgensym_9db0ba711f6a3e5a_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_9db0ba711f6a3e5a_26)
		switch curField25zgensym_9db0ba711f6a3e5a_26 {
		// -- templateDecodeMsg ends here --

		case "CallID_zid00_str":
			found25zgensym_9db0ba711f6a3e5a_26[0] = true
			z.CallID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsFromSender_zid01_boo":
			found25zgensym_9db0ba711f6a3e5a_26[1] = true
			z.IsFromSender, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Created_zid02_tim":
			found25zgensym_9db0ba711f6a3e5a_26[2] = true
			z.Created, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Host_zid03_str":
			found25zgensym_9db0ba711f6a3e5a_26[3] = true
			z.Host, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Path_zid04_str":
			found25zgensym_9db0ba711f6a3e5a_26[4] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ModTime_zid05_tim":
			found25zgensym_9db0ba711f6a3e5a_26[5] = true
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "FileSize_zid06_i64":
			found25zgensym_9db0ba711f6a3e5a_26[6] = true
			z.FileSize, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FileMode_zid07_u32":
			found25zgensym_9db0ba711f6a3e5a_26[7] = true
			z.FileMode, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "FileOwner_zid08_str":
			found25zgensym_9db0ba711f6a3e5a_26[8] = true
			z.FileOwner, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FileOwnerID_zid09_u32":
			found25zgensym_9db0ba711f6a3e5a_26[9] = true
			z.FileOwnerID, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "FileGroup_zid10_str":
			found25zgensym_9db0ba711f6a3e5a_26[10] = true
			z.FileGroup, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FileGroupID_zid11_u32":
			found25zgensym_9db0ba711f6a3e5a_26[11] = true
			z.FileGroupID, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "FileMeta_zid12_bin":
			found25zgensym_9db0ba711f6a3e5a_26[12] = true
			z.FileMeta, err = dc.ReadBytes(z.FileMeta)
			if err != nil {
				return
			}
		case "HashName_zid13_str":
			found25zgensym_9db0ba711f6a3e5a_26[13] = true
			z.HashName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FileCry_zid14_str":
			found25zgensym_9db0ba711f6a3e5a_26[14] = true
			z.FileCry, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsSparse_zid15_boo":
			found25zgensym_9db0ba711f6a3e5a_26[15] = true
			z.IsSparse, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "PreAllocUnwritBeg_zid16_i64":
			found25zgensym_9db0ba711f6a3e5a_26[16] = true
			z.PreAllocUnwritBeg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PreAllocUnwritEndx_zid17_i64":
			found25zgensym_9db0ba711f6a3e5a_26[17] = true
			z.PreAllocUnwritEndx, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ChunkerName_zid18_str":
			found25zgensym_9db0ba711f6a3e5a_26[18] = true
			z.ChunkerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CDC_Config_zid19_ptr":
			found25zgensym_9db0ba711f6a3e5a_26[19] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.CDC_Config != nil {
					dc.PushAlwaysNil()
					err = z.CDC_Config.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.CDC_Config == nil {
					z.CDC_Config = new(jcdc.CDC_Config)
				}
				dc.DedupIndexEachPtr(z.CDC_Config)

				err = z.CDC_Config.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_9db0ba711f6a3e5a_26 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of FilePrecis
var decodeMsgFieldOrder25zgensym_9db0ba711f6a3e5a_26 = []string{"CallID_zid00_str", "IsFromSender_zid01_boo", "Created_zid02_tim", "Host_zid03_str", "Path_zid04_str", "ModTime_zid05_tim", "FileSize_zid06_i64", "FileMode_zid07_u32", "FileOwner_zid08_str", "FileOwnerID_zid09_u32", "FileGroup_zid10_str", "FileGroupID_zid11_u32", "FileMeta_zid12_bin", "HashName_zid13_str", "FileCry_zid14_str", "IsSparse_zid15_boo", "PreAllocUnwritBeg_zid16_i64", "PreAllocUnwritEndx_zid17_i64", "ChunkerName_zid18_str", "CDC_Config_zid19_ptr"}

var decodeMsgFieldSkip25zgensym_9db0ba711f6a3e5a_26 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *FilePrecis) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 20
	}
	var fieldsInUse uint32 = 20
	isempty[0] = (len(z.CallID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsFromSender) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Created.IsZero()) // time.Time, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Host) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Path) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.ModTime.IsZero()) // time.Time, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FileSize == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.FileMode == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.FileOwner) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.FileOwnerID == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.FileGroup) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.FileGroupID == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (len(z.FileMeta) == 0) // string, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (len(z.HashName) == 0) // string, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (len(z.FileCry) == 0) // string, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (!z.IsSparse) // bool, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.PreAllocUnwritBeg == 0) // number, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (z.PreAllocUnwritEndx == 0) // number, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (len(z.ChunkerName) == 0) // string, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (z.CDC_Config == nil) // pointer, omitempty
	if isempty[19] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *FilePrecis) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_27 [20]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_28 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_27[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_28 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'FilePrecis'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[0] {
		// write "CallID_zid00_str"
		err = en.Append(0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CallID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[1] {
		// write "IsFromSender_zid01_boo"
		err = en.Append(0xb6, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsFromSender)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[2] {
		// write "Created_zid02_tim"
		err = en.Append(0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Created)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[3] {
		// write "Host_zid03_str"
		err = en.Append(0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Host)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[4] {
		// write "Path_zid04_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[5] {
		// write "ModTime_zid05_tim"
		err = en.Append(0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[6] {
		// write "FileSize_zid06_i64"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FileSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[7] {
		// write "FileMode_zid07_u32"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileMode)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[8] {
		// write "FileOwner_zid08_str"
		err = en.Append(0xb3, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FileOwner)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[9] {
		// write "FileOwnerID_zid09_u32"
		err = en.Append(0xb5, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileOwnerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[10] {
		// write "FileGroup_zid10_str"
		err = en.Append(0xb3, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FileGroup)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[11] {
		// write "FileGroupID_zid11_u32"
		err = en.Append(0xb5, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileGroupID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[12] {
		// write "FileMeta_zid12_bin"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.FileMeta)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[13] {
		// write "HashName_zid13_str"
		err = en.Append(0xb2, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.HashName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[14] {
		// write "FileCry_zid14_str"
		err = en.Append(0xb1, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FileCry)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[15] {
		// write "IsSparse_zid15_boo"
		err = en.Append(0xb2, 0x49, 0x73, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsSparse)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[16] {
		// write "PreAllocUnwritBeg_zid16_i64"
		err = en.Append(0xbb, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PreAllocUnwritBeg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[17] {
		// write "PreAllocUnwritEndx_zid17_i64"
		err = en.Append(0xbc, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PreAllocUnwritEndx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[18] {
		// write "ChunkerName_zid18_str"
		err = en.Append(0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ChunkerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_27[19] {
		// write "CDC_Config_zid19_ptr"
		err = en.Append(0xb4, 0x43, 0x44, 0x43, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.CDC_Config == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.CDC_Config.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FilePrecis) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [20]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "CallID_zid00_str"
		o = append(o, 0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CallID)
	}

	if !empty[1] {
		// string "IsFromSender_zid01_boo"
		o = append(o, 0xb6, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsFromSender)
	}

	if !empty[2] {
		// string "Created_zid02_tim"
		o = append(o, 0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Created)
	}

	if !empty[3] {
		// string "Host_zid03_str"
		o = append(o, 0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Host)
	}

	if !empty[4] {
		// string "Path_zid04_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[5] {
		// string "ModTime_zid05_tim"
		o = append(o, 0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ModTime)
	}

	if !empty[6] {
		// string "FileSize_zid06_i64"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FileSize)
	}

	if !empty[7] {
		// string "FileMode_zid07_u32"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileMode)
	}

	if !empty[8] {
		// string "FileOwner_zid08_str"
		o = append(o, 0xb3, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FileOwner)
	}

	if !empty[9] {
		// string "FileOwnerID_zid09_u32"
		o = append(o, 0xb5, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileOwnerID)
	}

	if !empty[10] {
		// string "FileGroup_zid10_str"
		o = append(o, 0xb3, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FileGroup)
	}

	if !empty[11] {
		// string "FileGroupID_zid11_u32"
		o = append(o, 0xb5, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileGroupID)
	}

	if !empty[12] {
		// string "FileMeta_zid12_bin"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.FileMeta)
	}

	if !empty[13] {
		// string "HashName_zid13_str"
		o = append(o, 0xb2, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.HashName)
	}

	if !empty[14] {
		// string "FileCry_zid14_str"
		o = append(o, 0xb1, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FileCry)
	}

	if !empty[15] {
		// string "IsSparse_zid15_boo"
		o = append(o, 0xb2, 0x49, 0x73, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsSparse)
	}

	if !empty[16] {
		// string "PreAllocUnwritBeg_zid16_i64"
		o = append(o, 0xbb, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PreAllocUnwritBeg)
	}

	if !empty[17] {
		// string "PreAllocUnwritEndx_zid17_i64"
		o = append(o, 0xbc, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PreAllocUnwritEndx)
	}

	if !empty[18] {
		// string "ChunkerName_zid18_str"
		o = append(o, 0xb5, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ChunkerName)
	}

	if !empty[19] {
		// string "CDC_Config_zid19_ptr"
		o = append(o, 0xb4, 0x43, 0x44, 0x43, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.CDC_Config == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.CDC_Config.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FilePrecis) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *FilePrecis) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields29zgensym_9db0ba711f6a3e5a_30 = 20

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields29zgensym_9db0ba711f6a3e5a_30 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields29zgensym_9db0ba711f6a3e5a_30, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft29zgensym_9db0ba711f6a3e5a_30 := totalEncodedFields29zgensym_9db0ba711f6a3e5a_30
	missingFieldsLeft29zgensym_9db0ba711f6a3e5a_30 := maxFields29zgensym_9db0ba711f6a3e5a_30 - totalEncodedFields29zgensym_9db0ba711f6a3e5a_30

	var nextMiss29zgensym_9db0ba711f6a3e5a_30 int32 = -1
	var found29zgensym_9db0ba711f6a3e5a_30 [maxFields29zgensym_9db0ba711f6a3e5a_30]bool
	var curField29zgensym_9db0ba711f6a3e5a_30 string

doneWithStruct29zgensym_9db0ba711f6a3e5a_30:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft29zgensym_9db0ba711f6a3e5a_30 > 0 || missingFieldsLeft29zgensym_9db0ba711f6a3e5a_30 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft29zgensym_9db0ba711f6a3e5a_30, missingFieldsLeft29zgensym_9db0ba711f6a3e5a_30, msgp.ShowFound(found29zgensym_9db0ba711f6a3e5a_30[:]), unmarshalMsgFieldOrder29zgensym_9db0ba711f6a3e5a_30)
		if encodedFieldsLeft29zgensym_9db0ba711f6a3e5a_30 > 0 {
			encodedFieldsLeft29zgensym_9db0ba711f6a3e5a_30--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField29zgensym_9db0ba711f6a3e5a_30 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss29zgensym_9db0ba711f6a3e5a_30 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss29zgensym_9db0ba711f6a3e5a_30 = 0
			}
			for nextMiss29zgensym_9db0ba711f6a3e5a_30 < maxFields29zgensym_9db0ba711f6a3e5a_30 && (found29zgensym_9db0ba711f6a3e5a_30[nextMiss29zgensym_9db0ba711f6a3e5a_30] || unmarshalMsgFieldSkip29zgensym_9db0ba711f6a3e5a_30[nextMiss29zgensym_9db0ba711f6a3e5a_30]) {
				nextMiss29zgensym_9db0ba711f6a3e5a_30++
			}
			if nextMiss29zgensym_9db0ba711f6a3e5a_30 == maxFields29zgensym_9db0ba711f6a3e5a_30 {
				// filled all the empty fields!
				break doneWithStruct29zgensym_9db0ba711f6a3e5a_30
			}
			missingFieldsLeft29zgensym_9db0ba711f6a3e5a_30--
			curField29zgensym_9db0ba711f6a3e5a_30 = unmarshalMsgFieldOrder29zgensym_9db0ba711f6a3e5a_30[nextMiss29zgensym_9db0ba711f6a3e5a_30]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField29zgensym_9db0ba711f6a3e5a_30)
		switch curField29zgensym_9db0ba711f6a3e5a_30 {
		// -- templateUnmarshalMsg ends here --

		case "CallID_zid00_str":
			found29zgensym_9db0ba711f6a3e5a_30[0] = true
			z.CallID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsFromSender_zid01_boo":
			found29zgensym_9db0ba711f6a3e5a_30[1] = true
			z.IsFromSender, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Created_zid02_tim":
			found29zgensym_9db0ba711f6a3e5a_30[2] = true
			z.Created, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Host_zid03_str":
			found29zgensym_9db0ba711f6a3e5a_30[3] = true
			z.Host, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Path_zid04_str":
			found29zgensym_9db0ba711f6a3e5a_30[4] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ModTime_zid05_tim":
			found29zgensym_9db0ba711f6a3e5a_30[5] = true
			z.ModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "FileSize_zid06_i64":
			found29zgensym_9db0ba711f6a3e5a_30[6] = true
			z.FileSize, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FileMode_zid07_u32":
			found29zgensym_9db0ba711f6a3e5a_30[7] = true
			z.FileMode, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "FileOwner_zid08_str":
			found29zgensym_9db0ba711f6a3e5a_30[8] = true
			z.FileOwner, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FileOwnerID_zid09_u32":
			found29zgensym_9db0ba711f6a3e5a_30[9] = true
			z.FileOwnerID, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "FileGroup_zid10_str":
			found29zgensym_9db0ba711f6a3e5a_30[10] = true
			z.FileGroup, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FileGroupID_zid11_u32":
			found29zgensym_9db0ba711f6a3e5a_30[11] = true
			z.FileGroupID, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "FileMeta_zid12_bin":
			found29zgensym_9db0ba711f6a3e5a_30[12] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.FileMeta = z.FileMeta[:0]
			} else {
				z.FileMeta, bts, err = nbs.ReadBytesBytes(bts, z.FileMeta)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "HashName_zid13_str":
			found29zgensym_9db0ba711f6a3e5a_30[13] = true
			z.HashName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FileCry_zid14_str":
			found29zgensym_9db0ba711f6a3e5a_30[14] = true
			z.FileCry, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsSparse_zid15_boo":
			found29zgensym_9db0ba711f6a3e5a_30[15] = true
			z.IsSparse, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "PreAllocUnwritBeg_zid16_i64":
			found29zgensym_9db0ba711f6a3e5a_30[16] = true
			z.PreAllocUnwritBeg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PreAllocUnwritEndx_zid17_i64":
			found29zgensym_9db0ba711f6a3e5a_30[17] = true
			z.PreAllocUnwritEndx, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ChunkerName_zid18_str":
			found29zgensym_9db0ba711f6a3e5a_30[18] = true
			z.ChunkerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CDC_Config_zid19_ptr":
			found29zgensym_9db0ba711f6a3e5a_30[19] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.CDC_Config != nil {
					z.CDC_Config.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.CDC_Config {
						z.CDC_Config.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.CDC_Config == nil {
						z.CDC_Config = new(jcdc.CDC_Config)
					}

					bts, err = z.CDC_Config.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss29zgensym_9db0ba711f6a3e5a_30 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of FilePrecis
var unmarshalMsgFieldOrder29zgensym_9db0ba711f6a3e5a_30 = []string{"CallID_zid00_str", "IsFromSender_zid01_boo", "Created_zid02_tim", "Host_zid03_str", "Path_zid04_str", "ModTime_zid05_tim", "FileSize_zid06_i64", "FileMode_zid07_u32", "FileOwner_zid08_str", "FileOwnerID_zid09_u32", "FileGroup_zid10_str", "FileGroupID_zid11_u32", "FileMeta_zid12_bin", "HashName_zid13_str", "FileCry_zid14_str", "IsSparse_zid15_boo", "PreAllocUnwritBeg_zid16_i64", "PreAllocUnwritEndx_zid17_i64", "ChunkerName_zid18_str", "CDC_Config_zid19_ptr"}

var unmarshalMsgFieldSkip29zgensym_9db0ba711f6a3e5a_30 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FilePrecis) Msgsize() (s int) {
	s = 3 + 17 + msgp.StringPrefixSize + len(z.CallID) + 23 + msgp.BoolSize + 18 + msgp.TimeSize + 15 + msgp.StringPrefixSize + len(z.Host) + 15 + msgp.StringPrefixSize + len(z.Path) + 18 + msgp.TimeSize + 19 + msgp.Int64Size + 19 + msgp.Uint32Size + 20 + msgp.StringPrefixSize + len(z.FileOwner) + 22 + msgp.Uint32Size + 20 + msgp.StringPrefixSize + len(z.FileGroup) + 22 + msgp.Uint32Size + 19 + msgp.BytesPrefixSize + len(z.FileMeta) + 19 + msgp.StringPrefixSize + len(z.HashName) + 18 + msgp.StringPrefixSize + len(z.FileCry) + 19 + msgp.BoolSize + 28 + msgp.Int64Size + 29 + msgp.Int64Size + 22 + msgp.StringPrefixSize + len(z.ChunkerName) + 21
	if z.CDC_Config == nil {
		s += msgp.NilSize
	} else {
		s += z.CDC_Config.Msgsize()
	}
	return
}
func (z *FilePrecis) Gstring() (r string) {
	r = "&FilePrecis{\n"
	r += fmt.Sprintf("            CallID: \"%v\",\n", z.CallID)
	r += fmt.Sprintf("      IsFromSender: %v,\n", z.IsFromSender)
	r += fmt.Sprintf("           Created: %v,\n", z.Created)
	r += fmt.Sprintf("              Host: \"%v\",\n", z.Host)
	r += fmt.Sprintf("              Path: \"%v\",\n", z.Path)
	r += fmt.Sprintf("           ModTime: %v,\n", z.ModTime)
	r += fmt.Sprintf("          FileSize: %v,\n", z.FileSize)
	r += fmt.Sprintf("          FileMode: %v,\n", z.FileMode)
	r += fmt.Sprintf("         FileOwner: \"%v\",\n", z.FileOwner)
	r += fmt.Sprintf("       FileOwnerID: %v,\n", z.FileOwnerID)
	r += fmt.Sprintf("         FileGroup: \"%v\",\n", z.FileGroup)
	r += fmt.Sprintf("       FileGroupID: %v,\n", z.FileGroupID)
	r += fmt.Sprintf("          FileMeta: %v,\n", z.FileMeta)
	r += fmt.Sprintf("          HashName: \"%v\",\n", z.HashName)
	r += fmt.Sprintf("           FileCry: \"%v\",\n", z.FileCry)
	r += fmt.Sprintf("          IsSparse: %v,\n", z.IsSparse)
	r += fmt.Sprintf(" PreAllocUnwritBeg: %v,\n", z.PreAllocUnwritBeg)
	r += fmt.Sprintf("PreAllocUnwritEndx: %v,\n", z.PreAllocUnwritEndx)
	r += fmt.Sprintf("       ChunkerName: \"%v\",\n", z.ChunkerName)
	r += fmt.Sprintf("        CDC_Config: %v,\n", z.CDC_Config)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HeavyPlan) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields31zgensym_9db0ba711f6a3e5a_32 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields31zgensym_9db0ba711f6a3e5a_32 uint32
	totalEncodedFields31zgensym_9db0ba711f6a3e5a_32, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft31zgensym_9db0ba711f6a3e5a_32 := totalEncodedFields31zgensym_9db0ba711f6a3e5a_32
	missingFieldsLeft31zgensym_9db0ba711f6a3e5a_32 := maxFields31zgensym_9db0ba711f6a3e5a_32 - totalEncodedFields31zgensym_9db0ba711f6a3e5a_32

	var nextMiss31zgensym_9db0ba711f6a3e5a_32 int32 = -1
	var found31zgensym_9db0ba711f6a3e5a_32 [maxFields31zgensym_9db0ba711f6a3e5a_32]bool
	var curField31zgensym_9db0ba711f6a3e5a_32 string

doneWithStruct31zgensym_9db0ba711f6a3e5a_32:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft31zgensym_9db0ba711f6a3e5a_32 > 0 || missingFieldsLeft31zgensym_9db0ba711f6a3e5a_32 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft31zgensym_9db0ba711f6a3e5a_32, missingFieldsLeft31zgensym_9db0ba711f6a3e5a_32, msgp.ShowFound(found31zgensym_9db0ba711f6a3e5a_32[:]), decodeMsgFieldOrder31zgensym_9db0ba711f6a3e5a_32)
		if encodedFieldsLeft31zgensym_9db0ba711f6a3e5a_32 > 0 {
			encodedFieldsLeft31zgensym_9db0ba711f6a3e5a_32--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField31zgensym_9db0ba711f6a3e5a_32 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss31zgensym_9db0ba711f6a3e5a_32 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss31zgensym_9db0ba711f6a3e5a_32 = 0
			}
			for nextMiss31zgensym_9db0ba711f6a3e5a_32 < maxFields31zgensym_9db0ba711f6a3e5a_32 && (found31zgensym_9db0ba711f6a3e5a_32[nextMiss31zgensym_9db0ba711f6a3e5a_32] || decodeMsgFieldSkip31zgensym_9db0ba711f6a3e5a_32[nextMiss31zgensym_9db0ba711f6a3e5a_32]) {
				nextMiss31zgensym_9db0ba711f6a3e5a_32++
			}
			if nextMiss31zgensym_9db0ba711f6a3e5a_32 == maxFields31zgensym_9db0ba711f6a3e5a_32 {
				// filled all the empty fields!
				break doneWithStruct31zgensym_9db0ba711f6a3e5a_32
			}
			missingFieldsLeft31zgensym_9db0ba711f6a3e5a_32--
			curField31zgensym_9db0ba711f6a3e5a_32 = decodeMsgFieldOrder31zgensym_9db0ba711f6a3e5a_32[nextMiss31zgensym_9db0ba711f6a3e5a_32]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField31zgensym_9db0ba711f6a3e5a_32)
		switch curField31zgensym_9db0ba711f6a3e5a_32 {
		// -- templateDecodeMsg ends here --

		case "SenderPath_zid00_str":
			found31zgensym_9db0ba711f6a3e5a_32[0] = true
			z.SenderPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SenderPrecis_zid01_ptr":
			found31zgensym_9db0ba711f6a3e5a_32[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SenderPrecis != nil {
					dc.PushAlwaysNil()
					err = z.SenderPrecis.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SenderPrecis == nil {
					z.SenderPrecis = new(FilePrecis)
				}
				dc.DedupIndexEachPtr(z.SenderPrecis)

				err = z.SenderPrecis.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "SenderPlan_zid02_ptr":
			found31zgensym_9db0ba711f6a3e5a_32[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SenderPlan != nil {
					dc.PushAlwaysNil()
					err = z.SenderPlan.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SenderPlan == nil {
					z.SenderPlan = new(Chunks)
				}
				dc.DedupIndexEachPtr(z.SenderPlan)

				err = z.SenderPlan.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss31zgensym_9db0ba711f6a3e5a_32 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HeavyPlan
var decodeMsgFieldOrder31zgensym_9db0ba711f6a3e5a_32 = []string{"SenderPath_zid00_str", "SenderPrecis_zid01_ptr", "SenderPlan_zid02_ptr"}

var decodeMsgFieldSkip31zgensym_9db0ba711f6a3e5a_32 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HeavyPlan) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.SenderPath) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.SenderPrecis == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.SenderPlan == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HeavyPlan) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_33 [3]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_34 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_33[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_34 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HeavyPlan'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x65, 0x61, 0x76, 0x79, 0x50, 0x6c, 0x61, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_33[0] {
		// write "SenderPath_zid00_str"
		err = en.Append(0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SenderPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_33[1] {
		// write "SenderPrecis_zid01_ptr"
		err = en.Append(0xb6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SenderPrecis == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.SenderPrecis.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_33[2] {
		// write "SenderPlan_zid02_ptr"
		err = en.Append(0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SenderPlan == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.SenderPlan.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HeavyPlan) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SenderPath_zid00_str"
		o = append(o, 0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SenderPath)
	}

	if !empty[1] {
		// string "SenderPrecis_zid01_ptr"
		o = append(o, 0xb6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SenderPrecis == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SenderPrecis.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "SenderPlan_zid02_ptr"
		o = append(o, 0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SenderPlan == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SenderPlan.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeavyPlan) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HeavyPlan) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields35zgensym_9db0ba711f6a3e5a_36 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields35zgensym_9db0ba711f6a3e5a_36 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields35zgensym_9db0ba711f6a3e5a_36, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft35zgensym_9db0ba711f6a3e5a_36 := totalEncodedFields35zgensym_9db0ba711f6a3e5a_36
	missingFieldsLeft35zgensym_9db0ba711f6a3e5a_36 := maxFields35zgensym_9db0ba711f6a3e5a_36 - totalEncodedFields35zgensym_9db0ba711f6a3e5a_36

	var nextMiss35zgensym_9db0ba711f6a3e5a_36 int32 = -1
	var found35zgensym_9db0ba711f6a3e5a_36 [maxFields35zgensym_9db0ba711f6a3e5a_36]bool
	var curField35zgensym_9db0ba711f6a3e5a_36 string

doneWithStruct35zgensym_9db0ba711f6a3e5a_36:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft35zgensym_9db0ba711f6a3e5a_36 > 0 || missingFieldsLeft35zgensym_9db0ba711f6a3e5a_36 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft35zgensym_9db0ba711f6a3e5a_36, missingFieldsLeft35zgensym_9db0ba711f6a3e5a_36, msgp.ShowFound(found35zgensym_9db0ba711f6a3e5a_36[:]), unmarshalMsgFieldOrder35zgensym_9db0ba711f6a3e5a_36)
		if encodedFieldsLeft35zgensym_9db0ba711f6a3e5a_36 > 0 {
			encodedFieldsLeft35zgensym_9db0ba711f6a3e5a_36--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField35zgensym_9db0ba711f6a3e5a_36 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss35zgensym_9db0ba711f6a3e5a_36 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss35zgensym_9db0ba711f6a3e5a_36 = 0
			}
			for nextMiss35zgensym_9db0ba711f6a3e5a_36 < maxFields35zgensym_9db0ba711f6a3e5a_36 && (found35zgensym_9db0ba711f6a3e5a_36[nextMiss35zgensym_9db0ba711f6a3e5a_36] || unmarshalMsgFieldSkip35zgensym_9db0ba711f6a3e5a_36[nextMiss35zgensym_9db0ba711f6a3e5a_36]) {
				nextMiss35zgensym_9db0ba711f6a3e5a_36++
			}
			if nextMiss35zgensym_9db0ba711f6a3e5a_36 == maxFields35zgensym_9db0ba711f6a3e5a_36 {
				// filled all the empty fields!
				break doneWithStruct35zgensym_9db0ba711f6a3e5a_36
			}
			missingFieldsLeft35zgensym_9db0ba711f6a3e5a_36--
			curField35zgensym_9db0ba711f6a3e5a_36 = unmarshalMsgFieldOrder35zgensym_9db0ba711f6a3e5a_36[nextMiss35zgensym_9db0ba711f6a3e5a_36]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField35zgensym_9db0ba711f6a3e5a_36)
		switch curField35zgensym_9db0ba711f6a3e5a_36 {
		// -- templateUnmarshalMsg ends here --

		case "SenderPath_zid00_str":
			found35zgensym_9db0ba711f6a3e5a_36[0] = true
			z.SenderPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SenderPrecis_zid01_ptr":
			found35zgensym_9db0ba711f6a3e5a_36[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SenderPrecis != nil {
					z.SenderPrecis.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SenderPrecis {
						z.SenderPrecis.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SenderPrecis == nil {
						z.SenderPrecis = new(FilePrecis)
					}

					bts, err = z.SenderPrecis.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "SenderPlan_zid02_ptr":
			found35zgensym_9db0ba711f6a3e5a_36[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SenderPlan != nil {
					z.SenderPlan.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SenderPlan {
						z.SenderPlan.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SenderPlan == nil {
						z.SenderPlan = new(Chunks)
					}

					bts, err = z.SenderPlan.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss35zgensym_9db0ba711f6a3e5a_36 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HeavyPlan
var unmarshalMsgFieldOrder35zgensym_9db0ba711f6a3e5a_36 = []string{"SenderPath_zid00_str", "SenderPrecis_zid01_ptr", "SenderPlan_zid02_ptr"}

var unmarshalMsgFieldSkip35zgensym_9db0ba711f6a3e5a_36 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HeavyPlan) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.SenderPath) + 23
	if z.SenderPrecis == nil {
		s += msgp.NilSize
	} else {
		s += z.SenderPrecis.Msgsize()
	}
	s += 21
	if z.SenderPlan == nil {
		s += msgp.NilSize
	} else {
		s += z.SenderPlan.Msgsize()
	}
	return
}
func (z *HeavyPlan) Gstring() (r string) {
	r = "&HeavyPlan{\n"
	r += fmt.Sprintf("  SenderPath: \"%v\",\n", z.SenderPath)
	r += fmt.Sprintf("SenderPrecis: %v,\n", z.SenderPrecis)
	r += fmt.Sprintf("  SenderPlan: %v,\n", z.SenderPlan)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *LightRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields37zgensym_9db0ba711f6a3e5a_38 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields37zgensym_9db0ba711f6a3e5a_38 uint32
	totalEncodedFields37zgensym_9db0ba711f6a3e5a_38, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft37zgensym_9db0ba711f6a3e5a_38 := totalEncodedFields37zgensym_9db0ba711f6a3e5a_38
	missingFieldsLeft37zgensym_9db0ba711f6a3e5a_38 := maxFields37zgensym_9db0ba711f6a3e5a_38 - totalEncodedFields37zgensym_9db0ba711f6a3e5a_38

	var nextMiss37zgensym_9db0ba711f6a3e5a_38 int32 = -1
	var found37zgensym_9db0ba711f6a3e5a_38 [maxFields37zgensym_9db0ba711f6a3e5a_38]bool
	var curField37zgensym_9db0ba711f6a3e5a_38 string

doneWithStruct37zgensym_9db0ba711f6a3e5a_38:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft37zgensym_9db0ba711f6a3e5a_38 > 0 || missingFieldsLeft37zgensym_9db0ba711f6a3e5a_38 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft37zgensym_9db0ba711f6a3e5a_38, missingFieldsLeft37zgensym_9db0ba711f6a3e5a_38, msgp.ShowFound(found37zgensym_9db0ba711f6a3e5a_38[:]), decodeMsgFieldOrder37zgensym_9db0ba711f6a3e5a_38)
		if encodedFieldsLeft37zgensym_9db0ba711f6a3e5a_38 > 0 {
			encodedFieldsLeft37zgensym_9db0ba711f6a3e5a_38--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField37zgensym_9db0ba711f6a3e5a_38 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss37zgensym_9db0ba711f6a3e5a_38 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss37zgensym_9db0ba711f6a3e5a_38 = 0
			}
			for nextMiss37zgensym_9db0ba711f6a3e5a_38 < maxFields37zgensym_9db0ba711f6a3e5a_38 && (found37zgensym_9db0ba711f6a3e5a_38[nextMiss37zgensym_9db0ba711f6a3e5a_38] || decodeMsgFieldSkip37zgensym_9db0ba711f6a3e5a_38[nextMiss37zgensym_9db0ba711f6a3e5a_38]) {
				nextMiss37zgensym_9db0ba711f6a3e5a_38++
			}
			if nextMiss37zgensym_9db0ba711f6a3e5a_38 == maxFields37zgensym_9db0ba711f6a3e5a_38 {
				// filled all the empty fields!
				break doneWithStruct37zgensym_9db0ba711f6a3e5a_38
			}
			missingFieldsLeft37zgensym_9db0ba711f6a3e5a_38--
			curField37zgensym_9db0ba711f6a3e5a_38 = decodeMsgFieldOrder37zgensym_9db0ba711f6a3e5a_38[nextMiss37zgensym_9db0ba711f6a3e5a_38]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField37zgensym_9db0ba711f6a3e5a_38)
		switch curField37zgensym_9db0ba711f6a3e5a_38 {
		// -- templateDecodeMsg ends here --

		case "SenderPath_zid00_str":
			found37zgensym_9db0ba711f6a3e5a_38[0] = true
			z.SenderPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ReaderPrecis_zid01_ptr":
			found37zgensym_9db0ba711f6a3e5a_38[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ReaderPrecis != nil {
					dc.PushAlwaysNil()
					err = z.ReaderPrecis.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ReaderPrecis == nil {
					z.ReaderPrecis = new(FilePrecis)
				}
				dc.DedupIndexEachPtr(z.ReaderPrecis)

				err = z.ReaderPrecis.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ReaderChunks_zid02_ptr":
			found37zgensym_9db0ba711f6a3e5a_38[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ReaderChunks != nil {
					dc.PushAlwaysNil()
					err = z.ReaderChunks.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ReaderChunks == nil {
					z.ReaderChunks = new(Chunks)
				}
				dc.DedupIndexEachPtr(z.ReaderChunks)

				err = z.ReaderChunks.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss37zgensym_9db0ba711f6a3e5a_38 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of LightRequest
var decodeMsgFieldOrder37zgensym_9db0ba711f6a3e5a_38 = []string{"SenderPath_zid00_str", "ReaderPrecis_zid01_ptr", "ReaderChunks_zid02_ptr"}

var decodeMsgFieldSkip37zgensym_9db0ba711f6a3e5a_38 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *LightRequest) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.SenderPath) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.ReaderPrecis == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ReaderChunks == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *LightRequest) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_39 [3]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_40 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_39[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_40 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'LightRequest'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_39[0] {
		// write "SenderPath_zid00_str"
		err = en.Append(0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SenderPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_39[1] {
		// write "ReaderPrecis_zid01_ptr"
		err = en.Append(0xb6, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ReaderPrecis == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ReaderPrecis.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_39[2] {
		// write "ReaderChunks_zid02_ptr"
		err = en.Append(0xb6, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ReaderChunks == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ReaderChunks.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LightRequest) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SenderPath_zid00_str"
		o = append(o, 0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SenderPath)
	}

	if !empty[1] {
		// string "ReaderPrecis_zid01_ptr"
		o = append(o, 0xb6, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ReaderPrecis == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ReaderPrecis.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "ReaderChunks_zid02_ptr"
		o = append(o, 0xb6, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ReaderChunks == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ReaderChunks.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LightRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *LightRequest) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields41zgensym_9db0ba711f6a3e5a_42 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields41zgensym_9db0ba711f6a3e5a_42 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields41zgensym_9db0ba711f6a3e5a_42, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft41zgensym_9db0ba711f6a3e5a_42 := totalEncodedFields41zgensym_9db0ba711f6a3e5a_42
	missingFieldsLeft41zgensym_9db0ba711f6a3e5a_42 := maxFields41zgensym_9db0ba711f6a3e5a_42 - totalEncodedFields41zgensym_9db0ba711f6a3e5a_42

	var nextMiss41zgensym_9db0ba711f6a3e5a_42 int32 = -1
	var found41zgensym_9db0ba711f6a3e5a_42 [maxFields41zgensym_9db0ba711f6a3e5a_42]bool
	var curField41zgensym_9db0ba711f6a3e5a_42 string

doneWithStruct41zgensym_9db0ba711f6a3e5a_42:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft41zgensym_9db0ba711f6a3e5a_42 > 0 || missingFieldsLeft41zgensym_9db0ba711f6a3e5a_42 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft41zgensym_9db0ba711f6a3e5a_42, missingFieldsLeft41zgensym_9db0ba711f6a3e5a_42, msgp.ShowFound(found41zgensym_9db0ba711f6a3e5a_42[:]), unmarshalMsgFieldOrder41zgensym_9db0ba711f6a3e5a_42)
		if encodedFieldsLeft41zgensym_9db0ba711f6a3e5a_42 > 0 {
			encodedFieldsLeft41zgensym_9db0ba711f6a3e5a_42--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField41zgensym_9db0ba711f6a3e5a_42 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss41zgensym_9db0ba711f6a3e5a_42 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss41zgensym_9db0ba711f6a3e5a_42 = 0
			}
			for nextMiss41zgensym_9db0ba711f6a3e5a_42 < maxFields41zgensym_9db0ba711f6a3e5a_42 && (found41zgensym_9db0ba711f6a3e5a_42[nextMiss41zgensym_9db0ba711f6a3e5a_42] || unmarshalMsgFieldSkip41zgensym_9db0ba711f6a3e5a_42[nextMiss41zgensym_9db0ba711f6a3e5a_42]) {
				nextMiss41zgensym_9db0ba711f6a3e5a_42++
			}
			if nextMiss41zgensym_9db0ba711f6a3e5a_42 == maxFields41zgensym_9db0ba711f6a3e5a_42 {
				// filled all the empty fields!
				break doneWithStruct41zgensym_9db0ba711f6a3e5a_42
			}
			missingFieldsLeft41zgensym_9db0ba711f6a3e5a_42--
			curField41zgensym_9db0ba711f6a3e5a_42 = unmarshalMsgFieldOrder41zgensym_9db0ba711f6a3e5a_42[nextMiss41zgensym_9db0ba711f6a3e5a_42]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField41zgensym_9db0ba711f6a3e5a_42)
		switch curField41zgensym_9db0ba711f6a3e5a_42 {
		// -- templateUnmarshalMsg ends here --

		case "SenderPath_zid00_str":
			found41zgensym_9db0ba711f6a3e5a_42[0] = true
			z.SenderPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ReaderPrecis_zid01_ptr":
			found41zgensym_9db0ba711f6a3e5a_42[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ReaderPrecis != nil {
					z.ReaderPrecis.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ReaderPrecis {
						z.ReaderPrecis.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ReaderPrecis == nil {
						z.ReaderPrecis = new(FilePrecis)
					}

					bts, err = z.ReaderPrecis.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "ReaderChunks_zid02_ptr":
			found41zgensym_9db0ba711f6a3e5a_42[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ReaderChunks != nil {
					z.ReaderChunks.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ReaderChunks {
						z.ReaderChunks.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ReaderChunks == nil {
						z.ReaderChunks = new(Chunks)
					}

					bts, err = z.ReaderChunks.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss41zgensym_9db0ba711f6a3e5a_42 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of LightRequest
var unmarshalMsgFieldOrder41zgensym_9db0ba711f6a3e5a_42 = []string{"SenderPath_zid00_str", "ReaderPrecis_zid01_ptr", "ReaderChunks_zid02_ptr"}

var unmarshalMsgFieldSkip41zgensym_9db0ba711f6a3e5a_42 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LightRequest) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.SenderPath) + 23
	if z.ReaderPrecis == nil {
		s += msgp.NilSize
	} else {
		s += z.ReaderPrecis.Msgsize()
	}
	s += 23
	if z.ReaderChunks == nil {
		s += msgp.NilSize
	} else {
		s += z.ReaderChunks.Msgsize()
	}
	return
}
func (z *LightRequest) Gstring() (r string) {
	r = "&LightRequest{\n"
	r += fmt.Sprintf("  SenderPath: \"%v\",\n", z.SenderPath)
	r += fmt.Sprintf("ReaderPrecis: %v,\n", z.ReaderPrecis)
	r += fmt.Sprintf("ReaderChunks: %v,\n", z.ReaderChunks)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Nil) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields43zgensym_9db0ba711f6a3e5a_44 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields43zgensym_9db0ba711f6a3e5a_44 uint32
	totalEncodedFields43zgensym_9db0ba711f6a3e5a_44, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft43zgensym_9db0ba711f6a3e5a_44 := totalEncodedFields43zgensym_9db0ba711f6a3e5a_44
	missingFieldsLeft43zgensym_9db0ba711f6a3e5a_44 := maxFields43zgensym_9db0ba711f6a3e5a_44 - totalEncodedFields43zgensym_9db0ba711f6a3e5a_44

	var nextMiss43zgensym_9db0ba711f6a3e5a_44 int32 = -1
	var found43zgensym_9db0ba711f6a3e5a_44 [maxFields43zgensym_9db0ba711f6a3e5a_44]bool
	var curField43zgensym_9db0ba711f6a3e5a_44 string

doneWithStruct43zgensym_9db0ba711f6a3e5a_44:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft43zgensym_9db0ba711f6a3e5a_44 > 0 || missingFieldsLeft43zgensym_9db0ba711f6a3e5a_44 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft43zgensym_9db0ba711f6a3e5a_44, missingFieldsLeft43zgensym_9db0ba711f6a3e5a_44, msgp.ShowFound(found43zgensym_9db0ba711f6a3e5a_44[:]), decodeMsgFieldOrder43zgensym_9db0ba711f6a3e5a_44)
		if encodedFieldsLeft43zgensym_9db0ba711f6a3e5a_44 > 0 {
			encodedFieldsLeft43zgensym_9db0ba711f6a3e5a_44--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField43zgensym_9db0ba711f6a3e5a_44 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss43zgensym_9db0ba711f6a3e5a_44 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss43zgensym_9db0ba711f6a3e5a_44 = 0
			}
			for nextMiss43zgensym_9db0ba711f6a3e5a_44 < maxFields43zgensym_9db0ba711f6a3e5a_44 && (found43zgensym_9db0ba711f6a3e5a_44[nextMiss43zgensym_9db0ba711f6a3e5a_44] || decodeMsgFieldSkip43zgensym_9db0ba711f6a3e5a_44[nextMiss43zgensym_9db0ba711f6a3e5a_44]) {
				nextMiss43zgensym_9db0ba711f6a3e5a_44++
			}
			if nextMiss43zgensym_9db0ba711f6a3e5a_44 == maxFields43zgensym_9db0ba711f6a3e5a_44 {
				// filled all the empty fields!
				break doneWithStruct43zgensym_9db0ba711f6a3e5a_44
			}
			missingFieldsLeft43zgensym_9db0ba711f6a3e5a_44--
			curField43zgensym_9db0ba711f6a3e5a_44 = decodeMsgFieldOrder43zgensym_9db0ba711f6a3e5a_44[nextMiss43zgensym_9db0ba711f6a3e5a_44]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField43zgensym_9db0ba711f6a3e5a_44)
		switch curField43zgensym_9db0ba711f6a3e5a_44 {
		// -- templateDecodeMsg ends here --

		case "Placeholder__int":
			found43zgensym_9db0ba711f6a3e5a_44[0] = true
			z.Placeholder, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss43zgensym_9db0ba711f6a3e5a_44 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Nil
var decodeMsgFieldOrder43zgensym_9db0ba711f6a3e5a_44 = []string{"Placeholder__int"}

var decodeMsgFieldSkip43zgensym_9db0ba711f6a3e5a_44 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Nil) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Placeholder == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Nil) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_45 [1]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_46 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_45[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_46 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Nil'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4e, 0x69, 0x6c})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_45[0] {
		// write "Placeholder__int"
		err = en.Append(0xb0, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Placeholder)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Nil) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Placeholder__int"
		o = append(o, 0xb0, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Placeholder)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Nil) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Nil) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields47zgensym_9db0ba711f6a3e5a_48 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields47zgensym_9db0ba711f6a3e5a_48 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields47zgensym_9db0ba711f6a3e5a_48, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft47zgensym_9db0ba711f6a3e5a_48 := totalEncodedFields47zgensym_9db0ba711f6a3e5a_48
	missingFieldsLeft47zgensym_9db0ba711f6a3e5a_48 := maxFields47zgensym_9db0ba711f6a3e5a_48 - totalEncodedFields47zgensym_9db0ba711f6a3e5a_48

	var nextMiss47zgensym_9db0ba711f6a3e5a_48 int32 = -1
	var found47zgensym_9db0ba711f6a3e5a_48 [maxFields47zgensym_9db0ba711f6a3e5a_48]bool
	var curField47zgensym_9db0ba711f6a3e5a_48 string

doneWithStruct47zgensym_9db0ba711f6a3e5a_48:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft47zgensym_9db0ba711f6a3e5a_48 > 0 || missingFieldsLeft47zgensym_9db0ba711f6a3e5a_48 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft47zgensym_9db0ba711f6a3e5a_48, missingFieldsLeft47zgensym_9db0ba711f6a3e5a_48, msgp.ShowFound(found47zgensym_9db0ba711f6a3e5a_48[:]), unmarshalMsgFieldOrder47zgensym_9db0ba711f6a3e5a_48)
		if encodedFieldsLeft47zgensym_9db0ba711f6a3e5a_48 > 0 {
			encodedFieldsLeft47zgensym_9db0ba711f6a3e5a_48--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField47zgensym_9db0ba711f6a3e5a_48 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss47zgensym_9db0ba711f6a3e5a_48 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss47zgensym_9db0ba711f6a3e5a_48 = 0
			}
			for nextMiss47zgensym_9db0ba711f6a3e5a_48 < maxFields47zgensym_9db0ba711f6a3e5a_48 && (found47zgensym_9db0ba711f6a3e5a_48[nextMiss47zgensym_9db0ba711f6a3e5a_48] || unmarshalMsgFieldSkip47zgensym_9db0ba711f6a3e5a_48[nextMiss47zgensym_9db0ba711f6a3e5a_48]) {
				nextMiss47zgensym_9db0ba711f6a3e5a_48++
			}
			if nextMiss47zgensym_9db0ba711f6a3e5a_48 == maxFields47zgensym_9db0ba711f6a3e5a_48 {
				// filled all the empty fields!
				break doneWithStruct47zgensym_9db0ba711f6a3e5a_48
			}
			missingFieldsLeft47zgensym_9db0ba711f6a3e5a_48--
			curField47zgensym_9db0ba711f6a3e5a_48 = unmarshalMsgFieldOrder47zgensym_9db0ba711f6a3e5a_48[nextMiss47zgensym_9db0ba711f6a3e5a_48]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField47zgensym_9db0ba711f6a3e5a_48)
		switch curField47zgensym_9db0ba711f6a3e5a_48 {
		// -- templateUnmarshalMsg ends here --

		case "Placeholder__int":
			found47zgensym_9db0ba711f6a3e5a_48[0] = true
			z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss47zgensym_9db0ba711f6a3e5a_48 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Nil
var unmarshalMsgFieldOrder47zgensym_9db0ba711f6a3e5a_48 = []string{"Placeholder__int"}

var unmarshalMsgFieldSkip47zgensym_9db0ba711f6a3e5a_48 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Nil) Msgsize() (s int) {
	s = 1 + 17 + msgp.IntSize
	return
}
func (z *Nil) Gstring() (r string) {
	r = "&Nil{\n"
	r += fmt.Sprintf("Placeholder: %v,\n", z.Placeholder)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Pair) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields49zgensym_9db0ba711f6a3e5a_50 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields49zgensym_9db0ba711f6a3e5a_50 uint32
	totalEncodedFields49zgensym_9db0ba711f6a3e5a_50, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft49zgensym_9db0ba711f6a3e5a_50 := totalEncodedFields49zgensym_9db0ba711f6a3e5a_50
	missingFieldsLeft49zgensym_9db0ba711f6a3e5a_50 := maxFields49zgensym_9db0ba711f6a3e5a_50 - totalEncodedFields49zgensym_9db0ba711f6a3e5a_50

	var nextMiss49zgensym_9db0ba711f6a3e5a_50 int32 = -1
	var found49zgensym_9db0ba711f6a3e5a_50 [maxFields49zgensym_9db0ba711f6a3e5a_50]bool
	var curField49zgensym_9db0ba711f6a3e5a_50 string

doneWithStruct49zgensym_9db0ba711f6a3e5a_50:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft49zgensym_9db0ba711f6a3e5a_50 > 0 || missingFieldsLeft49zgensym_9db0ba711f6a3e5a_50 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft49zgensym_9db0ba711f6a3e5a_50, missingFieldsLeft49zgensym_9db0ba711f6a3e5a_50, msgp.ShowFound(found49zgensym_9db0ba711f6a3e5a_50[:]), decodeMsgFieldOrder49zgensym_9db0ba711f6a3e5a_50)
		if encodedFieldsLeft49zgensym_9db0ba711f6a3e5a_50 > 0 {
			encodedFieldsLeft49zgensym_9db0ba711f6a3e5a_50--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField49zgensym_9db0ba711f6a3e5a_50 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss49zgensym_9db0ba711f6a3e5a_50 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss49zgensym_9db0ba711f6a3e5a_50 = 0
			}
			for nextMiss49zgensym_9db0ba711f6a3e5a_50 < maxFields49zgensym_9db0ba711f6a3e5a_50 && (found49zgensym_9db0ba711f6a3e5a_50[nextMiss49zgensym_9db0ba711f6a3e5a_50] || decodeMsgFieldSkip49zgensym_9db0ba711f6a3e5a_50[nextMiss49zgensym_9db0ba711f6a3e5a_50]) {
				nextMiss49zgensym_9db0ba711f6a3e5a_50++
			}
			if nextMiss49zgensym_9db0ba711f6a3e5a_50 == maxFields49zgensym_9db0ba711f6a3e5a_50 {
				// filled all the empty fields!
				break doneWithStruct49zgensym_9db0ba711f6a3e5a_50
			}
			missingFieldsLeft49zgensym_9db0ba711f6a3e5a_50--
			curField49zgensym_9db0ba711f6a3e5a_50 = decodeMsgFieldOrder49zgensym_9db0ba711f6a3e5a_50[nextMiss49zgensym_9db0ba711f6a3e5a_50]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField49zgensym_9db0ba711f6a3e5a_50)
		switch curField49zgensym_9db0ba711f6a3e5a_50 {
		// -- templateDecodeMsg ends here --

		case "A__ptr":
			found49zgensym_9db0ba711f6a3e5a_50[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.A != nil {
					dc.PushAlwaysNil()
					err = z.A.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.A == nil {
					z.A = new(Chunk)
				}
				dc.DedupIndexEachPtr(z.A)

				err = z.A.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "B__ptr":
			found49zgensym_9db0ba711f6a3e5a_50[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.B != nil {
					dc.PushAlwaysNil()
					err = z.B.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.B == nil {
					z.B = new(Chunk)
				}
				dc.DedupIndexEachPtr(z.B)

				err = z.B.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss49zgensym_9db0ba711f6a3e5a_50 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Pair
var decodeMsgFieldOrder49zgensym_9db0ba711f6a3e5a_50 = []string{"A__ptr", "B__ptr"}

var decodeMsgFieldSkip49zgensym_9db0ba711f6a3e5a_50 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Pair) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.A == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.B == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Pair) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_51 [2]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_52 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_51[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_52 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Pair'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x69, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_51[0] {
		// write "A__ptr"
		err = en.Append(0xa6, 0x41, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.A == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.A.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_51[1] {
		// write "B__ptr"
		err = en.Append(0xa6, 0x42, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.B == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.B.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pair) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "A__ptr"
		o = append(o, 0xa6, 0x41, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.A == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.A.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "B__ptr"
		o = append(o, 0xa6, 0x42, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.B == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.B.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pair) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Pair) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields53zgensym_9db0ba711f6a3e5a_54 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields53zgensym_9db0ba711f6a3e5a_54 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields53zgensym_9db0ba711f6a3e5a_54, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft53zgensym_9db0ba711f6a3e5a_54 := totalEncodedFields53zgensym_9db0ba711f6a3e5a_54
	missingFieldsLeft53zgensym_9db0ba711f6a3e5a_54 := maxFields53zgensym_9db0ba711f6a3e5a_54 - totalEncodedFields53zgensym_9db0ba711f6a3e5a_54

	var nextMiss53zgensym_9db0ba711f6a3e5a_54 int32 = -1
	var found53zgensym_9db0ba711f6a3e5a_54 [maxFields53zgensym_9db0ba711f6a3e5a_54]bool
	var curField53zgensym_9db0ba711f6a3e5a_54 string

doneWithStruct53zgensym_9db0ba711f6a3e5a_54:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft53zgensym_9db0ba711f6a3e5a_54 > 0 || missingFieldsLeft53zgensym_9db0ba711f6a3e5a_54 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft53zgensym_9db0ba711f6a3e5a_54, missingFieldsLeft53zgensym_9db0ba711f6a3e5a_54, msgp.ShowFound(found53zgensym_9db0ba711f6a3e5a_54[:]), unmarshalMsgFieldOrder53zgensym_9db0ba711f6a3e5a_54)
		if encodedFieldsLeft53zgensym_9db0ba711f6a3e5a_54 > 0 {
			encodedFieldsLeft53zgensym_9db0ba711f6a3e5a_54--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField53zgensym_9db0ba711f6a3e5a_54 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss53zgensym_9db0ba711f6a3e5a_54 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss53zgensym_9db0ba711f6a3e5a_54 = 0
			}
			for nextMiss53zgensym_9db0ba711f6a3e5a_54 < maxFields53zgensym_9db0ba711f6a3e5a_54 && (found53zgensym_9db0ba711f6a3e5a_54[nextMiss53zgensym_9db0ba711f6a3e5a_54] || unmarshalMsgFieldSkip53zgensym_9db0ba711f6a3e5a_54[nextMiss53zgensym_9db0ba711f6a3e5a_54]) {
				nextMiss53zgensym_9db0ba711f6a3e5a_54++
			}
			if nextMiss53zgensym_9db0ba711f6a3e5a_54 == maxFields53zgensym_9db0ba711f6a3e5a_54 {
				// filled all the empty fields!
				break doneWithStruct53zgensym_9db0ba711f6a3e5a_54
			}
			missingFieldsLeft53zgensym_9db0ba711f6a3e5a_54--
			curField53zgensym_9db0ba711f6a3e5a_54 = unmarshalMsgFieldOrder53zgensym_9db0ba711f6a3e5a_54[nextMiss53zgensym_9db0ba711f6a3e5a_54]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField53zgensym_9db0ba711f6a3e5a_54)
		switch curField53zgensym_9db0ba711f6a3e5a_54 {
		// -- templateUnmarshalMsg ends here --

		case "A__ptr":
			found53zgensym_9db0ba711f6a3e5a_54[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.A != nil {
					z.A.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.A {
						z.A.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.A == nil {
						z.A = new(Chunk)
					}

					bts, err = z.A.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "B__ptr":
			found53zgensym_9db0ba711f6a3e5a_54[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.B != nil {
					z.B.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.B {
						z.B.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.B == nil {
						z.B = new(Chunk)
					}

					bts, err = z.B.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss53zgensym_9db0ba711f6a3e5a_54 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Pair
var unmarshalMsgFieldOrder53zgensym_9db0ba711f6a3e5a_54 = []string{"A__ptr", "B__ptr"}

var unmarshalMsgFieldSkip53zgensym_9db0ba711f6a3e5a_54 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pair) Msgsize() (s int) {
	s = 1 + 7
	if z.A == nil {
		s += msgp.NilSize
	} else {
		s += z.A.Msgsize()
	}
	s += 7
	if z.B == nil {
		s += msgp.NilSize
	} else {
		s += z.B.Msgsize()
	}
	return
}
func (z *Pair) Gstring() (r string) {
	r = "&Pair{\n"
	r += fmt.Sprintf("A: %v,\n", z.A)
	r += fmt.Sprintf("B: %v,\n", z.B)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RsyncNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields55zgensym_9db0ba711f6a3e5a_56 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields55zgensym_9db0ba711f6a3e5a_56 uint32
	totalEncodedFields55zgensym_9db0ba711f6a3e5a_56, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56 := totalEncodedFields55zgensym_9db0ba711f6a3e5a_56
	missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56 := maxFields55zgensym_9db0ba711f6a3e5a_56 - totalEncodedFields55zgensym_9db0ba711f6a3e5a_56

	var nextMiss55zgensym_9db0ba711f6a3e5a_56 int32 = -1
	var found55zgensym_9db0ba711f6a3e5a_56 [maxFields55zgensym_9db0ba711f6a3e5a_56]bool
	var curField55zgensym_9db0ba711f6a3e5a_56 string

doneWithStruct55zgensym_9db0ba711f6a3e5a_56:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56 > 0 || missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56, missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56, msgp.ShowFound(found55zgensym_9db0ba711f6a3e5a_56[:]), decodeMsgFieldOrder55zgensym_9db0ba711f6a3e5a_56)
		if encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56 > 0 {
			encodedFieldsLeft55zgensym_9db0ba711f6a3e5a_56--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField55zgensym_9db0ba711f6a3e5a_56 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss55zgensym_9db0ba711f6a3e5a_56 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss55zgensym_9db0ba711f6a3e5a_56 = 0
			}
			for nextMiss55zgensym_9db0ba711f6a3e5a_56 < maxFields55zgensym_9db0ba711f6a3e5a_56 && (found55zgensym_9db0ba711f6a3e5a_56[nextMiss55zgensym_9db0ba711f6a3e5a_56] || decodeMsgFieldSkip55zgensym_9db0ba711f6a3e5a_56[nextMiss55zgensym_9db0ba711f6a3e5a_56]) {
				nextMiss55zgensym_9db0ba711f6a3e5a_56++
			}
			if nextMiss55zgensym_9db0ba711f6a3e5a_56 == maxFields55zgensym_9db0ba711f6a3e5a_56 {
				// filled all the empty fields!
				break doneWithStruct55zgensym_9db0ba711f6a3e5a_56
			}
			missingFieldsLeft55zgensym_9db0ba711f6a3e5a_56--
			curField55zgensym_9db0ba711f6a3e5a_56 = decodeMsgFieldOrder55zgensym_9db0ba711f6a3e5a_56[nextMiss55zgensym_9db0ba711f6a3e5a_56]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField55zgensym_9db0ba711f6a3e5a_56)
		switch curField55zgensym_9db0ba711f6a3e5a_56 {
		// -- templateDecodeMsg ends here --

		case "Host_zid00_str":
			found55zgensym_9db0ba711f6a3e5a_56[0] = true
			z.Host, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Placeholder__int":
			found55zgensym_9db0ba711f6a3e5a_56[1] = true
			z.Placeholder, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss55zgensym_9db0ba711f6a3e5a_56 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncNode
var decodeMsgFieldOrder55zgensym_9db0ba711f6a3e5a_56 = []string{"Host_zid00_str", "Placeholder__int"}

var decodeMsgFieldSkip55zgensym_9db0ba711f6a3e5a_56 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RsyncNode) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Host) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Placeholder == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RsyncNode) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_57 [2]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_58 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_57[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_58 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RsyncNode'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x64, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_57[0] {
		// write "Host_zid00_str"
		err = en.Append(0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Host)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_57[1] {
		// write "Placeholder__int"
		err = en.Append(0xb0, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Placeholder)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RsyncNode) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Host_zid00_str"
		o = append(o, 0xae, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Host)
	}

	if !empty[1] {
		// string "Placeholder__int"
		o = append(o, 0xb0, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Placeholder)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RsyncNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RsyncNode) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields59zgensym_9db0ba711f6a3e5a_60 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields59zgensym_9db0ba711f6a3e5a_60 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields59zgensym_9db0ba711f6a3e5a_60, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft59zgensym_9db0ba711f6a3e5a_60 := totalEncodedFields59zgensym_9db0ba711f6a3e5a_60
	missingFieldsLeft59zgensym_9db0ba711f6a3e5a_60 := maxFields59zgensym_9db0ba711f6a3e5a_60 - totalEncodedFields59zgensym_9db0ba711f6a3e5a_60

	var nextMiss59zgensym_9db0ba711f6a3e5a_60 int32 = -1
	var found59zgensym_9db0ba711f6a3e5a_60 [maxFields59zgensym_9db0ba711f6a3e5a_60]bool
	var curField59zgensym_9db0ba711f6a3e5a_60 string

doneWithStruct59zgensym_9db0ba711f6a3e5a_60:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft59zgensym_9db0ba711f6a3e5a_60 > 0 || missingFieldsLeft59zgensym_9db0ba711f6a3e5a_60 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft59zgensym_9db0ba711f6a3e5a_60, missingFieldsLeft59zgensym_9db0ba711f6a3e5a_60, msgp.ShowFound(found59zgensym_9db0ba711f6a3e5a_60[:]), unmarshalMsgFieldOrder59zgensym_9db0ba711f6a3e5a_60)
		if encodedFieldsLeft59zgensym_9db0ba711f6a3e5a_60 > 0 {
			encodedFieldsLeft59zgensym_9db0ba711f6a3e5a_60--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField59zgensym_9db0ba711f6a3e5a_60 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss59zgensym_9db0ba711f6a3e5a_60 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss59zgensym_9db0ba711f6a3e5a_60 = 0
			}
			for nextMiss59zgensym_9db0ba711f6a3e5a_60 < maxFields59zgensym_9db0ba711f6a3e5a_60 && (found59zgensym_9db0ba711f6a3e5a_60[nextMiss59zgensym_9db0ba711f6a3e5a_60] || unmarshalMsgFieldSkip59zgensym_9db0ba711f6a3e5a_60[nextMiss59zgensym_9db0ba711f6a3e5a_60]) {
				nextMiss59zgensym_9db0ba711f6a3e5a_60++
			}
			if nextMiss59zgensym_9db0ba711f6a3e5a_60 == maxFields59zgensym_9db0ba711f6a3e5a_60 {
				// filled all the empty fields!
				break doneWithStruct59zgensym_9db0ba711f6a3e5a_60
			}
			missingFieldsLeft59zgensym_9db0ba711f6a3e5a_60--
			curField59zgensym_9db0ba711f6a3e5a_60 = unmarshalMsgFieldOrder59zgensym_9db0ba711f6a3e5a_60[nextMiss59zgensym_9db0ba711f6a3e5a_60]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField59zgensym_9db0ba711f6a3e5a_60)
		switch curField59zgensym_9db0ba711f6a3e5a_60 {
		// -- templateUnmarshalMsg ends here --

		case "Host_zid00_str":
			found59zgensym_9db0ba711f6a3e5a_60[0] = true
			z.Host, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Placeholder__int":
			found59zgensym_9db0ba711f6a3e5a_60[1] = true
			z.Placeholder, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss59zgensym_9db0ba711f6a3e5a_60 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RsyncNode
var unmarshalMsgFieldOrder59zgensym_9db0ba711f6a3e5a_60 = []string{"Host_zid00_str", "Placeholder__int"}

var unmarshalMsgFieldSkip59zgensym_9db0ba711f6a3e5a_60 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RsyncNode) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Host) + 17 + msgp.IntSize
	return
}
func (z *RsyncNode) Gstring() (r string) {
	r = "&RsyncNode{\n"
	r += fmt.Sprintf("       Host: \"%v\",\n", z.Host)
	r += fmt.Sprintf("Placeholder: %v,\n", z.Placeholder)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SenderPlan) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields61zgensym_9db0ba711f6a3e5a_62 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields61zgensym_9db0ba711f6a3e5a_62 uint32
	totalEncodedFields61zgensym_9db0ba711f6a3e5a_62, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft61zgensym_9db0ba711f6a3e5a_62 := totalEncodedFields61zgensym_9db0ba711f6a3e5a_62
	missingFieldsLeft61zgensym_9db0ba711f6a3e5a_62 := maxFields61zgensym_9db0ba711f6a3e5a_62 - totalEncodedFields61zgensym_9db0ba711f6a3e5a_62

	var nextMiss61zgensym_9db0ba711f6a3e5a_62 int32 = -1
	var found61zgensym_9db0ba711f6a3e5a_62 [maxFields61zgensym_9db0ba711f6a3e5a_62]bool
	var curField61zgensym_9db0ba711f6a3e5a_62 string

doneWithStruct61zgensym_9db0ba711f6a3e5a_62:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft61zgensym_9db0ba711f6a3e5a_62 > 0 || missingFieldsLeft61zgensym_9db0ba711f6a3e5a_62 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft61zgensym_9db0ba711f6a3e5a_62, missingFieldsLeft61zgensym_9db0ba711f6a3e5a_62, msgp.ShowFound(found61zgensym_9db0ba711f6a3e5a_62[:]), decodeMsgFieldOrder61zgensym_9db0ba711f6a3e5a_62)
		if encodedFieldsLeft61zgensym_9db0ba711f6a3e5a_62 > 0 {
			encodedFieldsLeft61zgensym_9db0ba711f6a3e5a_62--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField61zgensym_9db0ba711f6a3e5a_62 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss61zgensym_9db0ba711f6a3e5a_62 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss61zgensym_9db0ba711f6a3e5a_62 = 0
			}
			for nextMiss61zgensym_9db0ba711f6a3e5a_62 < maxFields61zgensym_9db0ba711f6a3e5a_62 && (found61zgensym_9db0ba711f6a3e5a_62[nextMiss61zgensym_9db0ba711f6a3e5a_62] || decodeMsgFieldSkip61zgensym_9db0ba711f6a3e5a_62[nextMiss61zgensym_9db0ba711f6a3e5a_62]) {
				nextMiss61zgensym_9db0ba711f6a3e5a_62++
			}
			if nextMiss61zgensym_9db0ba711f6a3e5a_62 == maxFields61zgensym_9db0ba711f6a3e5a_62 {
				// filled all the empty fields!
				break doneWithStruct61zgensym_9db0ba711f6a3e5a_62
			}
			missingFieldsLeft61zgensym_9db0ba711f6a3e5a_62--
			curField61zgensym_9db0ba711f6a3e5a_62 = decodeMsgFieldOrder61zgensym_9db0ba711f6a3e5a_62[nextMiss61zgensym_9db0ba711f6a3e5a_62]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField61zgensym_9db0ba711f6a3e5a_62)
		switch curField61zgensym_9db0ba711f6a3e5a_62 {
		// -- templateDecodeMsg ends here --

		case "SenderPath_zid00_str":
			found61zgensym_9db0ba711f6a3e5a_62[0] = true
			z.SenderPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SenderPrecis_zid01_ptr":
			found61zgensym_9db0ba711f6a3e5a_62[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SenderPrecis != nil {
					dc.PushAlwaysNil()
					err = z.SenderPrecis.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SenderPrecis == nil {
					z.SenderPrecis = new(FilePrecis)
				}
				dc.DedupIndexEachPtr(z.SenderPrecis)

				err = z.SenderPrecis.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "SenderChunksNoSlice_zid02_ptr":
			found61zgensym_9db0ba711f6a3e5a_62[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SenderChunksNoSlice != nil {
					dc.PushAlwaysNil()
					err = z.SenderChunksNoSlice.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SenderChunksNoSlice == nil {
					z.SenderChunksNoSlice = new(Chunks)
				}
				dc.DedupIndexEachPtr(z.SenderChunksNoSlice)

				err = z.SenderChunksNoSlice.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "FileIsDeleted_zid03_boo":
			found61zgensym_9db0ba711f6a3e5a_62[3] = true
			z.FileIsDeleted, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss61zgensym_9db0ba711f6a3e5a_62 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SenderPlan
var decodeMsgFieldOrder61zgensym_9db0ba711f6a3e5a_62 = []string{"SenderPath_zid00_str", "SenderPrecis_zid01_ptr", "SenderChunksNoSlice_zid02_ptr", "FileIsDeleted_zid03_boo"}

var decodeMsgFieldSkip61zgensym_9db0ba711f6a3e5a_62 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *SenderPlan) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (len(z.SenderPath) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.SenderPrecis == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.SenderChunksNoSlice == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (!z.FileIsDeleted) // bool, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *SenderPlan) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9db0ba711f6a3e5a_63 [4]bool
	fieldsInUse_zgensym_9db0ba711f6a3e5a_64 := z.fieldsNotEmpty(empty_zgensym_9db0ba711f6a3e5a_63[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9db0ba711f6a3e5a_64 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SenderPlan'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_9db0ba711f6a3e5a_63[0] {
		// write "SenderPath_zid00_str"
		err = en.Append(0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SenderPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_63[1] {
		// write "SenderPrecis_zid01_ptr"
		err = en.Append(0xb6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SenderPrecis == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.SenderPrecis.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_63[2] {
		// write "SenderChunksNoSlice_zid02_ptr"
		err = en.Append(0xbd, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x4e, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SenderChunksNoSlice == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.SenderChunksNoSlice.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_9db0ba711f6a3e5a_63[3] {
		// write "FileIsDeleted_zid03_boo"
		err = en.Append(0xb7, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.FileIsDeleted)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SenderPlan) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SenderPath_zid00_str"
		o = append(o, 0xb4, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SenderPath)
	}

	if !empty[1] {
		// string "SenderPrecis_zid01_ptr"
		o = append(o, 0xb6, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SenderPrecis == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SenderPrecis.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "SenderChunksNoSlice_zid02_ptr"
		o = append(o, 0xbd, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x4e, 0x6f, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SenderChunksNoSlice == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SenderChunksNoSlice.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// string "FileIsDeleted_zid03_boo"
		o = append(o, 0xb7, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.FileIsDeleted)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SenderPlan) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SenderPlan) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields65zgensym_9db0ba711f6a3e5a_66 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields65zgensym_9db0ba711f6a3e5a_66 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields65zgensym_9db0ba711f6a3e5a_66, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft65zgensym_9db0ba711f6a3e5a_66 := totalEncodedFields65zgensym_9db0ba711f6a3e5a_66
	missingFieldsLeft65zgensym_9db0ba711f6a3e5a_66 := maxFields65zgensym_9db0ba711f6a3e5a_66 - totalEncodedFields65zgensym_9db0ba711f6a3e5a_66

	var nextMiss65zgensym_9db0ba711f6a3e5a_66 int32 = -1
	var found65zgensym_9db0ba711f6a3e5a_66 [maxFields65zgensym_9db0ba711f6a3e5a_66]bool
	var curField65zgensym_9db0ba711f6a3e5a_66 string

doneWithStruct65zgensym_9db0ba711f6a3e5a_66:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft65zgensym_9db0ba711f6a3e5a_66 > 0 || missingFieldsLeft65zgensym_9db0ba711f6a3e5a_66 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft65zgensym_9db0ba711f6a3e5a_66, missingFieldsLeft65zgensym_9db0ba711f6a3e5a_66, msgp.ShowFound(found65zgensym_9db0ba711f6a3e5a_66[:]), unmarshalMsgFieldOrder65zgensym_9db0ba711f6a3e5a_66)
		if encodedFieldsLeft65zgensym_9db0ba711f6a3e5a_66 > 0 {
			encodedFieldsLeft65zgensym_9db0ba711f6a3e5a_66--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField65zgensym_9db0ba711f6a3e5a_66 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss65zgensym_9db0ba711f6a3e5a_66 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss65zgensym_9db0ba711f6a3e5a_66 = 0
			}
			for nextMiss65zgensym_9db0ba711f6a3e5a_66 < maxFields65zgensym_9db0ba711f6a3e5a_66 && (found65zgensym_9db0ba711f6a3e5a_66[nextMiss65zgensym_9db0ba711f6a3e5a_66] || unmarshalMsgFieldSkip65zgensym_9db0ba711f6a3e5a_66[nextMiss65zgensym_9db0ba711f6a3e5a_66]) {
				nextMiss65zgensym_9db0ba711f6a3e5a_66++
			}
			if nextMiss65zgensym_9db0ba711f6a3e5a_66 == maxFields65zgensym_9db0ba711f6a3e5a_66 {
				// filled all the empty fields!
				break doneWithStruct65zgensym_9db0ba711f6a3e5a_66
			}
			missingFieldsLeft65zgensym_9db0ba711f6a3e5a_66--
			curField65zgensym_9db0ba711f6a3e5a_66 = unmarshalMsgFieldOrder65zgensym_9db0ba711f6a3e5a_66[nextMiss65zgensym_9db0ba711f6a3e5a_66]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField65zgensym_9db0ba711f6a3e5a_66)
		switch curField65zgensym_9db0ba711f6a3e5a_66 {
		// -- templateUnmarshalMsg ends here --

		case "SenderPath_zid00_str":
			found65zgensym_9db0ba711f6a3e5a_66[0] = true
			z.SenderPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SenderPrecis_zid01_ptr":
			found65zgensym_9db0ba711f6a3e5a_66[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SenderPrecis != nil {
					z.SenderPrecis.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SenderPrecis {
						z.SenderPrecis.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SenderPrecis == nil {
						z.SenderPrecis = new(FilePrecis)
					}

					bts, err = z.SenderPrecis.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "SenderChunksNoSlice_zid02_ptr":
			found65zgensym_9db0ba711f6a3e5a_66[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SenderChunksNoSlice != nil {
					z.SenderChunksNoSlice.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SenderChunksNoSlice {
						z.SenderChunksNoSlice.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SenderChunksNoSlice == nil {
						z.SenderChunksNoSlice = new(Chunks)
					}

					bts, err = z.SenderChunksNoSlice.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "FileIsDeleted_zid03_boo":
			found65zgensym_9db0ba711f6a3e5a_66[3] = true
			z.FileIsDeleted, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss65zgensym_9db0ba711f6a3e5a_66 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SenderPlan
var unmarshalMsgFieldOrder65zgensym_9db0ba711f6a3e5a_66 = []string{"SenderPath_zid00_str", "SenderPrecis_zid01_ptr", "SenderChunksNoSlice_zid02_ptr", "FileIsDeleted_zid03_boo"}

var unmarshalMsgFieldSkip65zgensym_9db0ba711f6a3e5a_66 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SenderPlan) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.SenderPath) + 23
	if z.SenderPrecis == nil {
		s += msgp.NilSize
	} else {
		s += z.SenderPrecis.Msgsize()
	}
	s += 30
	if z.SenderChunksNoSlice == nil {
		s += msgp.NilSize
	} else {
		s += z.SenderChunksNoSlice.Msgsize()
	}
	s += 24 + msgp.BoolSize
	return
}
func (z *SenderPlan) Gstring() (r string) {
	r = "&SenderPlan{\n"
	r += fmt.Sprintf("         SenderPath: \"%v\",\n", z.SenderPath)
	r += fmt.Sprintf("       SenderPrecis: %v,\n", z.SenderPrecis)
	r += fmt.Sprintf("SenderChunksNoSlice: %v,\n", z.SenderChunksNoSlice)
	r += fmt.Sprintf("      FileIsDeleted: %v,\n", z.FileIsDeleted)
	r += "}\n"
	return
}
