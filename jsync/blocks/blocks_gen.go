// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package block

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ClientBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_d4afe0c74e46574d_1 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_d4afe0c74e46574d_1 uint32
	totalEncodedFields0zgensym_d4afe0c74e46574d_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_d4afe0c74e46574d_1 := totalEncodedFields0zgensym_d4afe0c74e46574d_1
	missingFieldsLeft0zgensym_d4afe0c74e46574d_1 := maxFields0zgensym_d4afe0c74e46574d_1 - totalEncodedFields0zgensym_d4afe0c74e46574d_1

	var nextMiss0zgensym_d4afe0c74e46574d_1 int32 = -1
	var found0zgensym_d4afe0c74e46574d_1 [maxFields0zgensym_d4afe0c74e46574d_1]bool
	var curField0zgensym_d4afe0c74e46574d_1 string

doneWithStruct0zgensym_d4afe0c74e46574d_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_d4afe0c74e46574d_1 > 0 || missingFieldsLeft0zgensym_d4afe0c74e46574d_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_d4afe0c74e46574d_1, missingFieldsLeft0zgensym_d4afe0c74e46574d_1, msgp.ShowFound(found0zgensym_d4afe0c74e46574d_1[:]), decodeMsgFieldOrder0zgensym_d4afe0c74e46574d_1)
		if encodedFieldsLeft0zgensym_d4afe0c74e46574d_1 > 0 {
			encodedFieldsLeft0zgensym_d4afe0c74e46574d_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_d4afe0c74e46574d_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_d4afe0c74e46574d_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_d4afe0c74e46574d_1 = 0
			}
			for nextMiss0zgensym_d4afe0c74e46574d_1 < maxFields0zgensym_d4afe0c74e46574d_1 && (found0zgensym_d4afe0c74e46574d_1[nextMiss0zgensym_d4afe0c74e46574d_1] || decodeMsgFieldSkip0zgensym_d4afe0c74e46574d_1[nextMiss0zgensym_d4afe0c74e46574d_1]) {
				nextMiss0zgensym_d4afe0c74e46574d_1++
			}
			if nextMiss0zgensym_d4afe0c74e46574d_1 == maxFields0zgensym_d4afe0c74e46574d_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_d4afe0c74e46574d_1
			}
			missingFieldsLeft0zgensym_d4afe0c74e46574d_1--
			curField0zgensym_d4afe0c74e46574d_1 = decodeMsgFieldOrder0zgensym_d4afe0c74e46574d_1[nextMiss0zgensym_d4afe0c74e46574d_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_d4afe0c74e46574d_1)
		switch curField0zgensym_d4afe0c74e46574d_1 {
		// -- templateDecodeMsg ends here --

		case "PayloadBlake3_zid00_str":
			found0zgensym_d4afe0c74e46574d_1[0] = true
			z.PayloadBlake3, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Compression_zid01_str":
			found0zgensym_d4afe0c74e46574d_1[1] = true
			z.Compression, err = dc.ReadString()
			if err != nil {
				return
			}
		case "WriteCallID_zid02_str":
			found0zgensym_d4afe0c74e46574d_1[2] = true
			z.WriteCallID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "WriteTime0_zid03_tim":
			found0zgensym_d4afe0c74e46574d_1[3] = true
			z.WriteTime0, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Expires_zid04_tim":
			found0zgensym_d4afe0c74e46574d_1[4] = true
			z.Expires, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ServerDataBlake3_zid05_str":
			found0zgensym_d4afe0c74e46574d_1[5] = true
			z.ServerDataBlake3, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PrePad_zid06_bin":
			found0zgensym_d4afe0c74e46574d_1[6] = true
			z.PrePad, err = dc.ReadBytes(z.PrePad)
			if err != nil {
				return
			}
		case "Payload_zid07_bin":
			found0zgensym_d4afe0c74e46574d_1[7] = true
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				return
			}
		case "PostPad_zid08_bin":
			found0zgensym_d4afe0c74e46574d_1[8] = true
			z.PostPad, err = dc.ReadBytes(z.PostPad)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_d4afe0c74e46574d_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ClientBlock
var decodeMsgFieldOrder0zgensym_d4afe0c74e46574d_1 = []string{"PayloadBlake3_zid00_str", "Compression_zid01_str", "WriteCallID_zid02_str", "WriteTime0_zid03_tim", "Expires_zid04_tim", "ServerDataBlake3_zid05_str", "PrePad_zid06_bin", "Payload_zid07_bin", "PostPad_zid08_bin"}

var decodeMsgFieldSkip0zgensym_d4afe0c74e46574d_1 = []bool{false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ClientBlock) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 9
	}
	var fieldsInUse uint32 = 9
	isempty[0] = (len(z.PayloadBlake3) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Compression) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.WriteCallID) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.WriteTime0.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Expires.IsZero()) // time.Time, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ServerDataBlake3) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.PrePad) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.Payload) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.PostPad) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ClientBlock) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_d4afe0c74e46574d_2 [9]bool
	fieldsInUse_zgensym_d4afe0c74e46574d_3 := z.fieldsNotEmpty(empty_zgensym_d4afe0c74e46574d_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_d4afe0c74e46574d_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ClientBlock'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_d4afe0c74e46574d_2[0] {
		// write "PayloadBlake3_zid00_str"
		err = en.Append(0xb7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PayloadBlake3)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[1] {
		// write "Compression_zid01_str"
		err = en.Append(0xb5, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Compression)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[2] {
		// write "WriteCallID_zid02_str"
		err = en.Append(0xb5, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.WriteCallID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[3] {
		// write "WriteTime0_zid03_tim"
		err = en.Append(0xb4, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.WriteTime0)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[4] {
		// write "Expires_zid04_tim"
		err = en.Append(0xb1, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Expires)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[5] {
		// write "ServerDataBlake3_zid05_str"
		err = en.Append(0xba, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ServerDataBlake3)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[6] {
		// write "PrePad_zid06_bin"
		err = en.Append(0xb0, 0x50, 0x72, 0x65, 0x50, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.PrePad)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[7] {
		// write "Payload_zid07_bin"
		err = en.Append(0xb1, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Payload)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_2[8] {
		// write "PostPad_zid08_bin"
		err = en.Append(0xb1, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.PostPad)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ClientBlock) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "PayloadBlake3_zid00_str"
		o = append(o, 0xb7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PayloadBlake3)
	}

	if !empty[1] {
		// string "Compression_zid01_str"
		o = append(o, 0xb5, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Compression)
	}

	if !empty[2] {
		// string "WriteCallID_zid02_str"
		o = append(o, 0xb5, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.WriteCallID)
	}

	if !empty[3] {
		// string "WriteTime0_zid03_tim"
		o = append(o, 0xb4, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.WriteTime0)
	}

	if !empty[4] {
		// string "Expires_zid04_tim"
		o = append(o, 0xb1, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Expires)
	}

	if !empty[5] {
		// string "ServerDataBlake3_zid05_str"
		o = append(o, 0xba, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ServerDataBlake3)
	}

	if !empty[6] {
		// string "PrePad_zid06_bin"
		o = append(o, 0xb0, 0x50, 0x72, 0x65, 0x50, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.PrePad)
	}

	if !empty[7] {
		// string "Payload_zid07_bin"
		o = append(o, 0xb1, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Payload)
	}

	if !empty[8] {
		// string "PostPad_zid08_bin"
		o = append(o, 0xb1, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.PostPad)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClientBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ClientBlock) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_d4afe0c74e46574d_5 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_d4afe0c74e46574d_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_d4afe0c74e46574d_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_d4afe0c74e46574d_5 := totalEncodedFields4zgensym_d4afe0c74e46574d_5
	missingFieldsLeft4zgensym_d4afe0c74e46574d_5 := maxFields4zgensym_d4afe0c74e46574d_5 - totalEncodedFields4zgensym_d4afe0c74e46574d_5

	var nextMiss4zgensym_d4afe0c74e46574d_5 int32 = -1
	var found4zgensym_d4afe0c74e46574d_5 [maxFields4zgensym_d4afe0c74e46574d_5]bool
	var curField4zgensym_d4afe0c74e46574d_5 string

doneWithStruct4zgensym_d4afe0c74e46574d_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_d4afe0c74e46574d_5 > 0 || missingFieldsLeft4zgensym_d4afe0c74e46574d_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_d4afe0c74e46574d_5, missingFieldsLeft4zgensym_d4afe0c74e46574d_5, msgp.ShowFound(found4zgensym_d4afe0c74e46574d_5[:]), unmarshalMsgFieldOrder4zgensym_d4afe0c74e46574d_5)
		if encodedFieldsLeft4zgensym_d4afe0c74e46574d_5 > 0 {
			encodedFieldsLeft4zgensym_d4afe0c74e46574d_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_d4afe0c74e46574d_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_d4afe0c74e46574d_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_d4afe0c74e46574d_5 = 0
			}
			for nextMiss4zgensym_d4afe0c74e46574d_5 < maxFields4zgensym_d4afe0c74e46574d_5 && (found4zgensym_d4afe0c74e46574d_5[nextMiss4zgensym_d4afe0c74e46574d_5] || unmarshalMsgFieldSkip4zgensym_d4afe0c74e46574d_5[nextMiss4zgensym_d4afe0c74e46574d_5]) {
				nextMiss4zgensym_d4afe0c74e46574d_5++
			}
			if nextMiss4zgensym_d4afe0c74e46574d_5 == maxFields4zgensym_d4afe0c74e46574d_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_d4afe0c74e46574d_5
			}
			missingFieldsLeft4zgensym_d4afe0c74e46574d_5--
			curField4zgensym_d4afe0c74e46574d_5 = unmarshalMsgFieldOrder4zgensym_d4afe0c74e46574d_5[nextMiss4zgensym_d4afe0c74e46574d_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_d4afe0c74e46574d_5)
		switch curField4zgensym_d4afe0c74e46574d_5 {
		// -- templateUnmarshalMsg ends here --

		case "PayloadBlake3_zid00_str":
			found4zgensym_d4afe0c74e46574d_5[0] = true
			z.PayloadBlake3, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Compression_zid01_str":
			found4zgensym_d4afe0c74e46574d_5[1] = true
			z.Compression, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "WriteCallID_zid02_str":
			found4zgensym_d4afe0c74e46574d_5[2] = true
			z.WriteCallID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "WriteTime0_zid03_tim":
			found4zgensym_d4afe0c74e46574d_5[3] = true
			z.WriteTime0, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Expires_zid04_tim":
			found4zgensym_d4afe0c74e46574d_5[4] = true
			z.Expires, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ServerDataBlake3_zid05_str":
			found4zgensym_d4afe0c74e46574d_5[5] = true
			z.ServerDataBlake3, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PrePad_zid06_bin":
			found4zgensym_d4afe0c74e46574d_5[6] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.PrePad = z.PrePad[:0]
			} else {
				z.PrePad, bts, err = nbs.ReadBytesBytes(bts, z.PrePad)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "Payload_zid07_bin":
			found4zgensym_d4afe0c74e46574d_5[7] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Payload = z.Payload[:0]
			} else {
				z.Payload, bts, err = nbs.ReadBytesBytes(bts, z.Payload)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "PostPad_zid08_bin":
			found4zgensym_d4afe0c74e46574d_5[8] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.PostPad = z.PostPad[:0]
			} else {
				z.PostPad, bts, err = nbs.ReadBytesBytes(bts, z.PostPad)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_d4afe0c74e46574d_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ClientBlock
var unmarshalMsgFieldOrder4zgensym_d4afe0c74e46574d_5 = []string{"PayloadBlake3_zid00_str", "Compression_zid01_str", "WriteCallID_zid02_str", "WriteTime0_zid03_tim", "Expires_zid04_tim", "ServerDataBlake3_zid05_str", "PrePad_zid06_bin", "Payload_zid07_bin", "PostPad_zid08_bin"}

var unmarshalMsgFieldSkip4zgensym_d4afe0c74e46574d_5 = []bool{false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ClientBlock) Msgsize() (s int) {
	s = 1 + 24 + msgp.StringPrefixSize + len(z.PayloadBlake3) + 22 + msgp.StringPrefixSize + len(z.Compression) + 22 + msgp.StringPrefixSize + len(z.WriteCallID) + 21 + msgp.TimeSize + 18 + msgp.TimeSize + 27 + msgp.StringPrefixSize + len(z.ServerDataBlake3) + 17 + msgp.BytesPrefixSize + len(z.PrePad) + 18 + msgp.BytesPrefixSize + len(z.Payload) + 18 + msgp.BytesPrefixSize + len(z.PostPad)
	return
}
func (z *ClientBlock) Gstring() (r string) {
	r = "&ClientBlock{\n"
	r += fmt.Sprintf("   PayloadBlake3: \"%v\",\n", z.PayloadBlake3)
	r += fmt.Sprintf("     Compression: \"%v\",\n", z.Compression)
	r += fmt.Sprintf("     WriteCallID: \"%v\",\n", z.WriteCallID)
	r += fmt.Sprintf("      WriteTime0: %v,\n", z.WriteTime0)
	r += fmt.Sprintf("         Expires: %v,\n", z.Expires)
	r += fmt.Sprintf("ServerDataBlake3: \"%v\",\n", z.ServerDataBlake3)
	r += fmt.Sprintf("          PrePad: %v,\n", z.PrePad)
	r += fmt.Sprintf("         Payload: %v,\n", z.Payload)
	r += fmt.Sprintf("         PostPad: %v,\n", z.PostPad)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ServerBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_d4afe0c74e46574d_7 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_d4afe0c74e46574d_7 uint32
	totalEncodedFields6zgensym_d4afe0c74e46574d_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_d4afe0c74e46574d_7 := totalEncodedFields6zgensym_d4afe0c74e46574d_7
	missingFieldsLeft6zgensym_d4afe0c74e46574d_7 := maxFields6zgensym_d4afe0c74e46574d_7 - totalEncodedFields6zgensym_d4afe0c74e46574d_7

	var nextMiss6zgensym_d4afe0c74e46574d_7 int32 = -1
	var found6zgensym_d4afe0c74e46574d_7 [maxFields6zgensym_d4afe0c74e46574d_7]bool
	var curField6zgensym_d4afe0c74e46574d_7 string

doneWithStruct6zgensym_d4afe0c74e46574d_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_d4afe0c74e46574d_7 > 0 || missingFieldsLeft6zgensym_d4afe0c74e46574d_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_d4afe0c74e46574d_7, missingFieldsLeft6zgensym_d4afe0c74e46574d_7, msgp.ShowFound(found6zgensym_d4afe0c74e46574d_7[:]), decodeMsgFieldOrder6zgensym_d4afe0c74e46574d_7)
		if encodedFieldsLeft6zgensym_d4afe0c74e46574d_7 > 0 {
			encodedFieldsLeft6zgensym_d4afe0c74e46574d_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_d4afe0c74e46574d_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_d4afe0c74e46574d_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_d4afe0c74e46574d_7 = 0
			}
			for nextMiss6zgensym_d4afe0c74e46574d_7 < maxFields6zgensym_d4afe0c74e46574d_7 && (found6zgensym_d4afe0c74e46574d_7[nextMiss6zgensym_d4afe0c74e46574d_7] || decodeMsgFieldSkip6zgensym_d4afe0c74e46574d_7[nextMiss6zgensym_d4afe0c74e46574d_7]) {
				nextMiss6zgensym_d4afe0c74e46574d_7++
			}
			if nextMiss6zgensym_d4afe0c74e46574d_7 == maxFields6zgensym_d4afe0c74e46574d_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_d4afe0c74e46574d_7
			}
			missingFieldsLeft6zgensym_d4afe0c74e46574d_7--
			curField6zgensym_d4afe0c74e46574d_7 = decodeMsgFieldOrder6zgensym_d4afe0c74e46574d_7[nextMiss6zgensym_d4afe0c74e46574d_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_d4afe0c74e46574d_7)
		switch curField6zgensym_d4afe0c74e46574d_7 {
		// -- templateDecodeMsg ends here --

		case "VolumeID_zid00_str":
			found6zgensym_d4afe0c74e46574d_7[0] = true
			z.VolumeID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Beg_zid01_i64":
			found6zgensym_d4afe0c74e46574d_7[1] = true
			z.Beg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Endx_zid02_i64":
			found6zgensym_d4afe0c74e46574d_7[2] = true
			z.Endx, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ServerData_zid03_bin":
			found6zgensym_d4afe0c74e46574d_7[3] = true
			z.ServerData, err = dc.ReadBytes(z.ServerData)
			if err != nil {
				return
			}
		case "ServerDataBlake3_zid04_str":
			found6zgensym_d4afe0c74e46574d_7[4] = true
			z.ServerDataBlake3, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_d4afe0c74e46574d_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ServerBlock
var decodeMsgFieldOrder6zgensym_d4afe0c74e46574d_7 = []string{"VolumeID_zid00_str", "Beg_zid01_i64", "Endx_zid02_i64", "ServerData_zid03_bin", "ServerDataBlake3_zid04_str"}

var decodeMsgFieldSkip6zgensym_d4afe0c74e46574d_7 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ServerBlock) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.VolumeID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Beg == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Endx == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.ServerData) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.ServerDataBlake3) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ServerBlock) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_d4afe0c74e46574d_8 [5]bool
	fieldsInUse_zgensym_d4afe0c74e46574d_9 := z.fieldsNotEmpty(empty_zgensym_d4afe0c74e46574d_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_d4afe0c74e46574d_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ServerBlock'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_d4afe0c74e46574d_8[0] {
		// write "VolumeID_zid00_str"
		err = en.Append(0xb2, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.VolumeID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_8[1] {
		// write "Beg_zid01_i64"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_8[2] {
		// write "Endx_zid02_i64"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Endx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_8[3] {
		// write "ServerData_zid03_bin"
		err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.ServerData)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_d4afe0c74e46574d_8[4] {
		// write "ServerDataBlake3_zid04_str"
		err = en.Append(0xba, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ServerDataBlake3)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ServerBlock) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "VolumeID_zid00_str"
		o = append(o, 0xb2, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.VolumeID)
	}

	if !empty[1] {
		// string "Beg_zid01_i64"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Beg)
	}

	if !empty[2] {
		// string "Endx_zid02_i64"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Endx)
	}

	if !empty[3] {
		// string "ServerData_zid03_bin"
		o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.ServerData)
	}

	if !empty[4] {
		// string "ServerDataBlake3_zid04_str"
		o = append(o, 0xba, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ServerDataBlake3)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ServerBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ServerBlock) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_d4afe0c74e46574d_11 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_d4afe0c74e46574d_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_d4afe0c74e46574d_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_d4afe0c74e46574d_11 := totalEncodedFields10zgensym_d4afe0c74e46574d_11
	missingFieldsLeft10zgensym_d4afe0c74e46574d_11 := maxFields10zgensym_d4afe0c74e46574d_11 - totalEncodedFields10zgensym_d4afe0c74e46574d_11

	var nextMiss10zgensym_d4afe0c74e46574d_11 int32 = -1
	var found10zgensym_d4afe0c74e46574d_11 [maxFields10zgensym_d4afe0c74e46574d_11]bool
	var curField10zgensym_d4afe0c74e46574d_11 string

doneWithStruct10zgensym_d4afe0c74e46574d_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_d4afe0c74e46574d_11 > 0 || missingFieldsLeft10zgensym_d4afe0c74e46574d_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_d4afe0c74e46574d_11, missingFieldsLeft10zgensym_d4afe0c74e46574d_11, msgp.ShowFound(found10zgensym_d4afe0c74e46574d_11[:]), unmarshalMsgFieldOrder10zgensym_d4afe0c74e46574d_11)
		if encodedFieldsLeft10zgensym_d4afe0c74e46574d_11 > 0 {
			encodedFieldsLeft10zgensym_d4afe0c74e46574d_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_d4afe0c74e46574d_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_d4afe0c74e46574d_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_d4afe0c74e46574d_11 = 0
			}
			for nextMiss10zgensym_d4afe0c74e46574d_11 < maxFields10zgensym_d4afe0c74e46574d_11 && (found10zgensym_d4afe0c74e46574d_11[nextMiss10zgensym_d4afe0c74e46574d_11] || unmarshalMsgFieldSkip10zgensym_d4afe0c74e46574d_11[nextMiss10zgensym_d4afe0c74e46574d_11]) {
				nextMiss10zgensym_d4afe0c74e46574d_11++
			}
			if nextMiss10zgensym_d4afe0c74e46574d_11 == maxFields10zgensym_d4afe0c74e46574d_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_d4afe0c74e46574d_11
			}
			missingFieldsLeft10zgensym_d4afe0c74e46574d_11--
			curField10zgensym_d4afe0c74e46574d_11 = unmarshalMsgFieldOrder10zgensym_d4afe0c74e46574d_11[nextMiss10zgensym_d4afe0c74e46574d_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_d4afe0c74e46574d_11)
		switch curField10zgensym_d4afe0c74e46574d_11 {
		// -- templateUnmarshalMsg ends here --

		case "VolumeID_zid00_str":
			found10zgensym_d4afe0c74e46574d_11[0] = true
			z.VolumeID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Beg_zid01_i64":
			found10zgensym_d4afe0c74e46574d_11[1] = true
			z.Beg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid02_i64":
			found10zgensym_d4afe0c74e46574d_11[2] = true
			z.Endx, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ServerData_zid03_bin":
			found10zgensym_d4afe0c74e46574d_11[3] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.ServerData = z.ServerData[:0]
			} else {
				z.ServerData, bts, err = nbs.ReadBytesBytes(bts, z.ServerData)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "ServerDataBlake3_zid04_str":
			found10zgensym_d4afe0c74e46574d_11[4] = true
			z.ServerDataBlake3, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_d4afe0c74e46574d_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ServerBlock
var unmarshalMsgFieldOrder10zgensym_d4afe0c74e46574d_11 = []string{"VolumeID_zid00_str", "Beg_zid01_i64", "Endx_zid02_i64", "ServerData_zid03_bin", "ServerDataBlake3_zid04_str"}

var unmarshalMsgFieldSkip10zgensym_d4afe0c74e46574d_11 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ServerBlock) Msgsize() (s int) {
	s = 1 + 19 + msgp.StringPrefixSize + len(z.VolumeID) + 14 + msgp.Int64Size + 15 + msgp.Int64Size + 21 + msgp.BytesPrefixSize + len(z.ServerData) + 27 + msgp.StringPrefixSize + len(z.ServerDataBlake3)
	return
}
func (z *ServerBlock) Gstring() (r string) {
	r = "&ServerBlock{\n"
	r += fmt.Sprintf("        VolumeID: \"%v\",\n", z.VolumeID)
	r += fmt.Sprintf("             Beg: %v,\n", z.Beg)
	r += fmt.Sprintf("            Endx: %v,\n", z.Endx)
	r += fmt.Sprintf("      ServerData: %v,\n", z.ServerData)
	r += fmt.Sprintf("ServerDataBlake3: \"%v\",\n", z.ServerDataBlake3)
	r += "}\n"
	return
}
