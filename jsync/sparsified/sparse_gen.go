// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package sparsified

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SparseSpan) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_9448d11fab5a6b17_1 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_9448d11fab5a6b17_1 uint32
	totalEncodedFields0zgensym_9448d11fab5a6b17_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_9448d11fab5a6b17_1 := totalEncodedFields0zgensym_9448d11fab5a6b17_1
	missingFieldsLeft0zgensym_9448d11fab5a6b17_1 := maxFields0zgensym_9448d11fab5a6b17_1 - totalEncodedFields0zgensym_9448d11fab5a6b17_1

	var nextMiss0zgensym_9448d11fab5a6b17_1 int32 = -1
	var found0zgensym_9448d11fab5a6b17_1 [maxFields0zgensym_9448d11fab5a6b17_1]bool
	var curField0zgensym_9448d11fab5a6b17_1 string

doneWithStruct0zgensym_9448d11fab5a6b17_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_9448d11fab5a6b17_1 > 0 || missingFieldsLeft0zgensym_9448d11fab5a6b17_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_9448d11fab5a6b17_1, missingFieldsLeft0zgensym_9448d11fab5a6b17_1, msgp.ShowFound(found0zgensym_9448d11fab5a6b17_1[:]), decodeMsgFieldOrder0zgensym_9448d11fab5a6b17_1)
		if encodedFieldsLeft0zgensym_9448d11fab5a6b17_1 > 0 {
			encodedFieldsLeft0zgensym_9448d11fab5a6b17_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_9448d11fab5a6b17_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_9448d11fab5a6b17_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_9448d11fab5a6b17_1 = 0
			}
			for nextMiss0zgensym_9448d11fab5a6b17_1 < maxFields0zgensym_9448d11fab5a6b17_1 && (found0zgensym_9448d11fab5a6b17_1[nextMiss0zgensym_9448d11fab5a6b17_1] || decodeMsgFieldSkip0zgensym_9448d11fab5a6b17_1[nextMiss0zgensym_9448d11fab5a6b17_1]) {
				nextMiss0zgensym_9448d11fab5a6b17_1++
			}
			if nextMiss0zgensym_9448d11fab5a6b17_1 == maxFields0zgensym_9448d11fab5a6b17_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_9448d11fab5a6b17_1
			}
			missingFieldsLeft0zgensym_9448d11fab5a6b17_1--
			curField0zgensym_9448d11fab5a6b17_1 = decodeMsgFieldOrder0zgensym_9448d11fab5a6b17_1[nextMiss0zgensym_9448d11fab5a6b17_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_9448d11fab5a6b17_1)
		switch curField0zgensym_9448d11fab5a6b17_1 {
		// -- templateDecodeMsg ends here --

		case "IsHole_zid00_boo":
			found0zgensym_9448d11fab5a6b17_1[0] = true
			z.IsHole, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "IsUnwrittenPrealloc_zid01_boo":
			found0zgensym_9448d11fab5a6b17_1[1] = true
			z.IsUnwrittenPrealloc, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Beg_zid02_i64":
			found0zgensym_9448d11fab5a6b17_1[2] = true
			z.Beg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Endx_zid03_i64":
			found0zgensym_9448d11fab5a6b17_1[3] = true
			z.Endx, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Flags_zid04_u32":
			found0zgensym_9448d11fab5a6b17_1[4] = true
			z.Flags, err = dc.ReadUint32()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_9448d11fab5a6b17_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SparseSpan
var decodeMsgFieldOrder0zgensym_9448d11fab5a6b17_1 = []string{"IsHole_zid00_boo", "IsUnwrittenPrealloc_zid01_boo", "Beg_zid02_i64", "Endx_zid03_i64", "Flags_zid04_u32"}

var decodeMsgFieldSkip0zgensym_9448d11fab5a6b17_1 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *SparseSpan) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (!z.IsHole) // bool, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsUnwrittenPrealloc) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Beg == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Endx == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Flags == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *SparseSpan) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9448d11fab5a6b17_2 [5]bool
	fieldsInUse_zgensym_9448d11fab5a6b17_3 := z.fieldsNotEmpty(empty_zgensym_9448d11fab5a6b17_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9448d11fab5a6b17_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SparseSpan'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x53, 0x70, 0x61, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_9448d11fab5a6b17_2[0] {
		// write "IsHole_zid00_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x48, 0x6f, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsHole)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9448d11fab5a6b17_2[1] {
		// write "IsUnwrittenPrealloc_zid01_boo"
		err = en.Append(0xbd, 0x49, 0x73, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsUnwrittenPrealloc)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9448d11fab5a6b17_2[2] {
		// write "Beg_zid02_i64"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9448d11fab5a6b17_2[3] {
		// write "Endx_zid03_i64"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Endx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_9448d11fab5a6b17_2[4] {
		// write "Flags_zid04_u32"
		err = en.Append(0xaf, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.Flags)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SparseSpan) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "IsHole_zid00_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x48, 0x6f, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsHole)
	}

	if !empty[1] {
		// string "IsUnwrittenPrealloc_zid01_boo"
		o = append(o, 0xbd, 0x49, 0x73, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsUnwrittenPrealloc)
	}

	if !empty[2] {
		// string "Beg_zid02_i64"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Beg)
	}

	if !empty[3] {
		// string "Endx_zid03_i64"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Endx)
	}

	if !empty[4] {
		// string "Flags_zid04_u32"
		o = append(o, 0xaf, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.Flags)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SparseSpan) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SparseSpan) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_9448d11fab5a6b17_5 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_9448d11fab5a6b17_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_9448d11fab5a6b17_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_9448d11fab5a6b17_5 := totalEncodedFields4zgensym_9448d11fab5a6b17_5
	missingFieldsLeft4zgensym_9448d11fab5a6b17_5 := maxFields4zgensym_9448d11fab5a6b17_5 - totalEncodedFields4zgensym_9448d11fab5a6b17_5

	var nextMiss4zgensym_9448d11fab5a6b17_5 int32 = -1
	var found4zgensym_9448d11fab5a6b17_5 [maxFields4zgensym_9448d11fab5a6b17_5]bool
	var curField4zgensym_9448d11fab5a6b17_5 string

doneWithStruct4zgensym_9448d11fab5a6b17_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_9448d11fab5a6b17_5 > 0 || missingFieldsLeft4zgensym_9448d11fab5a6b17_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_9448d11fab5a6b17_5, missingFieldsLeft4zgensym_9448d11fab5a6b17_5, msgp.ShowFound(found4zgensym_9448d11fab5a6b17_5[:]), unmarshalMsgFieldOrder4zgensym_9448d11fab5a6b17_5)
		if encodedFieldsLeft4zgensym_9448d11fab5a6b17_5 > 0 {
			encodedFieldsLeft4zgensym_9448d11fab5a6b17_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_9448d11fab5a6b17_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_9448d11fab5a6b17_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_9448d11fab5a6b17_5 = 0
			}
			for nextMiss4zgensym_9448d11fab5a6b17_5 < maxFields4zgensym_9448d11fab5a6b17_5 && (found4zgensym_9448d11fab5a6b17_5[nextMiss4zgensym_9448d11fab5a6b17_5] || unmarshalMsgFieldSkip4zgensym_9448d11fab5a6b17_5[nextMiss4zgensym_9448d11fab5a6b17_5]) {
				nextMiss4zgensym_9448d11fab5a6b17_5++
			}
			if nextMiss4zgensym_9448d11fab5a6b17_5 == maxFields4zgensym_9448d11fab5a6b17_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_9448d11fab5a6b17_5
			}
			missingFieldsLeft4zgensym_9448d11fab5a6b17_5--
			curField4zgensym_9448d11fab5a6b17_5 = unmarshalMsgFieldOrder4zgensym_9448d11fab5a6b17_5[nextMiss4zgensym_9448d11fab5a6b17_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_9448d11fab5a6b17_5)
		switch curField4zgensym_9448d11fab5a6b17_5 {
		// -- templateUnmarshalMsg ends here --

		case "IsHole_zid00_boo":
			found4zgensym_9448d11fab5a6b17_5[0] = true
			z.IsHole, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "IsUnwrittenPrealloc_zid01_boo":
			found4zgensym_9448d11fab5a6b17_5[1] = true
			z.IsUnwrittenPrealloc, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Beg_zid02_i64":
			found4zgensym_9448d11fab5a6b17_5[2] = true
			z.Beg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid03_i64":
			found4zgensym_9448d11fab5a6b17_5[3] = true
			z.Endx, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Flags_zid04_u32":
			found4zgensym_9448d11fab5a6b17_5[4] = true
			z.Flags, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_9448d11fab5a6b17_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SparseSpan
var unmarshalMsgFieldOrder4zgensym_9448d11fab5a6b17_5 = []string{"IsHole_zid00_boo", "IsUnwrittenPrealloc_zid01_boo", "Beg_zid02_i64", "Endx_zid03_i64", "Flags_zid04_u32"}

var unmarshalMsgFieldSkip4zgensym_9448d11fab5a6b17_5 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SparseSpan) Msgsize() (s int) {
	s = 1 + 17 + msgp.BoolSize + 30 + msgp.BoolSize + 14 + msgp.Int64Size + 15 + msgp.Int64Size + 16 + msgp.Uint32Size
	return
}
func (z *SparseSpan) Gstring() (r string) {
	r = "&SparseSpan{\n"
	r += fmt.Sprintf("             IsHole: %v,\n", z.IsHole)
	r += fmt.Sprintf("IsUnwrittenPrealloc: %v,\n", z.IsUnwrittenPrealloc)
	r += fmt.Sprintf("                Beg: %v,\n", z.Beg)
	r += fmt.Sprintf("               Endx: %v,\n", z.Endx)
	r += fmt.Sprintf("              Flags: %v,\n", z.Flags)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SparseSpans) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields7zgensym_9448d11fab5a6b17_8 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields7zgensym_9448d11fab5a6b17_8 uint32
	totalEncodedFields7zgensym_9448d11fab5a6b17_8, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft7zgensym_9448d11fab5a6b17_8 := totalEncodedFields7zgensym_9448d11fab5a6b17_8
	missingFieldsLeft7zgensym_9448d11fab5a6b17_8 := maxFields7zgensym_9448d11fab5a6b17_8 - totalEncodedFields7zgensym_9448d11fab5a6b17_8

	var nextMiss7zgensym_9448d11fab5a6b17_8 int32 = -1
	var found7zgensym_9448d11fab5a6b17_8 [maxFields7zgensym_9448d11fab5a6b17_8]bool
	var curField7zgensym_9448d11fab5a6b17_8 string

doneWithStruct7zgensym_9448d11fab5a6b17_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_9448d11fab5a6b17_8 > 0 || missingFieldsLeft7zgensym_9448d11fab5a6b17_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_9448d11fab5a6b17_8, missingFieldsLeft7zgensym_9448d11fab5a6b17_8, msgp.ShowFound(found7zgensym_9448d11fab5a6b17_8[:]), decodeMsgFieldOrder7zgensym_9448d11fab5a6b17_8)
		if encodedFieldsLeft7zgensym_9448d11fab5a6b17_8 > 0 {
			encodedFieldsLeft7zgensym_9448d11fab5a6b17_8--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField7zgensym_9448d11fab5a6b17_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_9448d11fab5a6b17_8 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss7zgensym_9448d11fab5a6b17_8 = 0
			}
			for nextMiss7zgensym_9448d11fab5a6b17_8 < maxFields7zgensym_9448d11fab5a6b17_8 && (found7zgensym_9448d11fab5a6b17_8[nextMiss7zgensym_9448d11fab5a6b17_8] || decodeMsgFieldSkip7zgensym_9448d11fab5a6b17_8[nextMiss7zgensym_9448d11fab5a6b17_8]) {
				nextMiss7zgensym_9448d11fab5a6b17_8++
			}
			if nextMiss7zgensym_9448d11fab5a6b17_8 == maxFields7zgensym_9448d11fab5a6b17_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_9448d11fab5a6b17_8
			}
			missingFieldsLeft7zgensym_9448d11fab5a6b17_8--
			curField7zgensym_9448d11fab5a6b17_8 = decodeMsgFieldOrder7zgensym_9448d11fab5a6b17_8[nextMiss7zgensym_9448d11fab5a6b17_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_9448d11fab5a6b17_8)
		switch curField7zgensym_9448d11fab5a6b17_8 {
		// -- templateDecodeMsg ends here --

		case "Slc_zid00_slc":
			found7zgensym_9448d11fab5a6b17_8[0] = true
			var zgensym_9448d11fab5a6b17_9 uint32
			zgensym_9448d11fab5a6b17_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Slc) >= int(zgensym_9448d11fab5a6b17_9) {
				z.Slc = (z.Slc)[:zgensym_9448d11fab5a6b17_9]
			} else {
				z.Slc = make([]SparseSpan, zgensym_9448d11fab5a6b17_9)
			}
			for zgensym_9448d11fab5a6b17_6 := range z.Slc {
				err = z.Slc[zgensym_9448d11fab5a6b17_6].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_9448d11fab5a6b17_8 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SparseSpans
var decodeMsgFieldOrder7zgensym_9448d11fab5a6b17_8 = []string{"Slc_zid00_slc"}

var decodeMsgFieldSkip7zgensym_9448d11fab5a6b17_8 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *SparseSpans) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Slc) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *SparseSpans) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_9448d11fab5a6b17_10 [1]bool
	fieldsInUse_zgensym_9448d11fab5a6b17_11 := z.fieldsNotEmpty(empty_zgensym_9448d11fab5a6b17_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_9448d11fab5a6b17_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SparseSpans'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_9448d11fab5a6b17_10[0] {
		// write "Slc_zid00_slc"
		err = en.Append(0xad, 0x53, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Slc)))
		if err != nil {
			return
		}
		for zgensym_9448d11fab5a6b17_6 := range z.Slc {
			err = z.Slc[zgensym_9448d11fab5a6b17_6].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SparseSpans) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Slc_zid00_slc"
		o = append(o, 0xad, 0x53, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Slc)))
		for zgensym_9448d11fab5a6b17_6 := range z.Slc {
			o, err = z.Slc[zgensym_9448d11fab5a6b17_6].MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SparseSpans) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SparseSpans) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields12zgensym_9448d11fab5a6b17_13 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields12zgensym_9448d11fab5a6b17_13 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields12zgensym_9448d11fab5a6b17_13, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft12zgensym_9448d11fab5a6b17_13 := totalEncodedFields12zgensym_9448d11fab5a6b17_13
	missingFieldsLeft12zgensym_9448d11fab5a6b17_13 := maxFields12zgensym_9448d11fab5a6b17_13 - totalEncodedFields12zgensym_9448d11fab5a6b17_13

	var nextMiss12zgensym_9448d11fab5a6b17_13 int32 = -1
	var found12zgensym_9448d11fab5a6b17_13 [maxFields12zgensym_9448d11fab5a6b17_13]bool
	var curField12zgensym_9448d11fab5a6b17_13 string

doneWithStruct12zgensym_9448d11fab5a6b17_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_9448d11fab5a6b17_13 > 0 || missingFieldsLeft12zgensym_9448d11fab5a6b17_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_9448d11fab5a6b17_13, missingFieldsLeft12zgensym_9448d11fab5a6b17_13, msgp.ShowFound(found12zgensym_9448d11fab5a6b17_13[:]), unmarshalMsgFieldOrder12zgensym_9448d11fab5a6b17_13)
		if encodedFieldsLeft12zgensym_9448d11fab5a6b17_13 > 0 {
			encodedFieldsLeft12zgensym_9448d11fab5a6b17_13--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField12zgensym_9448d11fab5a6b17_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_9448d11fab5a6b17_13 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss12zgensym_9448d11fab5a6b17_13 = 0
			}
			for nextMiss12zgensym_9448d11fab5a6b17_13 < maxFields12zgensym_9448d11fab5a6b17_13 && (found12zgensym_9448d11fab5a6b17_13[nextMiss12zgensym_9448d11fab5a6b17_13] || unmarshalMsgFieldSkip12zgensym_9448d11fab5a6b17_13[nextMiss12zgensym_9448d11fab5a6b17_13]) {
				nextMiss12zgensym_9448d11fab5a6b17_13++
			}
			if nextMiss12zgensym_9448d11fab5a6b17_13 == maxFields12zgensym_9448d11fab5a6b17_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_9448d11fab5a6b17_13
			}
			missingFieldsLeft12zgensym_9448d11fab5a6b17_13--
			curField12zgensym_9448d11fab5a6b17_13 = unmarshalMsgFieldOrder12zgensym_9448d11fab5a6b17_13[nextMiss12zgensym_9448d11fab5a6b17_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_9448d11fab5a6b17_13)
		switch curField12zgensym_9448d11fab5a6b17_13 {
		// -- templateUnmarshalMsg ends here --

		case "Slc_zid00_slc":
			found12zgensym_9448d11fab5a6b17_13[0] = true
			if nbs.AlwaysNil {
				(z.Slc) = (z.Slc)[:0]
			} else {

				var zgensym_9448d11fab5a6b17_14 uint32
				zgensym_9448d11fab5a6b17_14, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Slc) >= int(zgensym_9448d11fab5a6b17_14) {
					z.Slc = (z.Slc)[:zgensym_9448d11fab5a6b17_14]
				} else {
					z.Slc = make([]SparseSpan, zgensym_9448d11fab5a6b17_14)
				}
				for zgensym_9448d11fab5a6b17_6 := range z.Slc {
					bts, err = z.Slc[zgensym_9448d11fab5a6b17_6].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_9448d11fab5a6b17_13 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SparseSpans
var unmarshalMsgFieldOrder12zgensym_9448d11fab5a6b17_13 = []string{"Slc_zid00_slc"}

var unmarshalMsgFieldSkip12zgensym_9448d11fab5a6b17_13 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SparseSpans) Msgsize() (s int) {
	s = 1 + 14 + msgp.ArrayHeaderSize
	for zgensym_9448d11fab5a6b17_6 := range z.Slc {
		s += z.Slc[zgensym_9448d11fab5a6b17_6].Msgsize()
	}
	return
}
func (z *SparseSpans) Gstring() (r string) {
	r = "&SparseSpans{\n"
	r += fmt.Sprintf("Slc: %v,\n", z.Slc)
	r += "}\n"
	return
}
