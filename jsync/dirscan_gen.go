// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package jsync

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *File) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_b52703b292455617_1 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_b52703b292455617_1 uint32
	totalEncodedFields0zgensym_b52703b292455617_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_b52703b292455617_1 := totalEncodedFields0zgensym_b52703b292455617_1
	missingFieldsLeft0zgensym_b52703b292455617_1 := maxFields0zgensym_b52703b292455617_1 - totalEncodedFields0zgensym_b52703b292455617_1

	var nextMiss0zgensym_b52703b292455617_1 int32 = -1
	var found0zgensym_b52703b292455617_1 [maxFields0zgensym_b52703b292455617_1]bool
	var curField0zgensym_b52703b292455617_1 string

doneWithStruct0zgensym_b52703b292455617_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_b52703b292455617_1 > 0 || missingFieldsLeft0zgensym_b52703b292455617_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_b52703b292455617_1, missingFieldsLeft0zgensym_b52703b292455617_1, msgp.ShowFound(found0zgensym_b52703b292455617_1[:]), decodeMsgFieldOrder0zgensym_b52703b292455617_1)
		if encodedFieldsLeft0zgensym_b52703b292455617_1 > 0 {
			encodedFieldsLeft0zgensym_b52703b292455617_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_b52703b292455617_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_b52703b292455617_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_b52703b292455617_1 = 0
			}
			for nextMiss0zgensym_b52703b292455617_1 < maxFields0zgensym_b52703b292455617_1 && (found0zgensym_b52703b292455617_1[nextMiss0zgensym_b52703b292455617_1] || decodeMsgFieldSkip0zgensym_b52703b292455617_1[nextMiss0zgensym_b52703b292455617_1]) {
				nextMiss0zgensym_b52703b292455617_1++
			}
			if nextMiss0zgensym_b52703b292455617_1 == maxFields0zgensym_b52703b292455617_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_b52703b292455617_1
			}
			missingFieldsLeft0zgensym_b52703b292455617_1--
			curField0zgensym_b52703b292455617_1 = decodeMsgFieldOrder0zgensym_b52703b292455617_1[nextMiss0zgensym_b52703b292455617_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_b52703b292455617_1)
		switch curField0zgensym_b52703b292455617_1 {
		// -- templateDecodeMsg ends here --

		case "Path_zid00_str":
			found0zgensym_b52703b292455617_1[0] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Size_zid01_i64":
			found0zgensym_b52703b292455617_1[1] = true
			z.Size, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FileMode_zid02_u32":
			found0zgensym_b52703b292455617_1[2] = true
			z.FileMode, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "ModTime_zid03_tim":
			found0zgensym_b52703b292455617_1[3] = true
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "IsSymLink_zid04_boo":
			found0zgensym_b52703b292455617_1[4] = true
			z.IsSymLink, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "SymLinkTarget_zid05_str":
			found0zgensym_b52703b292455617_1[5] = true
			z.SymLinkTarget, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Follow_zid06_boo":
			found0zgensym_b52703b292455617_1[6] = true
			z.Follow, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_b52703b292455617_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of File
var decodeMsgFieldOrder0zgensym_b52703b292455617_1 = []string{"Path_zid00_str", "Size_zid01_i64", "FileMode_zid02_u32", "ModTime_zid03_tim", "IsSymLink_zid04_boo", "SymLinkTarget_zid05_str", "Follow_zid06_boo"}

var decodeMsgFieldSkip0zgensym_b52703b292455617_1 = []bool{false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *File) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (len(z.Path) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Size == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.FileMode == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ModTime.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (!z.IsSymLink) // bool, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.SymLinkTarget) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (!z.Follow) // bool, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *File) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_2 [7]bool
	fieldsInUse_zgensym_b52703b292455617_3 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'File'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x69, 0x6c, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_2[0] {
		// write "Path_zid00_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[1] {
		// write "Size_zid01_i64"
		err = en.Append(0xae, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Size)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[2] {
		// write "FileMode_zid02_u32"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileMode)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[3] {
		// write "ModTime_zid03_tim"
		err = en.Append(0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[4] {
		// write "IsSymLink_zid04_boo"
		err = en.Append(0xb3, 0x49, 0x73, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsSymLink)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[5] {
		// write "SymLinkTarget_zid05_str"
		err = en.Append(0xb7, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SymLinkTarget)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[6] {
		// write "Follow_zid06_boo"
		err = en.Append(0xb0, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Follow)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *File) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Path_zid00_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[1] {
		// string "Size_zid01_i64"
		o = append(o, 0xae, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Size)
	}

	if !empty[2] {
		// string "FileMode_zid02_u32"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileMode)
	}

	if !empty[3] {
		// string "ModTime_zid03_tim"
		o = append(o, 0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ModTime)
	}

	if !empty[4] {
		// string "IsSymLink_zid04_boo"
		o = append(o, 0xb3, 0x49, 0x73, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsSymLink)
	}

	if !empty[5] {
		// string "SymLinkTarget_zid05_str"
		o = append(o, 0xb7, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SymLinkTarget)
	}

	if !empty[6] {
		// string "Follow_zid06_boo"
		o = append(o, 0xb0, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Follow)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *File) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *File) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_b52703b292455617_5 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_b52703b292455617_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_b52703b292455617_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_b52703b292455617_5 := totalEncodedFields4zgensym_b52703b292455617_5
	missingFieldsLeft4zgensym_b52703b292455617_5 := maxFields4zgensym_b52703b292455617_5 - totalEncodedFields4zgensym_b52703b292455617_5

	var nextMiss4zgensym_b52703b292455617_5 int32 = -1
	var found4zgensym_b52703b292455617_5 [maxFields4zgensym_b52703b292455617_5]bool
	var curField4zgensym_b52703b292455617_5 string

doneWithStruct4zgensym_b52703b292455617_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_b52703b292455617_5 > 0 || missingFieldsLeft4zgensym_b52703b292455617_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_b52703b292455617_5, missingFieldsLeft4zgensym_b52703b292455617_5, msgp.ShowFound(found4zgensym_b52703b292455617_5[:]), unmarshalMsgFieldOrder4zgensym_b52703b292455617_5)
		if encodedFieldsLeft4zgensym_b52703b292455617_5 > 0 {
			encodedFieldsLeft4zgensym_b52703b292455617_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_b52703b292455617_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_b52703b292455617_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_b52703b292455617_5 = 0
			}
			for nextMiss4zgensym_b52703b292455617_5 < maxFields4zgensym_b52703b292455617_5 && (found4zgensym_b52703b292455617_5[nextMiss4zgensym_b52703b292455617_5] || unmarshalMsgFieldSkip4zgensym_b52703b292455617_5[nextMiss4zgensym_b52703b292455617_5]) {
				nextMiss4zgensym_b52703b292455617_5++
			}
			if nextMiss4zgensym_b52703b292455617_5 == maxFields4zgensym_b52703b292455617_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_b52703b292455617_5
			}
			missingFieldsLeft4zgensym_b52703b292455617_5--
			curField4zgensym_b52703b292455617_5 = unmarshalMsgFieldOrder4zgensym_b52703b292455617_5[nextMiss4zgensym_b52703b292455617_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_b52703b292455617_5)
		switch curField4zgensym_b52703b292455617_5 {
		// -- templateUnmarshalMsg ends here --

		case "Path_zid00_str":
			found4zgensym_b52703b292455617_5[0] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Size_zid01_i64":
			found4zgensym_b52703b292455617_5[1] = true
			z.Size, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FileMode_zid02_u32":
			found4zgensym_b52703b292455617_5[2] = true
			z.FileMode, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "ModTime_zid03_tim":
			found4zgensym_b52703b292455617_5[3] = true
			z.ModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "IsSymLink_zid04_boo":
			found4zgensym_b52703b292455617_5[4] = true
			z.IsSymLink, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "SymLinkTarget_zid05_str":
			found4zgensym_b52703b292455617_5[5] = true
			z.SymLinkTarget, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Follow_zid06_boo":
			found4zgensym_b52703b292455617_5[6] = true
			z.Follow, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_b52703b292455617_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of File
var unmarshalMsgFieldOrder4zgensym_b52703b292455617_5 = []string{"Path_zid00_str", "Size_zid01_i64", "FileMode_zid02_u32", "ModTime_zid03_tim", "IsSymLink_zid04_boo", "SymLinkTarget_zid05_str", "Follow_zid06_boo"}

var unmarshalMsgFieldSkip4zgensym_b52703b292455617_5 = []bool{false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *File) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Path) + 15 + msgp.Int64Size + 19 + msgp.Uint32Size + 18 + msgp.TimeSize + 20 + msgp.BoolSize + 24 + msgp.StringPrefixSize + len(z.SymLinkTarget) + 17 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PackOfDirs) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields7zgensym_b52703b292455617_8 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields7zgensym_b52703b292455617_8 uint32
	totalEncodedFields7zgensym_b52703b292455617_8, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft7zgensym_b52703b292455617_8 := totalEncodedFields7zgensym_b52703b292455617_8
	missingFieldsLeft7zgensym_b52703b292455617_8 := maxFields7zgensym_b52703b292455617_8 - totalEncodedFields7zgensym_b52703b292455617_8

	var nextMiss7zgensym_b52703b292455617_8 int32 = -1
	var found7zgensym_b52703b292455617_8 [maxFields7zgensym_b52703b292455617_8]bool
	var curField7zgensym_b52703b292455617_8 string

doneWithStruct7zgensym_b52703b292455617_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_b52703b292455617_8 > 0 || missingFieldsLeft7zgensym_b52703b292455617_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_b52703b292455617_8, missingFieldsLeft7zgensym_b52703b292455617_8, msgp.ShowFound(found7zgensym_b52703b292455617_8[:]), decodeMsgFieldOrder7zgensym_b52703b292455617_8)
		if encodedFieldsLeft7zgensym_b52703b292455617_8 > 0 {
			encodedFieldsLeft7zgensym_b52703b292455617_8--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField7zgensym_b52703b292455617_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_b52703b292455617_8 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss7zgensym_b52703b292455617_8 = 0
			}
			for nextMiss7zgensym_b52703b292455617_8 < maxFields7zgensym_b52703b292455617_8 && (found7zgensym_b52703b292455617_8[nextMiss7zgensym_b52703b292455617_8] || decodeMsgFieldSkip7zgensym_b52703b292455617_8[nextMiss7zgensym_b52703b292455617_8]) {
				nextMiss7zgensym_b52703b292455617_8++
			}
			if nextMiss7zgensym_b52703b292455617_8 == maxFields7zgensym_b52703b292455617_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_b52703b292455617_8
			}
			missingFieldsLeft7zgensym_b52703b292455617_8--
			curField7zgensym_b52703b292455617_8 = decodeMsgFieldOrder7zgensym_b52703b292455617_8[nextMiss7zgensym_b52703b292455617_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_b52703b292455617_8)
		switch curField7zgensym_b52703b292455617_8 {
		// -- templateDecodeMsg ends here --

		case "Pack_zid00_slc":
			found7zgensym_b52703b292455617_8[0] = true
			var zgensym_b52703b292455617_9 uint32
			zgensym_b52703b292455617_9, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pack) >= int(zgensym_b52703b292455617_9) {
				z.Pack = (z.Pack)[:zgensym_b52703b292455617_9]
			} else {
				z.Pack = make([]*File, zgensym_b52703b292455617_9)
			}
			for zgensym_b52703b292455617_6 := range z.Pack {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Pack[zgensym_b52703b292455617_6] != nil {
						dc.PushAlwaysNil()
						err = z.Pack[zgensym_b52703b292455617_6].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Pack[zgensym_b52703b292455617_6] == nil {
						z.Pack[zgensym_b52703b292455617_6] = new(File)
					}
					dc.DedupIndexEachPtr(z.Pack[zgensym_b52703b292455617_6])

					err = z.Pack[zgensym_b52703b292455617_6].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "IsLast_zid01_boo":
			found7zgensym_b52703b292455617_8[1] = true
			z.IsLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_b52703b292455617_8 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfDirs
var decodeMsgFieldOrder7zgensym_b52703b292455617_8 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var decodeMsgFieldSkip7zgensym_b52703b292455617_8 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PackOfDirs) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Pack) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsLast) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PackOfDirs) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_10 [2]bool
	fieldsInUse_zgensym_b52703b292455617_11 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PackOfDirs'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x44, 0x69, 0x72, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_10[0] {
		// write "Pack_zid00_slc"
		err = en.Append(0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Pack)))
		if err != nil {
			return
		}
		for zgensym_b52703b292455617_6 := range z.Pack {
			// gPtr.encodeGen():

			if z.Pack[zgensym_b52703b292455617_6] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Pack[zgensym_b52703b292455617_6].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_b52703b292455617_10[1] {
		// write "IsLast_zid01_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLast)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackOfDirs) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Pack_zid00_slc"
		o = append(o, 0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pack)))
		for zgensym_b52703b292455617_6 := range z.Pack {
			// marshalGen.gPtr()

			if z.Pack[zgensym_b52703b292455617_6] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Pack[zgensym_b52703b292455617_6].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "IsLast_zid01_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLast)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackOfDirs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PackOfDirs) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields12zgensym_b52703b292455617_13 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields12zgensym_b52703b292455617_13 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields12zgensym_b52703b292455617_13, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft12zgensym_b52703b292455617_13 := totalEncodedFields12zgensym_b52703b292455617_13
	missingFieldsLeft12zgensym_b52703b292455617_13 := maxFields12zgensym_b52703b292455617_13 - totalEncodedFields12zgensym_b52703b292455617_13

	var nextMiss12zgensym_b52703b292455617_13 int32 = -1
	var found12zgensym_b52703b292455617_13 [maxFields12zgensym_b52703b292455617_13]bool
	var curField12zgensym_b52703b292455617_13 string

doneWithStruct12zgensym_b52703b292455617_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_b52703b292455617_13 > 0 || missingFieldsLeft12zgensym_b52703b292455617_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_b52703b292455617_13, missingFieldsLeft12zgensym_b52703b292455617_13, msgp.ShowFound(found12zgensym_b52703b292455617_13[:]), unmarshalMsgFieldOrder12zgensym_b52703b292455617_13)
		if encodedFieldsLeft12zgensym_b52703b292455617_13 > 0 {
			encodedFieldsLeft12zgensym_b52703b292455617_13--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField12zgensym_b52703b292455617_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_b52703b292455617_13 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss12zgensym_b52703b292455617_13 = 0
			}
			for nextMiss12zgensym_b52703b292455617_13 < maxFields12zgensym_b52703b292455617_13 && (found12zgensym_b52703b292455617_13[nextMiss12zgensym_b52703b292455617_13] || unmarshalMsgFieldSkip12zgensym_b52703b292455617_13[nextMiss12zgensym_b52703b292455617_13]) {
				nextMiss12zgensym_b52703b292455617_13++
			}
			if nextMiss12zgensym_b52703b292455617_13 == maxFields12zgensym_b52703b292455617_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_b52703b292455617_13
			}
			missingFieldsLeft12zgensym_b52703b292455617_13--
			curField12zgensym_b52703b292455617_13 = unmarshalMsgFieldOrder12zgensym_b52703b292455617_13[nextMiss12zgensym_b52703b292455617_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_b52703b292455617_13)
		switch curField12zgensym_b52703b292455617_13 {
		// -- templateUnmarshalMsg ends here --

		case "Pack_zid00_slc":
			found12zgensym_b52703b292455617_13[0] = true
			if nbs.AlwaysNil {
				(z.Pack) = (z.Pack)[:0]
			} else {

				var zgensym_b52703b292455617_14 uint32
				zgensym_b52703b292455617_14, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Pack) >= int(zgensym_b52703b292455617_14) {
					z.Pack = (z.Pack)[:zgensym_b52703b292455617_14]
				} else {
					z.Pack = make([]*File, zgensym_b52703b292455617_14)
				}
				for zgensym_b52703b292455617_6 := range z.Pack {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Pack[zgensym_b52703b292455617_6]", alias:"File", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Pack[zgensym_b52703b292455617_6] != nil {
							z.Pack[zgensym_b52703b292455617_6].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Pack[zgensym_b52703b292455617_6] {
								z.Pack[zgensym_b52703b292455617_6].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Pack[zgensym_b52703b292455617_6] == nil {
								z.Pack[zgensym_b52703b292455617_6] = new(File)
							}

							bts, err = z.Pack[zgensym_b52703b292455617_6].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "IsLast_zid01_boo":
			found12zgensym_b52703b292455617_13[1] = true
			z.IsLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_b52703b292455617_13 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfDirs
var unmarshalMsgFieldOrder12zgensym_b52703b292455617_13 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var unmarshalMsgFieldSkip12zgensym_b52703b292455617_13 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackOfDirs) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_b52703b292455617_6 := range z.Pack {
		if z.Pack[zgensym_b52703b292455617_6] == nil {
			s += msgp.NilSize
		} else {
			s += z.Pack[zgensym_b52703b292455617_6].Msgsize()
		}
	}
	s += 17 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PackOfFiles) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields16zgensym_b52703b292455617_17 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields16zgensym_b52703b292455617_17 uint32
	totalEncodedFields16zgensym_b52703b292455617_17, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft16zgensym_b52703b292455617_17 := totalEncodedFields16zgensym_b52703b292455617_17
	missingFieldsLeft16zgensym_b52703b292455617_17 := maxFields16zgensym_b52703b292455617_17 - totalEncodedFields16zgensym_b52703b292455617_17

	var nextMiss16zgensym_b52703b292455617_17 int32 = -1
	var found16zgensym_b52703b292455617_17 [maxFields16zgensym_b52703b292455617_17]bool
	var curField16zgensym_b52703b292455617_17 string

doneWithStruct16zgensym_b52703b292455617_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_b52703b292455617_17 > 0 || missingFieldsLeft16zgensym_b52703b292455617_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_b52703b292455617_17, missingFieldsLeft16zgensym_b52703b292455617_17, msgp.ShowFound(found16zgensym_b52703b292455617_17[:]), decodeMsgFieldOrder16zgensym_b52703b292455617_17)
		if encodedFieldsLeft16zgensym_b52703b292455617_17 > 0 {
			encodedFieldsLeft16zgensym_b52703b292455617_17--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField16zgensym_b52703b292455617_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_b52703b292455617_17 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss16zgensym_b52703b292455617_17 = 0
			}
			for nextMiss16zgensym_b52703b292455617_17 < maxFields16zgensym_b52703b292455617_17 && (found16zgensym_b52703b292455617_17[nextMiss16zgensym_b52703b292455617_17] || decodeMsgFieldSkip16zgensym_b52703b292455617_17[nextMiss16zgensym_b52703b292455617_17]) {
				nextMiss16zgensym_b52703b292455617_17++
			}
			if nextMiss16zgensym_b52703b292455617_17 == maxFields16zgensym_b52703b292455617_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_b52703b292455617_17
			}
			missingFieldsLeft16zgensym_b52703b292455617_17--
			curField16zgensym_b52703b292455617_17 = decodeMsgFieldOrder16zgensym_b52703b292455617_17[nextMiss16zgensym_b52703b292455617_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_b52703b292455617_17)
		switch curField16zgensym_b52703b292455617_17 {
		// -- templateDecodeMsg ends here --

		case "Pack_zid00_slc":
			found16zgensym_b52703b292455617_17[0] = true
			var zgensym_b52703b292455617_18 uint32
			zgensym_b52703b292455617_18, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pack) >= int(zgensym_b52703b292455617_18) {
				z.Pack = (z.Pack)[:zgensym_b52703b292455617_18]
			} else {
				z.Pack = make([]*File, zgensym_b52703b292455617_18)
			}
			for zgensym_b52703b292455617_15 := range z.Pack {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Pack[zgensym_b52703b292455617_15] != nil {
						dc.PushAlwaysNil()
						err = z.Pack[zgensym_b52703b292455617_15].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Pack[zgensym_b52703b292455617_15] == nil {
						z.Pack[zgensym_b52703b292455617_15] = new(File)
					}
					dc.DedupIndexEachPtr(z.Pack[zgensym_b52703b292455617_15])

					err = z.Pack[zgensym_b52703b292455617_15].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "IsLast_zid01_boo":
			found16zgensym_b52703b292455617_17[1] = true
			z.IsLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "TotalFileBytes_zid02_i64":
			found16zgensym_b52703b292455617_17[2] = true
			z.TotalFileBytes, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_b52703b292455617_17 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfFiles
var decodeMsgFieldOrder16zgensym_b52703b292455617_17 = []string{"Pack_zid00_slc", "IsLast_zid01_boo", "TotalFileBytes_zid02_i64"}

var decodeMsgFieldSkip16zgensym_b52703b292455617_17 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PackOfFiles) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.Pack) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsLast) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.TotalFileBytes == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PackOfFiles) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_19 [3]bool
	fieldsInUse_zgensym_b52703b292455617_20 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_19[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_20 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PackOfFiles'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_19[0] {
		// write "Pack_zid00_slc"
		err = en.Append(0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Pack)))
		if err != nil {
			return
		}
		for zgensym_b52703b292455617_15 := range z.Pack {
			// gPtr.encodeGen():

			if z.Pack[zgensym_b52703b292455617_15] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Pack[zgensym_b52703b292455617_15].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_b52703b292455617_19[1] {
		// write "IsLast_zid01_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLast)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_19[2] {
		// write "TotalFileBytes_zid02_i64"
		err = en.Append(0xb8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.TotalFileBytes)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackOfFiles) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Pack_zid00_slc"
		o = append(o, 0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pack)))
		for zgensym_b52703b292455617_15 := range z.Pack {
			// marshalGen.gPtr()

			if z.Pack[zgensym_b52703b292455617_15] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Pack[zgensym_b52703b292455617_15].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "IsLast_zid01_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLast)
	}

	if !empty[2] {
		// string "TotalFileBytes_zid02_i64"
		o = append(o, 0xb8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.TotalFileBytes)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackOfFiles) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PackOfFiles) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields21zgensym_b52703b292455617_22 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields21zgensym_b52703b292455617_22 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields21zgensym_b52703b292455617_22, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft21zgensym_b52703b292455617_22 := totalEncodedFields21zgensym_b52703b292455617_22
	missingFieldsLeft21zgensym_b52703b292455617_22 := maxFields21zgensym_b52703b292455617_22 - totalEncodedFields21zgensym_b52703b292455617_22

	var nextMiss21zgensym_b52703b292455617_22 int32 = -1
	var found21zgensym_b52703b292455617_22 [maxFields21zgensym_b52703b292455617_22]bool
	var curField21zgensym_b52703b292455617_22 string

doneWithStruct21zgensym_b52703b292455617_22:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft21zgensym_b52703b292455617_22 > 0 || missingFieldsLeft21zgensym_b52703b292455617_22 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft21zgensym_b52703b292455617_22, missingFieldsLeft21zgensym_b52703b292455617_22, msgp.ShowFound(found21zgensym_b52703b292455617_22[:]), unmarshalMsgFieldOrder21zgensym_b52703b292455617_22)
		if encodedFieldsLeft21zgensym_b52703b292455617_22 > 0 {
			encodedFieldsLeft21zgensym_b52703b292455617_22--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField21zgensym_b52703b292455617_22 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss21zgensym_b52703b292455617_22 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss21zgensym_b52703b292455617_22 = 0
			}
			for nextMiss21zgensym_b52703b292455617_22 < maxFields21zgensym_b52703b292455617_22 && (found21zgensym_b52703b292455617_22[nextMiss21zgensym_b52703b292455617_22] || unmarshalMsgFieldSkip21zgensym_b52703b292455617_22[nextMiss21zgensym_b52703b292455617_22]) {
				nextMiss21zgensym_b52703b292455617_22++
			}
			if nextMiss21zgensym_b52703b292455617_22 == maxFields21zgensym_b52703b292455617_22 {
				// filled all the empty fields!
				break doneWithStruct21zgensym_b52703b292455617_22
			}
			missingFieldsLeft21zgensym_b52703b292455617_22--
			curField21zgensym_b52703b292455617_22 = unmarshalMsgFieldOrder21zgensym_b52703b292455617_22[nextMiss21zgensym_b52703b292455617_22]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField21zgensym_b52703b292455617_22)
		switch curField21zgensym_b52703b292455617_22 {
		// -- templateUnmarshalMsg ends here --

		case "Pack_zid00_slc":
			found21zgensym_b52703b292455617_22[0] = true
			if nbs.AlwaysNil {
				(z.Pack) = (z.Pack)[:0]
			} else {

				var zgensym_b52703b292455617_23 uint32
				zgensym_b52703b292455617_23, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Pack) >= int(zgensym_b52703b292455617_23) {
					z.Pack = (z.Pack)[:zgensym_b52703b292455617_23]
				} else {
					z.Pack = make([]*File, zgensym_b52703b292455617_23)
				}
				for zgensym_b52703b292455617_15 := range z.Pack {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Pack[zgensym_b52703b292455617_15]", alias:"File", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Pack[zgensym_b52703b292455617_15] != nil {
							z.Pack[zgensym_b52703b292455617_15].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Pack[zgensym_b52703b292455617_15] {
								z.Pack[zgensym_b52703b292455617_15].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Pack[zgensym_b52703b292455617_15] == nil {
								z.Pack[zgensym_b52703b292455617_15] = new(File)
							}

							bts, err = z.Pack[zgensym_b52703b292455617_15].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "IsLast_zid01_boo":
			found21zgensym_b52703b292455617_22[1] = true
			z.IsLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "TotalFileBytes_zid02_i64":
			found21zgensym_b52703b292455617_22[2] = true
			z.TotalFileBytes, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss21zgensym_b52703b292455617_22 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfFiles
var unmarshalMsgFieldOrder21zgensym_b52703b292455617_22 = []string{"Pack_zid00_slc", "IsLast_zid01_boo", "TotalFileBytes_zid02_i64"}

var unmarshalMsgFieldSkip21zgensym_b52703b292455617_22 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackOfFiles) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_b52703b292455617_15 := range z.Pack {
		if z.Pack[zgensym_b52703b292455617_15] == nil {
			s += msgp.NilSize
		} else {
			s += z.Pack[zgensym_b52703b292455617_15].Msgsize()
		}
	}
	s += 17 + msgp.BoolSize + 25 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PackOfLeafPaths) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields25zgensym_b52703b292455617_26 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields25zgensym_b52703b292455617_26 uint32
	totalEncodedFields25zgensym_b52703b292455617_26, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft25zgensym_b52703b292455617_26 := totalEncodedFields25zgensym_b52703b292455617_26
	missingFieldsLeft25zgensym_b52703b292455617_26 := maxFields25zgensym_b52703b292455617_26 - totalEncodedFields25zgensym_b52703b292455617_26

	var nextMiss25zgensym_b52703b292455617_26 int32 = -1
	var found25zgensym_b52703b292455617_26 [maxFields25zgensym_b52703b292455617_26]bool
	var curField25zgensym_b52703b292455617_26 string

doneWithStruct25zgensym_b52703b292455617_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_b52703b292455617_26 > 0 || missingFieldsLeft25zgensym_b52703b292455617_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_b52703b292455617_26, missingFieldsLeft25zgensym_b52703b292455617_26, msgp.ShowFound(found25zgensym_b52703b292455617_26[:]), decodeMsgFieldOrder25zgensym_b52703b292455617_26)
		if encodedFieldsLeft25zgensym_b52703b292455617_26 > 0 {
			encodedFieldsLeft25zgensym_b52703b292455617_26--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField25zgensym_b52703b292455617_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_b52703b292455617_26 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss25zgensym_b52703b292455617_26 = 0
			}
			for nextMiss25zgensym_b52703b292455617_26 < maxFields25zgensym_b52703b292455617_26 && (found25zgensym_b52703b292455617_26[nextMiss25zgensym_b52703b292455617_26] || decodeMsgFieldSkip25zgensym_b52703b292455617_26[nextMiss25zgensym_b52703b292455617_26]) {
				nextMiss25zgensym_b52703b292455617_26++
			}
			if nextMiss25zgensym_b52703b292455617_26 == maxFields25zgensym_b52703b292455617_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_b52703b292455617_26
			}
			missingFieldsLeft25zgensym_b52703b292455617_26--
			curField25zgensym_b52703b292455617_26 = decodeMsgFieldOrder25zgensym_b52703b292455617_26[nextMiss25zgensym_b52703b292455617_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_b52703b292455617_26)
		switch curField25zgensym_b52703b292455617_26 {
		// -- templateDecodeMsg ends here --

		case "Pack_zid00_slc":
			found25zgensym_b52703b292455617_26[0] = true
			var zgensym_b52703b292455617_27 uint32
			zgensym_b52703b292455617_27, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pack) >= int(zgensym_b52703b292455617_27) {
				z.Pack = (z.Pack)[:zgensym_b52703b292455617_27]
			} else {
				z.Pack = make([]string, zgensym_b52703b292455617_27)
			}
			for zgensym_b52703b292455617_24 := range z.Pack {
				z.Pack[zgensym_b52703b292455617_24], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "IsLast_zid01_boo":
			found25zgensym_b52703b292455617_26[1] = true
			z.IsLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_b52703b292455617_26 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfLeafPaths
var decodeMsgFieldOrder25zgensym_b52703b292455617_26 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var decodeMsgFieldSkip25zgensym_b52703b292455617_26 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PackOfLeafPaths) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Pack) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsLast) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PackOfLeafPaths) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_28 [2]bool
	fieldsInUse_zgensym_b52703b292455617_29 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_28[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_29 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PackOfLeafPaths'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x4c, 0x65, 0x61, 0x66, 0x50, 0x61, 0x74, 0x68, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_28[0] {
		// write "Pack_zid00_slc"
		err = en.Append(0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Pack)))
		if err != nil {
			return
		}
		for zgensym_b52703b292455617_24 := range z.Pack {
			err = en.WriteString(z.Pack[zgensym_b52703b292455617_24])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_b52703b292455617_28[1] {
		// write "IsLast_zid01_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLast)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackOfLeafPaths) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Pack_zid00_slc"
		o = append(o, 0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pack)))
		for zgensym_b52703b292455617_24 := range z.Pack {
			o = msgp.AppendString(o, z.Pack[zgensym_b52703b292455617_24])
		}
	}

	if !empty[1] {
		// string "IsLast_zid01_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLast)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackOfLeafPaths) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PackOfLeafPaths) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields30zgensym_b52703b292455617_31 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields30zgensym_b52703b292455617_31 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields30zgensym_b52703b292455617_31, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft30zgensym_b52703b292455617_31 := totalEncodedFields30zgensym_b52703b292455617_31
	missingFieldsLeft30zgensym_b52703b292455617_31 := maxFields30zgensym_b52703b292455617_31 - totalEncodedFields30zgensym_b52703b292455617_31

	var nextMiss30zgensym_b52703b292455617_31 int32 = -1
	var found30zgensym_b52703b292455617_31 [maxFields30zgensym_b52703b292455617_31]bool
	var curField30zgensym_b52703b292455617_31 string

doneWithStruct30zgensym_b52703b292455617_31:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft30zgensym_b52703b292455617_31 > 0 || missingFieldsLeft30zgensym_b52703b292455617_31 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft30zgensym_b52703b292455617_31, missingFieldsLeft30zgensym_b52703b292455617_31, msgp.ShowFound(found30zgensym_b52703b292455617_31[:]), unmarshalMsgFieldOrder30zgensym_b52703b292455617_31)
		if encodedFieldsLeft30zgensym_b52703b292455617_31 > 0 {
			encodedFieldsLeft30zgensym_b52703b292455617_31--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField30zgensym_b52703b292455617_31 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss30zgensym_b52703b292455617_31 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss30zgensym_b52703b292455617_31 = 0
			}
			for nextMiss30zgensym_b52703b292455617_31 < maxFields30zgensym_b52703b292455617_31 && (found30zgensym_b52703b292455617_31[nextMiss30zgensym_b52703b292455617_31] || unmarshalMsgFieldSkip30zgensym_b52703b292455617_31[nextMiss30zgensym_b52703b292455617_31]) {
				nextMiss30zgensym_b52703b292455617_31++
			}
			if nextMiss30zgensym_b52703b292455617_31 == maxFields30zgensym_b52703b292455617_31 {
				// filled all the empty fields!
				break doneWithStruct30zgensym_b52703b292455617_31
			}
			missingFieldsLeft30zgensym_b52703b292455617_31--
			curField30zgensym_b52703b292455617_31 = unmarshalMsgFieldOrder30zgensym_b52703b292455617_31[nextMiss30zgensym_b52703b292455617_31]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField30zgensym_b52703b292455617_31)
		switch curField30zgensym_b52703b292455617_31 {
		// -- templateUnmarshalMsg ends here --

		case "Pack_zid00_slc":
			found30zgensym_b52703b292455617_31[0] = true
			if nbs.AlwaysNil {
				(z.Pack) = (z.Pack)[:0]
			} else {

				var zgensym_b52703b292455617_32 uint32
				zgensym_b52703b292455617_32, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Pack) >= int(zgensym_b52703b292455617_32) {
					z.Pack = (z.Pack)[:zgensym_b52703b292455617_32]
				} else {
					z.Pack = make([]string, zgensym_b52703b292455617_32)
				}
				for zgensym_b52703b292455617_24 := range z.Pack {
					z.Pack[zgensym_b52703b292455617_24], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "IsLast_zid01_boo":
			found30zgensym_b52703b292455617_31[1] = true
			z.IsLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss30zgensym_b52703b292455617_31 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfLeafPaths
var unmarshalMsgFieldOrder30zgensym_b52703b292455617_31 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var unmarshalMsgFieldSkip30zgensym_b52703b292455617_31 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackOfLeafPaths) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_b52703b292455617_24 := range z.Pack {
		s += msgp.StringPrefixSize + len(z.Pack[zgensym_b52703b292455617_24])
	}
	s += 17 + msgp.BoolSize
	return
}
