// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package jsync

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *DirSummary) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_b52703b292455617_1 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_b52703b292455617_1 uint32
	totalEncodedFields0zgensym_b52703b292455617_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_b52703b292455617_1 := totalEncodedFields0zgensym_b52703b292455617_1
	missingFieldsLeft0zgensym_b52703b292455617_1 := maxFields0zgensym_b52703b292455617_1 - totalEncodedFields0zgensym_b52703b292455617_1

	var nextMiss0zgensym_b52703b292455617_1 int32 = -1
	var found0zgensym_b52703b292455617_1 [maxFields0zgensym_b52703b292455617_1]bool
	var curField0zgensym_b52703b292455617_1 string

doneWithStruct0zgensym_b52703b292455617_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_b52703b292455617_1 > 0 || missingFieldsLeft0zgensym_b52703b292455617_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft0zgensym_b52703b292455617_1, missingFieldsLeft0zgensym_b52703b292455617_1, msgp.ShowFound(found0zgensym_b52703b292455617_1[:]), decodeMsgFieldOrder0zgensym_b52703b292455617_1)
		if encodedFieldsLeft0zgensym_b52703b292455617_1 > 0 {
			encodedFieldsLeft0zgensym_b52703b292455617_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_b52703b292455617_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_b52703b292455617_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_b52703b292455617_1 = 0
			}
			for nextMiss0zgensym_b52703b292455617_1 < maxFields0zgensym_b52703b292455617_1 && (found0zgensym_b52703b292455617_1[nextMiss0zgensym_b52703b292455617_1] || decodeMsgFieldSkip0zgensym_b52703b292455617_1[nextMiss0zgensym_b52703b292455617_1]) {
				nextMiss0zgensym_b52703b292455617_1++
			}
			if nextMiss0zgensym_b52703b292455617_1 == maxFields0zgensym_b52703b292455617_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_b52703b292455617_1
			}
			missingFieldsLeft0zgensym_b52703b292455617_1--
			curField0zgensym_b52703b292455617_1 = decodeMsgFieldOrder0zgensym_b52703b292455617_1[nextMiss0zgensym_b52703b292455617_1]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField0zgensym_b52703b292455617_1)
		switch curField0zgensym_b52703b292455617_1 {
		// -- templateDecodeMsg ends here --

		case "NumFiles_zid00_i64":
			found0zgensym_b52703b292455617_1[0] = true
			z.NumFiles, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "NumBytes_zid01_i64":
			found0zgensym_b52703b292455617_1[1] = true
			z.NumBytes, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_b52703b292455617_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of DirSummary
var decodeMsgFieldOrder0zgensym_b52703b292455617_1 = []string{"NumFiles_zid00_i64", "NumBytes_zid01_i64"}

var decodeMsgFieldSkip0zgensym_b52703b292455617_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *DirSummary) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.NumFiles == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.NumBytes == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *DirSummary) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_2 [2]bool
	fieldsInUse_zgensym_b52703b292455617_3 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'DirSummary'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x44, 0x69, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_2[0] {
		// write "NumFiles_zid00_i64"
		err = en.Append(0xb2, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.NumFiles)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_2[1] {
		// write "NumBytes_zid01_i64"
		err = en.Append(0xb2, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.NumBytes)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DirSummary) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "NumFiles_zid00_i64"
		o = append(o, 0xb2, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.NumFiles)
	}

	if !empty[1] {
		// string "NumBytes_zid01_i64"
		o = append(o, 0xb2, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.NumBytes)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DirSummary) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *DirSummary) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_b52703b292455617_5 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_b52703b292455617_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_b52703b292455617_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_b52703b292455617_5 := totalEncodedFields4zgensym_b52703b292455617_5
	missingFieldsLeft4zgensym_b52703b292455617_5 := maxFields4zgensym_b52703b292455617_5 - totalEncodedFields4zgensym_b52703b292455617_5

	var nextMiss4zgensym_b52703b292455617_5 int32 = -1
	var found4zgensym_b52703b292455617_5 [maxFields4zgensym_b52703b292455617_5]bool
	var curField4zgensym_b52703b292455617_5 string

doneWithStruct4zgensym_b52703b292455617_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_b52703b292455617_5 > 0 || missingFieldsLeft4zgensym_b52703b292455617_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft4zgensym_b52703b292455617_5, missingFieldsLeft4zgensym_b52703b292455617_5, msgp.ShowFound(found4zgensym_b52703b292455617_5[:]), unmarshalMsgFieldOrder4zgensym_b52703b292455617_5)
		if encodedFieldsLeft4zgensym_b52703b292455617_5 > 0 {
			encodedFieldsLeft4zgensym_b52703b292455617_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_b52703b292455617_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_b52703b292455617_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_b52703b292455617_5 = 0
			}
			for nextMiss4zgensym_b52703b292455617_5 < maxFields4zgensym_b52703b292455617_5 && (found4zgensym_b52703b292455617_5[nextMiss4zgensym_b52703b292455617_5] || unmarshalMsgFieldSkip4zgensym_b52703b292455617_5[nextMiss4zgensym_b52703b292455617_5]) {
				nextMiss4zgensym_b52703b292455617_5++
			}
			if nextMiss4zgensym_b52703b292455617_5 == maxFields4zgensym_b52703b292455617_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_b52703b292455617_5
			}
			missingFieldsLeft4zgensym_b52703b292455617_5--
			curField4zgensym_b52703b292455617_5 = unmarshalMsgFieldOrder4zgensym_b52703b292455617_5[nextMiss4zgensym_b52703b292455617_5]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField4zgensym_b52703b292455617_5)
		switch curField4zgensym_b52703b292455617_5 {
		// -- templateUnmarshalMsg ends here --

		case "NumFiles_zid00_i64":
			found4zgensym_b52703b292455617_5[0] = true
			z.NumFiles, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "NumBytes_zid01_i64":
			found4zgensym_b52703b292455617_5[1] = true
			z.NumBytes, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_b52703b292455617_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of DirSummary
var unmarshalMsgFieldOrder4zgensym_b52703b292455617_5 = []string{"NumFiles_zid00_i64", "NumBytes_zid01_i64"}

var unmarshalMsgFieldSkip4zgensym_b52703b292455617_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DirSummary) Msgsize() (s int) {
	s = 1 + 19 + msgp.Int64Size + 19 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *File) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_b52703b292455617_7 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_b52703b292455617_7 uint32
	totalEncodedFields6zgensym_b52703b292455617_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_b52703b292455617_7 := totalEncodedFields6zgensym_b52703b292455617_7
	missingFieldsLeft6zgensym_b52703b292455617_7 := maxFields6zgensym_b52703b292455617_7 - totalEncodedFields6zgensym_b52703b292455617_7

	var nextMiss6zgensym_b52703b292455617_7 int32 = -1
	var found6zgensym_b52703b292455617_7 [maxFields6zgensym_b52703b292455617_7]bool
	var curField6zgensym_b52703b292455617_7 string

doneWithStruct6zgensym_b52703b292455617_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_b52703b292455617_7 > 0 || missingFieldsLeft6zgensym_b52703b292455617_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft6zgensym_b52703b292455617_7, missingFieldsLeft6zgensym_b52703b292455617_7, msgp.ShowFound(found6zgensym_b52703b292455617_7[:]), decodeMsgFieldOrder6zgensym_b52703b292455617_7)
		if encodedFieldsLeft6zgensym_b52703b292455617_7 > 0 {
			encodedFieldsLeft6zgensym_b52703b292455617_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_b52703b292455617_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_b52703b292455617_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_b52703b292455617_7 = 0
			}
			for nextMiss6zgensym_b52703b292455617_7 < maxFields6zgensym_b52703b292455617_7 && (found6zgensym_b52703b292455617_7[nextMiss6zgensym_b52703b292455617_7] || decodeMsgFieldSkip6zgensym_b52703b292455617_7[nextMiss6zgensym_b52703b292455617_7]) {
				nextMiss6zgensym_b52703b292455617_7++
			}
			if nextMiss6zgensym_b52703b292455617_7 == maxFields6zgensym_b52703b292455617_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_b52703b292455617_7
			}
			missingFieldsLeft6zgensym_b52703b292455617_7--
			curField6zgensym_b52703b292455617_7 = decodeMsgFieldOrder6zgensym_b52703b292455617_7[nextMiss6zgensym_b52703b292455617_7]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField6zgensym_b52703b292455617_7)
		switch curField6zgensym_b52703b292455617_7 {
		// -- templateDecodeMsg ends here --

		case "Path_zid00_str":
			found6zgensym_b52703b292455617_7[0] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Size_zid01_i64":
			found6zgensym_b52703b292455617_7[1] = true
			z.Size, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FileMode_zid02_u32":
			found6zgensym_b52703b292455617_7[2] = true
			z.FileMode, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "ScanFlags_zid03_u32":
			found6zgensym_b52703b292455617_7[3] = true
			z.ScanFlags, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "ModTime_zid04_tim":
			found6zgensym_b52703b292455617_7[4] = true
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "SymLinkTarget_zid05_str":
			found6zgensym_b52703b292455617_7[5] = true
			z.SymLinkTarget, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Serial_zid06_i64":
			found6zgensym_b52703b292455617_7[6] = true
			z.Serial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_b52703b292455617_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of File
var decodeMsgFieldOrder6zgensym_b52703b292455617_7 = []string{"Path_zid00_str", "Size_zid01_i64", "FileMode_zid02_u32", "ScanFlags_zid03_u32", "ModTime_zid04_tim", "SymLinkTarget_zid05_str", "Serial_zid06_i64"}

var decodeMsgFieldSkip6zgensym_b52703b292455617_7 = []bool{false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *File) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (len(z.Path) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Size == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.FileMode == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ScanFlags == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.ModTime.IsZero()) // time.Time, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.SymLinkTarget) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.Serial == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *File) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_8 [7]bool
	fieldsInUse_zgensym_b52703b292455617_9 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'File'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x69, 0x6c, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_8[0] {
		// write "Path_zid00_str"
		err = en.Append(0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_8[1] {
		// write "Size_zid01_i64"
		err = en.Append(0xae, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Size)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_8[2] {
		// write "FileMode_zid02_u32"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileMode)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_8[3] {
		// write "ScanFlags_zid03_u32"
		err = en.Append(0xb3, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.ScanFlags)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_8[4] {
		// write "ModTime_zid04_tim"
		err = en.Append(0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_8[5] {
		// write "SymLinkTarget_zid05_str"
		err = en.Append(0xb7, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SymLinkTarget)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_8[6] {
		// write "Serial_zid06_i64"
		err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Serial)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *File) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Path_zid00_str"
		o = append(o, 0xae, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	if !empty[1] {
		// string "Size_zid01_i64"
		o = append(o, 0xae, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Size)
	}

	if !empty[2] {
		// string "FileMode_zid02_u32"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileMode)
	}

	if !empty[3] {
		// string "ScanFlags_zid03_u32"
		o = append(o, 0xb3, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.ScanFlags)
	}

	if !empty[4] {
		// string "ModTime_zid04_tim"
		o = append(o, 0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ModTime)
	}

	if !empty[5] {
		// string "SymLinkTarget_zid05_str"
		o = append(o, 0xb7, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SymLinkTarget)
	}

	if !empty[6] {
		// string "Serial_zid06_i64"
		o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Serial)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *File) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *File) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_b52703b292455617_11 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_b52703b292455617_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_b52703b292455617_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_b52703b292455617_11 := totalEncodedFields10zgensym_b52703b292455617_11
	missingFieldsLeft10zgensym_b52703b292455617_11 := maxFields10zgensym_b52703b292455617_11 - totalEncodedFields10zgensym_b52703b292455617_11

	var nextMiss10zgensym_b52703b292455617_11 int32 = -1
	var found10zgensym_b52703b292455617_11 [maxFields10zgensym_b52703b292455617_11]bool
	var curField10zgensym_b52703b292455617_11 string

doneWithStruct10zgensym_b52703b292455617_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_b52703b292455617_11 > 0 || missingFieldsLeft10zgensym_b52703b292455617_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft10zgensym_b52703b292455617_11, missingFieldsLeft10zgensym_b52703b292455617_11, msgp.ShowFound(found10zgensym_b52703b292455617_11[:]), unmarshalMsgFieldOrder10zgensym_b52703b292455617_11)
		if encodedFieldsLeft10zgensym_b52703b292455617_11 > 0 {
			encodedFieldsLeft10zgensym_b52703b292455617_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_b52703b292455617_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_b52703b292455617_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_b52703b292455617_11 = 0
			}
			for nextMiss10zgensym_b52703b292455617_11 < maxFields10zgensym_b52703b292455617_11 && (found10zgensym_b52703b292455617_11[nextMiss10zgensym_b52703b292455617_11] || unmarshalMsgFieldSkip10zgensym_b52703b292455617_11[nextMiss10zgensym_b52703b292455617_11]) {
				nextMiss10zgensym_b52703b292455617_11++
			}
			if nextMiss10zgensym_b52703b292455617_11 == maxFields10zgensym_b52703b292455617_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_b52703b292455617_11
			}
			missingFieldsLeft10zgensym_b52703b292455617_11--
			curField10zgensym_b52703b292455617_11 = unmarshalMsgFieldOrder10zgensym_b52703b292455617_11[nextMiss10zgensym_b52703b292455617_11]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField10zgensym_b52703b292455617_11)
		switch curField10zgensym_b52703b292455617_11 {
		// -- templateUnmarshalMsg ends here --

		case "Path_zid00_str":
			found10zgensym_b52703b292455617_11[0] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Size_zid01_i64":
			found10zgensym_b52703b292455617_11[1] = true
			z.Size, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FileMode_zid02_u32":
			found10zgensym_b52703b292455617_11[2] = true
			z.FileMode, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "ScanFlags_zid03_u32":
			found10zgensym_b52703b292455617_11[3] = true
			z.ScanFlags, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "ModTime_zid04_tim":
			found10zgensym_b52703b292455617_11[4] = true
			z.ModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "SymLinkTarget_zid05_str":
			found10zgensym_b52703b292455617_11[5] = true
			z.SymLinkTarget, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Serial_zid06_i64":
			found10zgensym_b52703b292455617_11[6] = true
			z.Serial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_b52703b292455617_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of File
var unmarshalMsgFieldOrder10zgensym_b52703b292455617_11 = []string{"Path_zid00_str", "Size_zid01_i64", "FileMode_zid02_u32", "ScanFlags_zid03_u32", "ModTime_zid04_tim", "SymLinkTarget_zid05_str", "Serial_zid06_i64"}

var unmarshalMsgFieldSkip10zgensym_b52703b292455617_11 = []bool{false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *File) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Path) + 15 + msgp.Int64Size + 19 + msgp.Uint32Size + 20 + msgp.Uint32Size + 18 + msgp.TimeSize + 24 + msgp.StringPrefixSize + len(z.SymLinkTarget) + 17 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PackOfDirs) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields13zgensym_b52703b292455617_14 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields13zgensym_b52703b292455617_14 uint32
	totalEncodedFields13zgensym_b52703b292455617_14, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft13zgensym_b52703b292455617_14 := totalEncodedFields13zgensym_b52703b292455617_14
	missingFieldsLeft13zgensym_b52703b292455617_14 := maxFields13zgensym_b52703b292455617_14 - totalEncodedFields13zgensym_b52703b292455617_14

	var nextMiss13zgensym_b52703b292455617_14 int32 = -1
	var found13zgensym_b52703b292455617_14 [maxFields13zgensym_b52703b292455617_14]bool
	var curField13zgensym_b52703b292455617_14 string

doneWithStruct13zgensym_b52703b292455617_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_b52703b292455617_14 > 0 || missingFieldsLeft13zgensym_b52703b292455617_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft13zgensym_b52703b292455617_14, missingFieldsLeft13zgensym_b52703b292455617_14, msgp.ShowFound(found13zgensym_b52703b292455617_14[:]), decodeMsgFieldOrder13zgensym_b52703b292455617_14)
		if encodedFieldsLeft13zgensym_b52703b292455617_14 > 0 {
			encodedFieldsLeft13zgensym_b52703b292455617_14--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField13zgensym_b52703b292455617_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_b52703b292455617_14 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss13zgensym_b52703b292455617_14 = 0
			}
			for nextMiss13zgensym_b52703b292455617_14 < maxFields13zgensym_b52703b292455617_14 && (found13zgensym_b52703b292455617_14[nextMiss13zgensym_b52703b292455617_14] || decodeMsgFieldSkip13zgensym_b52703b292455617_14[nextMiss13zgensym_b52703b292455617_14]) {
				nextMiss13zgensym_b52703b292455617_14++
			}
			if nextMiss13zgensym_b52703b292455617_14 == maxFields13zgensym_b52703b292455617_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_b52703b292455617_14
			}
			missingFieldsLeft13zgensym_b52703b292455617_14--
			curField13zgensym_b52703b292455617_14 = decodeMsgFieldOrder13zgensym_b52703b292455617_14[nextMiss13zgensym_b52703b292455617_14]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField13zgensym_b52703b292455617_14)
		switch curField13zgensym_b52703b292455617_14 {
		// -- templateDecodeMsg ends here --

		case "Pack_zid00_slc":
			found13zgensym_b52703b292455617_14[0] = true
			var zgensym_b52703b292455617_15 uint32
			zgensym_b52703b292455617_15, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pack) >= int(zgensym_b52703b292455617_15) {
				z.Pack = (z.Pack)[:zgensym_b52703b292455617_15]
			} else {
				z.Pack = make([]*File, zgensym_b52703b292455617_15)
			}
			for zgensym_b52703b292455617_12 := range z.Pack {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Pack[zgensym_b52703b292455617_12] != nil {
						dc.PushAlwaysNil()
						err = z.Pack[zgensym_b52703b292455617_12].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Pack[zgensym_b52703b292455617_12] == nil {
						z.Pack[zgensym_b52703b292455617_12] = new(File)
					}
					dc.DedupIndexEachPtr(z.Pack[zgensym_b52703b292455617_12])

					err = z.Pack[zgensym_b52703b292455617_12].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "IsLast_zid01_boo":
			found13zgensym_b52703b292455617_14[1] = true
			z.IsLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_b52703b292455617_14 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfDirs
var decodeMsgFieldOrder13zgensym_b52703b292455617_14 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var decodeMsgFieldSkip13zgensym_b52703b292455617_14 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PackOfDirs) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Pack) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsLast) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PackOfDirs) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_16 [2]bool
	fieldsInUse_zgensym_b52703b292455617_17 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_16[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_17 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PackOfDirs'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x44, 0x69, 0x72, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_16[0] {
		// write "Pack_zid00_slc"
		err = en.Append(0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Pack)))
		if err != nil {
			return
		}
		for zgensym_b52703b292455617_12 := range z.Pack {
			// gPtr.encodeGen():

			if z.Pack[zgensym_b52703b292455617_12] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Pack[zgensym_b52703b292455617_12].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_b52703b292455617_16[1] {
		// write "IsLast_zid01_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLast)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackOfDirs) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Pack_zid00_slc"
		o = append(o, 0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pack)))
		for zgensym_b52703b292455617_12 := range z.Pack {
			// marshalGen.gPtr()

			if z.Pack[zgensym_b52703b292455617_12] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Pack[zgensym_b52703b292455617_12].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "IsLast_zid01_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLast)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackOfDirs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PackOfDirs) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields18zgensym_b52703b292455617_19 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields18zgensym_b52703b292455617_19 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields18zgensym_b52703b292455617_19, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft18zgensym_b52703b292455617_19 := totalEncodedFields18zgensym_b52703b292455617_19
	missingFieldsLeft18zgensym_b52703b292455617_19 := maxFields18zgensym_b52703b292455617_19 - totalEncodedFields18zgensym_b52703b292455617_19

	var nextMiss18zgensym_b52703b292455617_19 int32 = -1
	var found18zgensym_b52703b292455617_19 [maxFields18zgensym_b52703b292455617_19]bool
	var curField18zgensym_b52703b292455617_19 string

doneWithStruct18zgensym_b52703b292455617_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_b52703b292455617_19 > 0 || missingFieldsLeft18zgensym_b52703b292455617_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft18zgensym_b52703b292455617_19, missingFieldsLeft18zgensym_b52703b292455617_19, msgp.ShowFound(found18zgensym_b52703b292455617_19[:]), unmarshalMsgFieldOrder18zgensym_b52703b292455617_19)
		if encodedFieldsLeft18zgensym_b52703b292455617_19 > 0 {
			encodedFieldsLeft18zgensym_b52703b292455617_19--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField18zgensym_b52703b292455617_19 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss18zgensym_b52703b292455617_19 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss18zgensym_b52703b292455617_19 = 0
			}
			for nextMiss18zgensym_b52703b292455617_19 < maxFields18zgensym_b52703b292455617_19 && (found18zgensym_b52703b292455617_19[nextMiss18zgensym_b52703b292455617_19] || unmarshalMsgFieldSkip18zgensym_b52703b292455617_19[nextMiss18zgensym_b52703b292455617_19]) {
				nextMiss18zgensym_b52703b292455617_19++
			}
			if nextMiss18zgensym_b52703b292455617_19 == maxFields18zgensym_b52703b292455617_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_b52703b292455617_19
			}
			missingFieldsLeft18zgensym_b52703b292455617_19--
			curField18zgensym_b52703b292455617_19 = unmarshalMsgFieldOrder18zgensym_b52703b292455617_19[nextMiss18zgensym_b52703b292455617_19]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField18zgensym_b52703b292455617_19)
		switch curField18zgensym_b52703b292455617_19 {
		// -- templateUnmarshalMsg ends here --

		case "Pack_zid00_slc":
			found18zgensym_b52703b292455617_19[0] = true
			if nbs.AlwaysNil {
				(z.Pack) = (z.Pack)[:0]
			} else {

				var zgensym_b52703b292455617_20 uint32
				zgensym_b52703b292455617_20, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Pack) >= int(zgensym_b52703b292455617_20) {
					z.Pack = (z.Pack)[:zgensym_b52703b292455617_20]
				} else {
					z.Pack = make([]*File, zgensym_b52703b292455617_20)
				}
				for zgensym_b52703b292455617_12 := range z.Pack {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Pack[zgensym_b52703b292455617_12] != nil {
							z.Pack[zgensym_b52703b292455617_12].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Pack[zgensym_b52703b292455617_12] {
								z.Pack[zgensym_b52703b292455617_12].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Pack[zgensym_b52703b292455617_12] == nil {
								z.Pack[zgensym_b52703b292455617_12] = new(File)
							}

							bts, err = z.Pack[zgensym_b52703b292455617_12].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "IsLast_zid01_boo":
			found18zgensym_b52703b292455617_19[1] = true
			z.IsLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_b52703b292455617_19 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfDirs
var unmarshalMsgFieldOrder18zgensym_b52703b292455617_19 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var unmarshalMsgFieldSkip18zgensym_b52703b292455617_19 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackOfDirs) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_b52703b292455617_12 := range z.Pack {
		if z.Pack[zgensym_b52703b292455617_12] == nil {
			s += msgp.NilSize
		} else {
			s += z.Pack[zgensym_b52703b292455617_12].Msgsize()
		}
	}
	s += 17 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PackOfFiles) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields22zgensym_b52703b292455617_23 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields22zgensym_b52703b292455617_23 uint32
	totalEncodedFields22zgensym_b52703b292455617_23, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft22zgensym_b52703b292455617_23 := totalEncodedFields22zgensym_b52703b292455617_23
	missingFieldsLeft22zgensym_b52703b292455617_23 := maxFields22zgensym_b52703b292455617_23 - totalEncodedFields22zgensym_b52703b292455617_23

	var nextMiss22zgensym_b52703b292455617_23 int32 = -1
	var found22zgensym_b52703b292455617_23 [maxFields22zgensym_b52703b292455617_23]bool
	var curField22zgensym_b52703b292455617_23 string

doneWithStruct22zgensym_b52703b292455617_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_b52703b292455617_23 > 0 || missingFieldsLeft22zgensym_b52703b292455617_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft22zgensym_b52703b292455617_23, missingFieldsLeft22zgensym_b52703b292455617_23, msgp.ShowFound(found22zgensym_b52703b292455617_23[:]), decodeMsgFieldOrder22zgensym_b52703b292455617_23)
		if encodedFieldsLeft22zgensym_b52703b292455617_23 > 0 {
			encodedFieldsLeft22zgensym_b52703b292455617_23--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField22zgensym_b52703b292455617_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_b52703b292455617_23 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss22zgensym_b52703b292455617_23 = 0
			}
			for nextMiss22zgensym_b52703b292455617_23 < maxFields22zgensym_b52703b292455617_23 && (found22zgensym_b52703b292455617_23[nextMiss22zgensym_b52703b292455617_23] || decodeMsgFieldSkip22zgensym_b52703b292455617_23[nextMiss22zgensym_b52703b292455617_23]) {
				nextMiss22zgensym_b52703b292455617_23++
			}
			if nextMiss22zgensym_b52703b292455617_23 == maxFields22zgensym_b52703b292455617_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_b52703b292455617_23
			}
			missingFieldsLeft22zgensym_b52703b292455617_23--
			curField22zgensym_b52703b292455617_23 = decodeMsgFieldOrder22zgensym_b52703b292455617_23[nextMiss22zgensym_b52703b292455617_23]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField22zgensym_b52703b292455617_23)
		switch curField22zgensym_b52703b292455617_23 {
		// -- templateDecodeMsg ends here --

		case "Pack_zid00_slc":
			found22zgensym_b52703b292455617_23[0] = true
			var zgensym_b52703b292455617_24 uint32
			zgensym_b52703b292455617_24, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pack) >= int(zgensym_b52703b292455617_24) {
				z.Pack = (z.Pack)[:zgensym_b52703b292455617_24]
			} else {
				z.Pack = make([]*File, zgensym_b52703b292455617_24)
			}
			for zgensym_b52703b292455617_21 := range z.Pack {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Pack[zgensym_b52703b292455617_21] != nil {
						dc.PushAlwaysNil()
						err = z.Pack[zgensym_b52703b292455617_21].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Pack[zgensym_b52703b292455617_21] == nil {
						z.Pack[zgensym_b52703b292455617_21] = new(File)
					}
					dc.DedupIndexEachPtr(z.Pack[zgensym_b52703b292455617_21])

					err = z.Pack[zgensym_b52703b292455617_21].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "IsLast_zid01_boo":
			found22zgensym_b52703b292455617_23[1] = true
			z.IsLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "TotalFileBytes_zid02_i64":
			found22zgensym_b52703b292455617_23[2] = true
			z.TotalFileBytes, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_b52703b292455617_23 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfFiles
var decodeMsgFieldOrder22zgensym_b52703b292455617_23 = []string{"Pack_zid00_slc", "IsLast_zid01_boo", "TotalFileBytes_zid02_i64"}

var decodeMsgFieldSkip22zgensym_b52703b292455617_23 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PackOfFiles) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.Pack) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsLast) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.TotalFileBytes == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PackOfFiles) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_25 [3]bool
	fieldsInUse_zgensym_b52703b292455617_26 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_25[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_26 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PackOfFiles'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_25[0] {
		// write "Pack_zid00_slc"
		err = en.Append(0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Pack)))
		if err != nil {
			return
		}
		for zgensym_b52703b292455617_21 := range z.Pack {
			// gPtr.encodeGen():

			if z.Pack[zgensym_b52703b292455617_21] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Pack[zgensym_b52703b292455617_21].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_b52703b292455617_25[1] {
		// write "IsLast_zid01_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLast)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_b52703b292455617_25[2] {
		// write "TotalFileBytes_zid02_i64"
		err = en.Append(0xb8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.TotalFileBytes)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackOfFiles) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Pack_zid00_slc"
		o = append(o, 0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pack)))
		for zgensym_b52703b292455617_21 := range z.Pack {
			// marshalGen.gPtr()

			if z.Pack[zgensym_b52703b292455617_21] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Pack[zgensym_b52703b292455617_21].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "IsLast_zid01_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLast)
	}

	if !empty[2] {
		// string "TotalFileBytes_zid02_i64"
		o = append(o, 0xb8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.TotalFileBytes)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackOfFiles) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PackOfFiles) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields27zgensym_b52703b292455617_28 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields27zgensym_b52703b292455617_28 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields27zgensym_b52703b292455617_28, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft27zgensym_b52703b292455617_28 := totalEncodedFields27zgensym_b52703b292455617_28
	missingFieldsLeft27zgensym_b52703b292455617_28 := maxFields27zgensym_b52703b292455617_28 - totalEncodedFields27zgensym_b52703b292455617_28

	var nextMiss27zgensym_b52703b292455617_28 int32 = -1
	var found27zgensym_b52703b292455617_28 [maxFields27zgensym_b52703b292455617_28]bool
	var curField27zgensym_b52703b292455617_28 string

doneWithStruct27zgensym_b52703b292455617_28:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft27zgensym_b52703b292455617_28 > 0 || missingFieldsLeft27zgensym_b52703b292455617_28 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft27zgensym_b52703b292455617_28, missingFieldsLeft27zgensym_b52703b292455617_28, msgp.ShowFound(found27zgensym_b52703b292455617_28[:]), unmarshalMsgFieldOrder27zgensym_b52703b292455617_28)
		if encodedFieldsLeft27zgensym_b52703b292455617_28 > 0 {
			encodedFieldsLeft27zgensym_b52703b292455617_28--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField27zgensym_b52703b292455617_28 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss27zgensym_b52703b292455617_28 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss27zgensym_b52703b292455617_28 = 0
			}
			for nextMiss27zgensym_b52703b292455617_28 < maxFields27zgensym_b52703b292455617_28 && (found27zgensym_b52703b292455617_28[nextMiss27zgensym_b52703b292455617_28] || unmarshalMsgFieldSkip27zgensym_b52703b292455617_28[nextMiss27zgensym_b52703b292455617_28]) {
				nextMiss27zgensym_b52703b292455617_28++
			}
			if nextMiss27zgensym_b52703b292455617_28 == maxFields27zgensym_b52703b292455617_28 {
				// filled all the empty fields!
				break doneWithStruct27zgensym_b52703b292455617_28
			}
			missingFieldsLeft27zgensym_b52703b292455617_28--
			curField27zgensym_b52703b292455617_28 = unmarshalMsgFieldOrder27zgensym_b52703b292455617_28[nextMiss27zgensym_b52703b292455617_28]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField27zgensym_b52703b292455617_28)
		switch curField27zgensym_b52703b292455617_28 {
		// -- templateUnmarshalMsg ends here --

		case "Pack_zid00_slc":
			found27zgensym_b52703b292455617_28[0] = true
			if nbs.AlwaysNil {
				(z.Pack) = (z.Pack)[:0]
			} else {

				var zgensym_b52703b292455617_29 uint32
				zgensym_b52703b292455617_29, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Pack) >= int(zgensym_b52703b292455617_29) {
					z.Pack = (z.Pack)[:zgensym_b52703b292455617_29]
				} else {
					z.Pack = make([]*File, zgensym_b52703b292455617_29)
				}
				for zgensym_b52703b292455617_21 := range z.Pack {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Pack[zgensym_b52703b292455617_21] != nil {
							z.Pack[zgensym_b52703b292455617_21].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Pack[zgensym_b52703b292455617_21] {
								z.Pack[zgensym_b52703b292455617_21].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Pack[zgensym_b52703b292455617_21] == nil {
								z.Pack[zgensym_b52703b292455617_21] = new(File)
							}

							bts, err = z.Pack[zgensym_b52703b292455617_21].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "IsLast_zid01_boo":
			found27zgensym_b52703b292455617_28[1] = true
			z.IsLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "TotalFileBytes_zid02_i64":
			found27zgensym_b52703b292455617_28[2] = true
			z.TotalFileBytes, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss27zgensym_b52703b292455617_28 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfFiles
var unmarshalMsgFieldOrder27zgensym_b52703b292455617_28 = []string{"Pack_zid00_slc", "IsLast_zid01_boo", "TotalFileBytes_zid02_i64"}

var unmarshalMsgFieldSkip27zgensym_b52703b292455617_28 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackOfFiles) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_b52703b292455617_21 := range z.Pack {
		if z.Pack[zgensym_b52703b292455617_21] == nil {
			s += msgp.NilSize
		} else {
			s += z.Pack[zgensym_b52703b292455617_21].Msgsize()
		}
	}
	s += 17 + msgp.BoolSize + 25 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PackOfLeafPaths) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields31zgensym_b52703b292455617_32 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields31zgensym_b52703b292455617_32 uint32
	totalEncodedFields31zgensym_b52703b292455617_32, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft31zgensym_b52703b292455617_32 := totalEncodedFields31zgensym_b52703b292455617_32
	missingFieldsLeft31zgensym_b52703b292455617_32 := maxFields31zgensym_b52703b292455617_32 - totalEncodedFields31zgensym_b52703b292455617_32

	var nextMiss31zgensym_b52703b292455617_32 int32 = -1
	var found31zgensym_b52703b292455617_32 [maxFields31zgensym_b52703b292455617_32]bool
	var curField31zgensym_b52703b292455617_32 string

doneWithStruct31zgensym_b52703b292455617_32:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft31zgensym_b52703b292455617_32 > 0 || missingFieldsLeft31zgensym_b52703b292455617_32 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft31zgensym_b52703b292455617_32, missingFieldsLeft31zgensym_b52703b292455617_32, msgp.ShowFound(found31zgensym_b52703b292455617_32[:]), decodeMsgFieldOrder31zgensym_b52703b292455617_32)
		if encodedFieldsLeft31zgensym_b52703b292455617_32 > 0 {
			encodedFieldsLeft31zgensym_b52703b292455617_32--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField31zgensym_b52703b292455617_32 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss31zgensym_b52703b292455617_32 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss31zgensym_b52703b292455617_32 = 0
			}
			for nextMiss31zgensym_b52703b292455617_32 < maxFields31zgensym_b52703b292455617_32 && (found31zgensym_b52703b292455617_32[nextMiss31zgensym_b52703b292455617_32] || decodeMsgFieldSkip31zgensym_b52703b292455617_32[nextMiss31zgensym_b52703b292455617_32]) {
				nextMiss31zgensym_b52703b292455617_32++
			}
			if nextMiss31zgensym_b52703b292455617_32 == maxFields31zgensym_b52703b292455617_32 {
				// filled all the empty fields!
				break doneWithStruct31zgensym_b52703b292455617_32
			}
			missingFieldsLeft31zgensym_b52703b292455617_32--
			curField31zgensym_b52703b292455617_32 = decodeMsgFieldOrder31zgensym_b52703b292455617_32[nextMiss31zgensym_b52703b292455617_32]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField31zgensym_b52703b292455617_32)
		switch curField31zgensym_b52703b292455617_32 {
		// -- templateDecodeMsg ends here --

		case "Pack_zid00_slc":
			found31zgensym_b52703b292455617_32[0] = true
			var zgensym_b52703b292455617_33 uint32
			zgensym_b52703b292455617_33, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pack) >= int(zgensym_b52703b292455617_33) {
				z.Pack = (z.Pack)[:zgensym_b52703b292455617_33]
			} else {
				z.Pack = make([]string, zgensym_b52703b292455617_33)
			}
			for zgensym_b52703b292455617_30 := range z.Pack {
				z.Pack[zgensym_b52703b292455617_30], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "IsLast_zid01_boo":
			found31zgensym_b52703b292455617_32[1] = true
			z.IsLast, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss31zgensym_b52703b292455617_32 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfLeafPaths
var decodeMsgFieldOrder31zgensym_b52703b292455617_32 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var decodeMsgFieldSkip31zgensym_b52703b292455617_32 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PackOfLeafPaths) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Pack) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.IsLast) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PackOfLeafPaths) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_b52703b292455617_34 [2]bool
	fieldsInUse_zgensym_b52703b292455617_35 := z.fieldsNotEmpty(empty_zgensym_b52703b292455617_34[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_b52703b292455617_35 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PackOfLeafPaths'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x4c, 0x65, 0x61, 0x66, 0x50, 0x61, 0x74, 0x68, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_b52703b292455617_34[0] {
		// write "Pack_zid00_slc"
		err = en.Append(0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Pack)))
		if err != nil {
			return
		}
		for zgensym_b52703b292455617_30 := range z.Pack {
			err = en.WriteString(z.Pack[zgensym_b52703b292455617_30])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_b52703b292455617_34[1] {
		// write "IsLast_zid01_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLast)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackOfLeafPaths) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Pack_zid00_slc"
		o = append(o, 0xae, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pack)))
		for zgensym_b52703b292455617_30 := range z.Pack {
			o = msgp.AppendString(o, z.Pack[zgensym_b52703b292455617_30])
		}
	}

	if !empty[1] {
		// string "IsLast_zid01_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLast)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackOfLeafPaths) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PackOfLeafPaths) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields36zgensym_b52703b292455617_37 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields36zgensym_b52703b292455617_37 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields36zgensym_b52703b292455617_37, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft36zgensym_b52703b292455617_37 := totalEncodedFields36zgensym_b52703b292455617_37
	missingFieldsLeft36zgensym_b52703b292455617_37 := maxFields36zgensym_b52703b292455617_37 - totalEncodedFields36zgensym_b52703b292455617_37

	var nextMiss36zgensym_b52703b292455617_37 int32 = -1
	var found36zgensym_b52703b292455617_37 [maxFields36zgensym_b52703b292455617_37]bool
	var curField36zgensym_b52703b292455617_37 string

doneWithStruct36zgensym_b52703b292455617_37:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft36zgensym_b52703b292455617_37 > 0 || missingFieldsLeft36zgensym_b52703b292455617_37 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft36zgensym_b52703b292455617_37, missingFieldsLeft36zgensym_b52703b292455617_37, msgp.ShowFound(found36zgensym_b52703b292455617_37[:]), unmarshalMsgFieldOrder36zgensym_b52703b292455617_37)
		if encodedFieldsLeft36zgensym_b52703b292455617_37 > 0 {
			encodedFieldsLeft36zgensym_b52703b292455617_37--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField36zgensym_b52703b292455617_37 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss36zgensym_b52703b292455617_37 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss36zgensym_b52703b292455617_37 = 0
			}
			for nextMiss36zgensym_b52703b292455617_37 < maxFields36zgensym_b52703b292455617_37 && (found36zgensym_b52703b292455617_37[nextMiss36zgensym_b52703b292455617_37] || unmarshalMsgFieldSkip36zgensym_b52703b292455617_37[nextMiss36zgensym_b52703b292455617_37]) {
				nextMiss36zgensym_b52703b292455617_37++
			}
			if nextMiss36zgensym_b52703b292455617_37 == maxFields36zgensym_b52703b292455617_37 {
				// filled all the empty fields!
				break doneWithStruct36zgensym_b52703b292455617_37
			}
			missingFieldsLeft36zgensym_b52703b292455617_37--
			curField36zgensym_b52703b292455617_37 = unmarshalMsgFieldOrder36zgensym_b52703b292455617_37[nextMiss36zgensym_b52703b292455617_37]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField36zgensym_b52703b292455617_37)
		switch curField36zgensym_b52703b292455617_37 {
		// -- templateUnmarshalMsg ends here --

		case "Pack_zid00_slc":
			found36zgensym_b52703b292455617_37[0] = true
			if nbs.AlwaysNil {
				(z.Pack) = (z.Pack)[:0]
			} else {

				var zgensym_b52703b292455617_38 uint32
				zgensym_b52703b292455617_38, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Pack) >= int(zgensym_b52703b292455617_38) {
					z.Pack = (z.Pack)[:zgensym_b52703b292455617_38]
				} else {
					z.Pack = make([]string, zgensym_b52703b292455617_38)
				}
				for zgensym_b52703b292455617_30 := range z.Pack {
					z.Pack[zgensym_b52703b292455617_30], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "IsLast_zid01_boo":
			found36zgensym_b52703b292455617_37[1] = true
			z.IsLast, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss36zgensym_b52703b292455617_37 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PackOfLeafPaths
var unmarshalMsgFieldOrder36zgensym_b52703b292455617_37 = []string{"Pack_zid00_slc", "IsLast_zid01_boo"}

var unmarshalMsgFieldSkip36zgensym_b52703b292455617_37 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackOfLeafPaths) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_b52703b292455617_30 := range z.Pack {
		s += msgp.StringPrefixSize + len(z.Pack[zgensym_b52703b292455617_30])
	}
	s += 17 + msgp.BoolSize
	return
}
