// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package jsync

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RequestToSyncDir) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_5b8048e47f8e3c5c_1 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_5b8048e47f8e3c5c_1 uint32
	totalEncodedFields0zgensym_5b8048e47f8e3c5c_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_5b8048e47f8e3c5c_1 := totalEncodedFields0zgensym_5b8048e47f8e3c5c_1
	missingFieldsLeft0zgensym_5b8048e47f8e3c5c_1 := maxFields0zgensym_5b8048e47f8e3c5c_1 - totalEncodedFields0zgensym_5b8048e47f8e3c5c_1

	var nextMiss0zgensym_5b8048e47f8e3c5c_1 int32 = -1
	var found0zgensym_5b8048e47f8e3c5c_1 [maxFields0zgensym_5b8048e47f8e3c5c_1]bool
	var curField0zgensym_5b8048e47f8e3c5c_1 string

doneWithStruct0zgensym_5b8048e47f8e3c5c_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_5b8048e47f8e3c5c_1 > 0 || missingFieldsLeft0zgensym_5b8048e47f8e3c5c_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_5b8048e47f8e3c5c_1, missingFieldsLeft0zgensym_5b8048e47f8e3c5c_1, msgp.ShowFound(found0zgensym_5b8048e47f8e3c5c_1[:]), decodeMsgFieldOrder0zgensym_5b8048e47f8e3c5c_1)
		if encodedFieldsLeft0zgensym_5b8048e47f8e3c5c_1 > 0 {
			encodedFieldsLeft0zgensym_5b8048e47f8e3c5c_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_5b8048e47f8e3c5c_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_5b8048e47f8e3c5c_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_5b8048e47f8e3c5c_1 = 0
			}
			for nextMiss0zgensym_5b8048e47f8e3c5c_1 < maxFields0zgensym_5b8048e47f8e3c5c_1 && (found0zgensym_5b8048e47f8e3c5c_1[nextMiss0zgensym_5b8048e47f8e3c5c_1] || decodeMsgFieldSkip0zgensym_5b8048e47f8e3c5c_1[nextMiss0zgensym_5b8048e47f8e3c5c_1]) {
				nextMiss0zgensym_5b8048e47f8e3c5c_1++
			}
			if nextMiss0zgensym_5b8048e47f8e3c5c_1 == maxFields0zgensym_5b8048e47f8e3c5c_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_5b8048e47f8e3c5c_1
			}
			missingFieldsLeft0zgensym_5b8048e47f8e3c5c_1--
			curField0zgensym_5b8048e47f8e3c5c_1 = decodeMsgFieldOrder0zgensym_5b8048e47f8e3c5c_1[nextMiss0zgensym_5b8048e47f8e3c5c_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_5b8048e47f8e3c5c_1)
		switch curField0zgensym_5b8048e47f8e3c5c_1 {
		// -- templateDecodeMsg ends here --

		case "GiverDir_zid00_str":
			found0zgensym_5b8048e47f8e3c5c_1[0] = true
			z.GiverDir, err = dc.ReadString()
			if err != nil {
				return
			}
		case "TakerDir_zid01_str":
			found0zgensym_5b8048e47f8e3c5c_1[1] = true
			z.TakerDir, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemoteTakes_zid02_boo":
			found0zgensym_5b8048e47f8e3c5c_1[2] = true
			z.RemoteTakes, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "SR_zid03_ptr":
			found0zgensym_5b8048e47f8e3c5c_1[3] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SR != nil {
					dc.PushAlwaysNil()
					err = z.SR.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SR == nil {
					z.SR = new(RequestToSyncPath)
				}
				dc.DedupIndexEachPtr(z.SR)

				err = z.SR.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_5b8048e47f8e3c5c_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RequestToSyncDir
var decodeMsgFieldOrder0zgensym_5b8048e47f8e3c5c_1 = []string{"GiverDir_zid00_str", "TakerDir_zid01_str", "RemoteTakes_zid02_boo", "SR_zid03_ptr"}

var decodeMsgFieldSkip0zgensym_5b8048e47f8e3c5c_1 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RequestToSyncDir) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (len(z.GiverDir) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.TakerDir) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (!z.RemoteTakes) // bool, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.SR == nil) // pointer, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RequestToSyncDir) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_5b8048e47f8e3c5c_2 [4]bool
	fieldsInUse_zgensym_5b8048e47f8e3c5c_3 := z.fieldsNotEmpty(empty_zgensym_5b8048e47f8e3c5c_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_5b8048e47f8e3c5c_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RequestToSyncDir'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_5b8048e47f8e3c5c_2[0] {
		// write "GiverDir_zid00_str"
		err = en.Append(0xb2, 0x47, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.GiverDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_2[1] {
		// write "TakerDir_zid01_str"
		err = en.Append(0xb2, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.TakerDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_2[2] {
		// write "RemoteTakes_zid02_boo"
		err = en.Append(0xb5, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.RemoteTakes)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_2[3] {
		// write "SR_zid03_ptr"
		err = en.Append(0xac, 0x53, 0x52, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SR == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.SR.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RequestToSyncDir) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "GiverDir_zid00_str"
		o = append(o, 0xb2, 0x47, 0x69, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.GiverDir)
	}

	if !empty[1] {
		// string "TakerDir_zid01_str"
		o = append(o, 0xb2, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.TakerDir)
	}

	if !empty[2] {
		// string "RemoteTakes_zid02_boo"
		o = append(o, 0xb5, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.RemoteTakes)
	}

	if !empty[3] {
		// string "SR_zid03_ptr"
		o = append(o, 0xac, 0x53, 0x52, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SR == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SR.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestToSyncDir) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RequestToSyncDir) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_5b8048e47f8e3c5c_5 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_5b8048e47f8e3c5c_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_5b8048e47f8e3c5c_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_5b8048e47f8e3c5c_5 := totalEncodedFields4zgensym_5b8048e47f8e3c5c_5
	missingFieldsLeft4zgensym_5b8048e47f8e3c5c_5 := maxFields4zgensym_5b8048e47f8e3c5c_5 - totalEncodedFields4zgensym_5b8048e47f8e3c5c_5

	var nextMiss4zgensym_5b8048e47f8e3c5c_5 int32 = -1
	var found4zgensym_5b8048e47f8e3c5c_5 [maxFields4zgensym_5b8048e47f8e3c5c_5]bool
	var curField4zgensym_5b8048e47f8e3c5c_5 string

doneWithStruct4zgensym_5b8048e47f8e3c5c_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_5b8048e47f8e3c5c_5 > 0 || missingFieldsLeft4zgensym_5b8048e47f8e3c5c_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_5b8048e47f8e3c5c_5, missingFieldsLeft4zgensym_5b8048e47f8e3c5c_5, msgp.ShowFound(found4zgensym_5b8048e47f8e3c5c_5[:]), unmarshalMsgFieldOrder4zgensym_5b8048e47f8e3c5c_5)
		if encodedFieldsLeft4zgensym_5b8048e47f8e3c5c_5 > 0 {
			encodedFieldsLeft4zgensym_5b8048e47f8e3c5c_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_5b8048e47f8e3c5c_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_5b8048e47f8e3c5c_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_5b8048e47f8e3c5c_5 = 0
			}
			for nextMiss4zgensym_5b8048e47f8e3c5c_5 < maxFields4zgensym_5b8048e47f8e3c5c_5 && (found4zgensym_5b8048e47f8e3c5c_5[nextMiss4zgensym_5b8048e47f8e3c5c_5] || unmarshalMsgFieldSkip4zgensym_5b8048e47f8e3c5c_5[nextMiss4zgensym_5b8048e47f8e3c5c_5]) {
				nextMiss4zgensym_5b8048e47f8e3c5c_5++
			}
			if nextMiss4zgensym_5b8048e47f8e3c5c_5 == maxFields4zgensym_5b8048e47f8e3c5c_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_5b8048e47f8e3c5c_5
			}
			missingFieldsLeft4zgensym_5b8048e47f8e3c5c_5--
			curField4zgensym_5b8048e47f8e3c5c_5 = unmarshalMsgFieldOrder4zgensym_5b8048e47f8e3c5c_5[nextMiss4zgensym_5b8048e47f8e3c5c_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_5b8048e47f8e3c5c_5)
		switch curField4zgensym_5b8048e47f8e3c5c_5 {
		// -- templateUnmarshalMsg ends here --

		case "GiverDir_zid00_str":
			found4zgensym_5b8048e47f8e3c5c_5[0] = true
			z.GiverDir, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "TakerDir_zid01_str":
			found4zgensym_5b8048e47f8e3c5c_5[1] = true
			z.TakerDir, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemoteTakes_zid02_boo":
			found4zgensym_5b8048e47f8e3c5c_5[2] = true
			z.RemoteTakes, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "SR_zid03_ptr":
			found4zgensym_5b8048e47f8e3c5c_5[3] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.SR", alias:"RequestToSyncPath", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SR != nil {
					z.SR.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SR {
						z.SR.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SR == nil {
						z.SR = new(RequestToSyncPath)
					}

					bts, err = z.SR.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_5b8048e47f8e3c5c_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RequestToSyncDir
var unmarshalMsgFieldOrder4zgensym_5b8048e47f8e3c5c_5 = []string{"GiverDir_zid00_str", "TakerDir_zid01_str", "RemoteTakes_zid02_boo", "SR_zid03_ptr"}

var unmarshalMsgFieldSkip4zgensym_5b8048e47f8e3c5c_5 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestToSyncDir) Msgsize() (s int) {
	s = 1 + 19 + msgp.StringPrefixSize + len(z.GiverDir) + 19 + msgp.StringPrefixSize + len(z.TakerDir) + 22 + msgp.BoolSize + 13
	if z.SR == nil {
		s += msgp.NilSize
	} else {
		s += z.SR.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RequestToSyncPath) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_5b8048e47f8e3c5c_7 = 30

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_5b8048e47f8e3c5c_7 uint32
	totalEncodedFields6zgensym_5b8048e47f8e3c5c_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_5b8048e47f8e3c5c_7 := totalEncodedFields6zgensym_5b8048e47f8e3c5c_7
	missingFieldsLeft6zgensym_5b8048e47f8e3c5c_7 := maxFields6zgensym_5b8048e47f8e3c5c_7 - totalEncodedFields6zgensym_5b8048e47f8e3c5c_7

	var nextMiss6zgensym_5b8048e47f8e3c5c_7 int32 = -1
	var found6zgensym_5b8048e47f8e3c5c_7 [maxFields6zgensym_5b8048e47f8e3c5c_7]bool
	var curField6zgensym_5b8048e47f8e3c5c_7 string

doneWithStruct6zgensym_5b8048e47f8e3c5c_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_5b8048e47f8e3c5c_7 > 0 || missingFieldsLeft6zgensym_5b8048e47f8e3c5c_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_5b8048e47f8e3c5c_7, missingFieldsLeft6zgensym_5b8048e47f8e3c5c_7, msgp.ShowFound(found6zgensym_5b8048e47f8e3c5c_7[:]), decodeMsgFieldOrder6zgensym_5b8048e47f8e3c5c_7)
		if encodedFieldsLeft6zgensym_5b8048e47f8e3c5c_7 > 0 {
			encodedFieldsLeft6zgensym_5b8048e47f8e3c5c_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_5b8048e47f8e3c5c_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_5b8048e47f8e3c5c_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_5b8048e47f8e3c5c_7 = 0
			}
			for nextMiss6zgensym_5b8048e47f8e3c5c_7 < maxFields6zgensym_5b8048e47f8e3c5c_7 && (found6zgensym_5b8048e47f8e3c5c_7[nextMiss6zgensym_5b8048e47f8e3c5c_7] || decodeMsgFieldSkip6zgensym_5b8048e47f8e3c5c_7[nextMiss6zgensym_5b8048e47f8e3c5c_7]) {
				nextMiss6zgensym_5b8048e47f8e3c5c_7++
			}
			if nextMiss6zgensym_5b8048e47f8e3c5c_7 == maxFields6zgensym_5b8048e47f8e3c5c_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_5b8048e47f8e3c5c_7
			}
			missingFieldsLeft6zgensym_5b8048e47f8e3c5c_7--
			curField6zgensym_5b8048e47f8e3c5c_7 = decodeMsgFieldOrder6zgensym_5b8048e47f8e3c5c_7[nextMiss6zgensym_5b8048e47f8e3c5c_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_5b8048e47f8e3c5c_7)
		switch curField6zgensym_5b8048e47f8e3c5c_7 {
		// -- templateDecodeMsg ends here --

		case "GiverPath_zid00_str":
			found6zgensym_5b8048e47f8e3c5c_7[0] = true
			z.GiverPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "TakerPath_zid01_str":
			found6zgensym_5b8048e47f8e3c5c_7[1] = true
			z.TakerPath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ModTime_zid02_tim":
			found6zgensym_5b8048e47f8e3c5c_7[2] = true
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "FileSize_zid03_i64":
			found6zgensym_5b8048e47f8e3c5c_7[3] = true
			z.FileSize, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FileMode_zid04_u32":
			found6zgensym_5b8048e47f8e3c5c_7[4] = true
			z.FileMode, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "ToRemotePeerServiceName_zid05_str":
			found6zgensym_5b8048e47f8e3c5c_7[5] = true
			z.ToRemotePeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ToRemoteNetAddr_zid06_str":
			found6zgensym_5b8048e47f8e3c5c_7[6] = true
			z.ToRemoteNetAddr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ToRemoteURL_zid07_str":
			found6zgensym_5b8048e47f8e3c5c_7[7] = true
			z.ToRemoteURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ToRemotePeerID_zid08_str":
			found6zgensym_5b8048e47f8e3c5c_7[8] = true
			z.ToRemotePeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SyncFromHostname_zid09_str":
			found6zgensym_5b8048e47f8e3c5c_7[9] = true
			z.SyncFromHostname, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SyncFromHostCID_zid10_str":
			found6zgensym_5b8048e47f8e3c5c_7[10] = true
			z.SyncFromHostCID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FullFileInitSideBlake3_zid11_str":
			found6zgensym_5b8048e47f8e3c5c_7[11] = true
			z.FullFileInitSideBlake3, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FullFileRespondSideBlake3_zid12_str":
			found6zgensym_5b8048e47f8e3c5c_7[12] = true
			z.FullFileRespondSideBlake3, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SizeModTimeMatch_zid13_boo":
			found6zgensym_5b8048e47f8e3c5c_7[13] = true
			z.SizeModTimeMatch, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "AbsDir_zid14_str":
			found6zgensym_5b8048e47f8e3c5c_7[14] = true
			z.AbsDir, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Errs_zid15_str":
			found6zgensym_5b8048e47f8e3c5c_7[15] = true
			z.Errs, err = dc.ReadString()
			if err != nil {
				return
			}
		case "BytesSent_zid16_i64":
			found6zgensym_5b8048e47f8e3c5c_7[16] = true
			z.BytesSent, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "BytesRead_zid17_i64":
			found6zgensym_5b8048e47f8e3c5c_7[17] = true
			z.BytesRead, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "RemoteBytesTransferred_zid18_i64":
			found6zgensym_5b8048e47f8e3c5c_7[18] = true
			z.RemoteBytesTransferred, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "MoreChunksComming_zid19_boo":
			found6zgensym_5b8048e47f8e3c5c_7[19] = true
			z.MoreChunksComming, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "RemoteTakes_zid20_boo":
			found6zgensym_5b8048e47f8e3c5c_7[20] = true
			z.RemoteTakes, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Precis_zid21_ptr":
			found6zgensym_5b8048e47f8e3c5c_7[21] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Precis != nil {
					dc.PushAlwaysNil()
					err = z.Precis.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Precis == nil {
					z.Precis = new(FilePrecis)
				}
				dc.DedupIndexEachPtr(z.Precis)

				err = z.Precis.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Chunks_zid22_ptr":
			found6zgensym_5b8048e47f8e3c5c_7[22] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Chunks != nil {
					dc.PushAlwaysNil()
					err = z.Chunks.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Chunks == nil {
					z.Chunks = new(Chunks)
				}
				dc.DedupIndexEachPtr(z.Chunks)

				err = z.Chunks.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "GiverIsDir_zid23_boo":
			found6zgensym_5b8048e47f8e3c5c_7[23] = true
			z.GiverIsDir, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "TakerIsDir_zid24_boo":
			found6zgensym_5b8048e47f8e3c5c_7[24] = true
			z.TakerIsDir, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "GiverExistsLocal_zid25_boo":
			found6zgensym_5b8048e47f8e3c5c_7[25] = true
			z.GiverExistsLocal, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "TakerExistsLocal_zid26_boo":
			found6zgensym_5b8048e47f8e3c5c_7[26] = true
			z.TakerExistsLocal, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "TakerStartsEmpty_zid27_boo":
			found6zgensym_5b8048e47f8e3c5c_7[27] = true
			z.TakerStartsEmpty, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "GiverStartsEmpty_zid28_boo":
			found6zgensym_5b8048e47f8e3c5c_7[28] = true
			z.GiverStartsEmpty, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_5b8048e47f8e3c5c_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RequestToSyncPath
var decodeMsgFieldOrder6zgensym_5b8048e47f8e3c5c_7 = []string{"GiverPath_zid00_str", "TakerPath_zid01_str", "ModTime_zid02_tim", "FileSize_zid03_i64", "FileMode_zid04_u32", "ToRemotePeerServiceName_zid05_str", "ToRemoteNetAddr_zid06_str", "ToRemoteURL_zid07_str", "ToRemotePeerID_zid08_str", "SyncFromHostname_zid09_str", "SyncFromHostCID_zid10_str", "FullFileInitSideBlake3_zid11_str", "FullFileRespondSideBlake3_zid12_str", "SizeModTimeMatch_zid13_boo", "AbsDir_zid14_str", "Errs_zid15_str", "BytesSent_zid16_i64", "BytesRead_zid17_i64", "RemoteBytesTransferred_zid18_i64", "MoreChunksComming_zid19_boo", "RemoteTakes_zid20_boo", "Precis_zid21_ptr", "Chunks_zid22_ptr", "GiverIsDir_zid23_boo", "TakerIsDir_zid24_boo", "GiverExistsLocal_zid25_boo", "TakerExistsLocal_zid26_boo", "TakerStartsEmpty_zid27_boo", "GiverStartsEmpty_zid28_boo", ""}

var decodeMsgFieldSkip6zgensym_5b8048e47f8e3c5c_7 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *RequestToSyncPath) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 29
	}
	var fieldsInUse uint32 = 29
	isempty[0] = (len(z.GiverPath) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.TakerPath) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ModTime.IsZero()) // time.Time, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.FileSize == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.FileMode == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ToRemotePeerServiceName) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.ToRemoteNetAddr) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.ToRemoteURL) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.ToRemotePeerID) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.SyncFromHostname) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.SyncFromHostCID) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.FullFileInitSideBlake3) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (len(z.FullFileRespondSideBlake3) == 0) // string, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (!z.SizeModTimeMatch) // bool, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (len(z.AbsDir) == 0) // string, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (len(z.Errs) == 0) // string, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.BytesSent == 0) // number, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (z.BytesRead == 0) // number, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (z.RemoteBytesTransferred == 0) // number, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (!z.MoreChunksComming) // bool, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (!z.RemoteTakes) // bool, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = (z.Precis == nil) // pointer, omitempty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (z.Chunks == nil) // pointer, omitempty
	if isempty[22] {
		fieldsInUse--
	}
	isempty[23] = (!z.GiverIsDir) // bool, omitempty
	if isempty[23] {
		fieldsInUse--
	}
	isempty[24] = (!z.TakerIsDir) // bool, omitempty
	if isempty[24] {
		fieldsInUse--
	}
	isempty[25] = (!z.GiverExistsLocal) // bool, omitempty
	if isempty[25] {
		fieldsInUse--
	}
	isempty[26] = (!z.TakerExistsLocal) // bool, omitempty
	if isempty[26] {
		fieldsInUse--
	}
	isempty[27] = (!z.TakerStartsEmpty) // bool, omitempty
	if isempty[27] {
		fieldsInUse--
	}
	isempty[28] = (!z.GiverStartsEmpty) // bool, omitempty
	if isempty[28] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RequestToSyncPath) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_5b8048e47f8e3c5c_8 [30]bool
	fieldsInUse_zgensym_5b8048e47f8e3c5c_9 := z.fieldsNotEmpty(empty_zgensym_5b8048e47f8e3c5c_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_5b8048e47f8e3c5c_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RequestToSyncPath'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x74, 0x68})
	if err != nil {
		return err
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[0] {
		// write "GiverPath_zid00_str"
		err = en.Append(0xb3, 0x47, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.GiverPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[1] {
		// write "TakerPath_zid01_str"
		err = en.Append(0xb3, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.TakerPath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[2] {
		// write "ModTime_zid02_tim"
		err = en.Append(0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ModTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[3] {
		// write "FileSize_zid03_i64"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FileSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[4] {
		// write "FileMode_zid04_u32"
		err = en.Append(0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.FileMode)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[5] {
		// write "ToRemotePeerServiceName_zid05_str"
		err = en.Append(0xd9, 0x21, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ToRemotePeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[6] {
		// write "ToRemoteNetAddr_zid06_str"
		err = en.Append(0xb9, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ToRemoteNetAddr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[7] {
		// write "ToRemoteURL_zid07_str"
		err = en.Append(0xb5, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ToRemoteURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[8] {
		// write "ToRemotePeerID_zid08_str"
		err = en.Append(0xb8, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ToRemotePeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[9] {
		// write "SyncFromHostname_zid09_str"
		err = en.Append(0xba, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SyncFromHostname)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[10] {
		// write "SyncFromHostCID_zid10_str"
		err = en.Append(0xb9, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SyncFromHostCID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[11] {
		// write "FullFileInitSideBlake3_zid11_str"
		err = en.Append(0xd9, 0x20, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x64, 0x65, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FullFileInitSideBlake3)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[12] {
		// write "FullFileRespondSideBlake3_zid12_str"
		err = en.Append(0xd9, 0x23, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FullFileRespondSideBlake3)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[13] {
		// write "SizeModTimeMatch_zid13_boo"
		err = en.Append(0xba, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.SizeModTimeMatch)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[14] {
		// write "AbsDir_zid14_str"
		err = en.Append(0xb0, 0x41, 0x62, 0x73, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AbsDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[15] {
		// write "Errs_zid15_str"
		err = en.Append(0xae, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Errs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[16] {
		// write "BytesSent_zid16_i64"
		err = en.Append(0xb3, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.BytesSent)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[17] {
		// write "BytesRead_zid17_i64"
		err = en.Append(0xb3, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.BytesRead)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[18] {
		// write "RemoteBytesTransferred_zid18_i64"
		err = en.Append(0xd9, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.RemoteBytesTransferred)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[19] {
		// write "MoreChunksComming_zid19_boo"
		err = en.Append(0xbb, 0x4d, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.MoreChunksComming)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[20] {
		// write "RemoteTakes_zid20_boo"
		err = en.Append(0xb5, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.RemoteTakes)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[21] {
		// write "Precis_zid21_ptr"
		err = en.Append(0xb0, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Precis == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Precis.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[22] {
		// write "Chunks_zid22_ptr"
		err = en.Append(0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Chunks == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Chunks.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[23] {
		// write "GiverIsDir_zid23_boo"
		err = en.Append(0xb4, 0x47, 0x69, 0x76, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.GiverIsDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[24] {
		// write "TakerIsDir_zid24_boo"
		err = en.Append(0xb4, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.TakerIsDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[25] {
		// write "GiverExistsLocal_zid25_boo"
		err = en.Append(0xba, 0x47, 0x69, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.GiverExistsLocal)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[26] {
		// write "TakerExistsLocal_zid26_boo"
		err = en.Append(0xba, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.TakerExistsLocal)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[27] {
		// write "TakerStartsEmpty_zid27_boo"
		err = en.Append(0xba, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.TakerStartsEmpty)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_5b8048e47f8e3c5c_8[28] {
		// write "GiverStartsEmpty_zid28_boo"
		err = en.Append(0xba, 0x47, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.GiverStartsEmpty)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RequestToSyncPath) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [30]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "GiverPath_zid00_str"
		o = append(o, 0xb3, 0x47, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.GiverPath)
	}

	if !empty[1] {
		// string "TakerPath_zid01_str"
		o = append(o, 0xb3, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.TakerPath)
	}

	if !empty[2] {
		// string "ModTime_zid02_tim"
		o = append(o, 0xb1, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ModTime)
	}

	if !empty[3] {
		// string "FileSize_zid03_i64"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FileSize)
	}

	if !empty[4] {
		// string "FileMode_zid04_u32"
		o = append(o, 0xb2, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.FileMode)
	}

	if !empty[5] {
		// string "ToRemotePeerServiceName_zid05_str"
		o = append(o, 0xd9, 0x21, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ToRemotePeerServiceName)
	}

	if !empty[6] {
		// string "ToRemoteNetAddr_zid06_str"
		o = append(o, 0xb9, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ToRemoteNetAddr)
	}

	if !empty[7] {
		// string "ToRemoteURL_zid07_str"
		o = append(o, 0xb5, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ToRemoteURL)
	}

	if !empty[8] {
		// string "ToRemotePeerID_zid08_str"
		o = append(o, 0xb8, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ToRemotePeerID)
	}

	if !empty[9] {
		// string "SyncFromHostname_zid09_str"
		o = append(o, 0xba, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SyncFromHostname)
	}

	if !empty[10] {
		// string "SyncFromHostCID_zid10_str"
		o = append(o, 0xb9, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SyncFromHostCID)
	}

	if !empty[11] {
		// string "FullFileInitSideBlake3_zid11_str"
		o = append(o, 0xd9, 0x20, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x64, 0x65, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FullFileInitSideBlake3)
	}

	if !empty[12] {
		// string "FullFileRespondSideBlake3_zid12_str"
		o = append(o, 0xd9, 0x23, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FullFileRespondSideBlake3)
	}

	if !empty[13] {
		// string "SizeModTimeMatch_zid13_boo"
		o = append(o, 0xba, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.SizeModTimeMatch)
	}

	if !empty[14] {
		// string "AbsDir_zid14_str"
		o = append(o, 0xb0, 0x41, 0x62, 0x73, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AbsDir)
	}

	if !empty[15] {
		// string "Errs_zid15_str"
		o = append(o, 0xae, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Errs)
	}

	if !empty[16] {
		// string "BytesSent_zid16_i64"
		o = append(o, 0xb3, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.BytesSent)
	}

	if !empty[17] {
		// string "BytesRead_zid17_i64"
		o = append(o, 0xb3, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.BytesRead)
	}

	if !empty[18] {
		// string "RemoteBytesTransferred_zid18_i64"
		o = append(o, 0xd9, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.RemoteBytesTransferred)
	}

	if !empty[19] {
		// string "MoreChunksComming_zid19_boo"
		o = append(o, 0xbb, 0x4d, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.MoreChunksComming)
	}

	if !empty[20] {
		// string "RemoteTakes_zid20_boo"
		o = append(o, 0xb5, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.RemoteTakes)
	}

	if !empty[21] {
		// string "Precis_zid21_ptr"
		o = append(o, 0xb0, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Precis == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Precis.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[22] {
		// string "Chunks_zid22_ptr"
		o = append(o, 0xb0, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Chunks == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Chunks.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[23] {
		// string "GiverIsDir_zid23_boo"
		o = append(o, 0xb4, 0x47, 0x69, 0x76, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.GiverIsDir)
	}

	if !empty[24] {
		// string "TakerIsDir_zid24_boo"
		o = append(o, 0xb4, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.TakerIsDir)
	}

	if !empty[25] {
		// string "GiverExistsLocal_zid25_boo"
		o = append(o, 0xba, 0x47, 0x69, 0x76, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.GiverExistsLocal)
	}

	if !empty[26] {
		// string "TakerExistsLocal_zid26_boo"
		o = append(o, 0xba, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.TakerExistsLocal)
	}

	if !empty[27] {
		// string "TakerStartsEmpty_zid27_boo"
		o = append(o, 0xba, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.TakerStartsEmpty)
	}

	if !empty[28] {
		// string "GiverStartsEmpty_zid28_boo"
		o = append(o, 0xba, 0x47, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.GiverStartsEmpty)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestToSyncPath) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RequestToSyncPath) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_5b8048e47f8e3c5c_11 = 30

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_5b8048e47f8e3c5c_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_5b8048e47f8e3c5c_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_5b8048e47f8e3c5c_11 := totalEncodedFields10zgensym_5b8048e47f8e3c5c_11
	missingFieldsLeft10zgensym_5b8048e47f8e3c5c_11 := maxFields10zgensym_5b8048e47f8e3c5c_11 - totalEncodedFields10zgensym_5b8048e47f8e3c5c_11

	var nextMiss10zgensym_5b8048e47f8e3c5c_11 int32 = -1
	var found10zgensym_5b8048e47f8e3c5c_11 [maxFields10zgensym_5b8048e47f8e3c5c_11]bool
	var curField10zgensym_5b8048e47f8e3c5c_11 string

doneWithStruct10zgensym_5b8048e47f8e3c5c_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_5b8048e47f8e3c5c_11 > 0 || missingFieldsLeft10zgensym_5b8048e47f8e3c5c_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_5b8048e47f8e3c5c_11, missingFieldsLeft10zgensym_5b8048e47f8e3c5c_11, msgp.ShowFound(found10zgensym_5b8048e47f8e3c5c_11[:]), unmarshalMsgFieldOrder10zgensym_5b8048e47f8e3c5c_11)
		if encodedFieldsLeft10zgensym_5b8048e47f8e3c5c_11 > 0 {
			encodedFieldsLeft10zgensym_5b8048e47f8e3c5c_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_5b8048e47f8e3c5c_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_5b8048e47f8e3c5c_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_5b8048e47f8e3c5c_11 = 0
			}
			for nextMiss10zgensym_5b8048e47f8e3c5c_11 < maxFields10zgensym_5b8048e47f8e3c5c_11 && (found10zgensym_5b8048e47f8e3c5c_11[nextMiss10zgensym_5b8048e47f8e3c5c_11] || unmarshalMsgFieldSkip10zgensym_5b8048e47f8e3c5c_11[nextMiss10zgensym_5b8048e47f8e3c5c_11]) {
				nextMiss10zgensym_5b8048e47f8e3c5c_11++
			}
			if nextMiss10zgensym_5b8048e47f8e3c5c_11 == maxFields10zgensym_5b8048e47f8e3c5c_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_5b8048e47f8e3c5c_11
			}
			missingFieldsLeft10zgensym_5b8048e47f8e3c5c_11--
			curField10zgensym_5b8048e47f8e3c5c_11 = unmarshalMsgFieldOrder10zgensym_5b8048e47f8e3c5c_11[nextMiss10zgensym_5b8048e47f8e3c5c_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_5b8048e47f8e3c5c_11)
		switch curField10zgensym_5b8048e47f8e3c5c_11 {
		// -- templateUnmarshalMsg ends here --

		case "GiverPath_zid00_str":
			found10zgensym_5b8048e47f8e3c5c_11[0] = true
			z.GiverPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "TakerPath_zid01_str":
			found10zgensym_5b8048e47f8e3c5c_11[1] = true
			z.TakerPath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ModTime_zid02_tim":
			found10zgensym_5b8048e47f8e3c5c_11[2] = true
			z.ModTime, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "FileSize_zid03_i64":
			found10zgensym_5b8048e47f8e3c5c_11[3] = true
			z.FileSize, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FileMode_zid04_u32":
			found10zgensym_5b8048e47f8e3c5c_11[4] = true
			z.FileMode, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "ToRemotePeerServiceName_zid05_str":
			found10zgensym_5b8048e47f8e3c5c_11[5] = true
			z.ToRemotePeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ToRemoteNetAddr_zid06_str":
			found10zgensym_5b8048e47f8e3c5c_11[6] = true
			z.ToRemoteNetAddr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ToRemoteURL_zid07_str":
			found10zgensym_5b8048e47f8e3c5c_11[7] = true
			z.ToRemoteURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ToRemotePeerID_zid08_str":
			found10zgensym_5b8048e47f8e3c5c_11[8] = true
			z.ToRemotePeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SyncFromHostname_zid09_str":
			found10zgensym_5b8048e47f8e3c5c_11[9] = true
			z.SyncFromHostname, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SyncFromHostCID_zid10_str":
			found10zgensym_5b8048e47f8e3c5c_11[10] = true
			z.SyncFromHostCID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FullFileInitSideBlake3_zid11_str":
			found10zgensym_5b8048e47f8e3c5c_11[11] = true
			z.FullFileInitSideBlake3, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FullFileRespondSideBlake3_zid12_str":
			found10zgensym_5b8048e47f8e3c5c_11[12] = true
			z.FullFileRespondSideBlake3, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SizeModTimeMatch_zid13_boo":
			found10zgensym_5b8048e47f8e3c5c_11[13] = true
			z.SizeModTimeMatch, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "AbsDir_zid14_str":
			found10zgensym_5b8048e47f8e3c5c_11[14] = true
			z.AbsDir, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Errs_zid15_str":
			found10zgensym_5b8048e47f8e3c5c_11[15] = true
			z.Errs, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "BytesSent_zid16_i64":
			found10zgensym_5b8048e47f8e3c5c_11[16] = true
			z.BytesSent, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "BytesRead_zid17_i64":
			found10zgensym_5b8048e47f8e3c5c_11[17] = true
			z.BytesRead, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "RemoteBytesTransferred_zid18_i64":
			found10zgensym_5b8048e47f8e3c5c_11[18] = true
			z.RemoteBytesTransferred, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "MoreChunksComming_zid19_boo":
			found10zgensym_5b8048e47f8e3c5c_11[19] = true
			z.MoreChunksComming, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "RemoteTakes_zid20_boo":
			found10zgensym_5b8048e47f8e3c5c_11[20] = true
			z.RemoteTakes, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Precis_zid21_ptr":
			found10zgensym_5b8048e47f8e3c5c_11[21] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Precis", alias:"FilePrecis", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Precis != nil {
					z.Precis.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Precis {
						z.Precis.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Precis == nil {
						z.Precis = new(FilePrecis)
					}

					bts, err = z.Precis.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Chunks_zid22_ptr":
			found10zgensym_5b8048e47f8e3c5c_11[22] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Chunks", alias:"Chunks", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Chunks != nil {
					z.Chunks.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Chunks {
						z.Chunks.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Chunks == nil {
						z.Chunks = new(Chunks)
					}

					bts, err = z.Chunks.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "GiverIsDir_zid23_boo":
			found10zgensym_5b8048e47f8e3c5c_11[23] = true
			z.GiverIsDir, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "TakerIsDir_zid24_boo":
			found10zgensym_5b8048e47f8e3c5c_11[24] = true
			z.TakerIsDir, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "GiverExistsLocal_zid25_boo":
			found10zgensym_5b8048e47f8e3c5c_11[25] = true
			z.GiverExistsLocal, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "TakerExistsLocal_zid26_boo":
			found10zgensym_5b8048e47f8e3c5c_11[26] = true
			z.TakerExistsLocal, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "TakerStartsEmpty_zid27_boo":
			found10zgensym_5b8048e47f8e3c5c_11[27] = true
			z.TakerStartsEmpty, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "GiverStartsEmpty_zid28_boo":
			found10zgensym_5b8048e47f8e3c5c_11[28] = true
			z.GiverStartsEmpty, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_5b8048e47f8e3c5c_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RequestToSyncPath
var unmarshalMsgFieldOrder10zgensym_5b8048e47f8e3c5c_11 = []string{"GiverPath_zid00_str", "TakerPath_zid01_str", "ModTime_zid02_tim", "FileSize_zid03_i64", "FileMode_zid04_u32", "ToRemotePeerServiceName_zid05_str", "ToRemoteNetAddr_zid06_str", "ToRemoteURL_zid07_str", "ToRemotePeerID_zid08_str", "SyncFromHostname_zid09_str", "SyncFromHostCID_zid10_str", "FullFileInitSideBlake3_zid11_str", "FullFileRespondSideBlake3_zid12_str", "SizeModTimeMatch_zid13_boo", "AbsDir_zid14_str", "Errs_zid15_str", "BytesSent_zid16_i64", "BytesRead_zid17_i64", "RemoteBytesTransferred_zid18_i64", "MoreChunksComming_zid19_boo", "RemoteTakes_zid20_boo", "Precis_zid21_ptr", "Chunks_zid22_ptr", "GiverIsDir_zid23_boo", "TakerIsDir_zid24_boo", "GiverExistsLocal_zid25_boo", "TakerExistsLocal_zid26_boo", "TakerStartsEmpty_zid27_boo", "GiverStartsEmpty_zid28_boo", ""}

var unmarshalMsgFieldSkip10zgensym_5b8048e47f8e3c5c_11 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestToSyncPath) Msgsize() (s int) {
	s = 3 + 20 + msgp.StringPrefixSize + len(z.GiverPath) + 20 + msgp.StringPrefixSize + len(z.TakerPath) + 18 + msgp.TimeSize + 19 + msgp.Int64Size + 19 + msgp.Uint32Size + 35 + msgp.StringPrefixSize + len(z.ToRemotePeerServiceName) + 26 + msgp.StringPrefixSize + len(z.ToRemoteNetAddr) + 22 + msgp.StringPrefixSize + len(z.ToRemoteURL) + 25 + msgp.StringPrefixSize + len(z.ToRemotePeerID) + 27 + msgp.StringPrefixSize + len(z.SyncFromHostname) + 26 + msgp.StringPrefixSize + len(z.SyncFromHostCID) + 34 + msgp.StringPrefixSize + len(z.FullFileInitSideBlake3) + 37 + msgp.StringPrefixSize + len(z.FullFileRespondSideBlake3) + 27 + msgp.BoolSize + 17 + msgp.StringPrefixSize + len(z.AbsDir) + 15 + msgp.StringPrefixSize + len(z.Errs) + 20 + msgp.Int64Size + 20 + msgp.Int64Size + 34 + msgp.Int64Size + 28 + msgp.BoolSize + 22 + msgp.BoolSize + 17
	if z.Precis == nil {
		s += msgp.NilSize
	} else {
		s += z.Precis.Msgsize()
	}
	s += 17
	if z.Chunks == nil {
		s += msgp.NilSize
	} else {
		s += z.Chunks.Msgsize()
	}
	s += 21 + msgp.BoolSize + 21 + msgp.BoolSize + 27 + msgp.BoolSize + 27 + msgp.BoolSize + 27 + msgp.BoolSize + 27 + msgp.BoolSize
	return
}
