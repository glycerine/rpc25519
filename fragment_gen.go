// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Circuit) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_3b48d2686114c0ff_1 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_3b48d2686114c0ff_1 uint32
	totalEncodedFields0zgensym_3b48d2686114c0ff_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_3b48d2686114c0ff_1 := totalEncodedFields0zgensym_3b48d2686114c0ff_1
	missingFieldsLeft0zgensym_3b48d2686114c0ff_1 := maxFields0zgensym_3b48d2686114c0ff_1 - totalEncodedFields0zgensym_3b48d2686114c0ff_1

	var nextMiss0zgensym_3b48d2686114c0ff_1 int32 = -1
	var found0zgensym_3b48d2686114c0ff_1 [maxFields0zgensym_3b48d2686114c0ff_1]bool
	var curField0zgensym_3b48d2686114c0ff_1 string

doneWithStruct0zgensym_3b48d2686114c0ff_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_3b48d2686114c0ff_1 > 0 || missingFieldsLeft0zgensym_3b48d2686114c0ff_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_3b48d2686114c0ff_1, missingFieldsLeft0zgensym_3b48d2686114c0ff_1, msgp.ShowFound(found0zgensym_3b48d2686114c0ff_1[:]), decodeMsgFieldOrder0zgensym_3b48d2686114c0ff_1)
		if encodedFieldsLeft0zgensym_3b48d2686114c0ff_1 > 0 {
			encodedFieldsLeft0zgensym_3b48d2686114c0ff_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_3b48d2686114c0ff_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_3b48d2686114c0ff_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_3b48d2686114c0ff_1 = 0
			}
			for nextMiss0zgensym_3b48d2686114c0ff_1 < maxFields0zgensym_3b48d2686114c0ff_1 && (found0zgensym_3b48d2686114c0ff_1[nextMiss0zgensym_3b48d2686114c0ff_1] || decodeMsgFieldSkip0zgensym_3b48d2686114c0ff_1[nextMiss0zgensym_3b48d2686114c0ff_1]) {
				nextMiss0zgensym_3b48d2686114c0ff_1++
			}
			if nextMiss0zgensym_3b48d2686114c0ff_1 == maxFields0zgensym_3b48d2686114c0ff_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_3b48d2686114c0ff_1
			}
			missingFieldsLeft0zgensym_3b48d2686114c0ff_1--
			curField0zgensym_3b48d2686114c0ff_1 = decodeMsgFieldOrder0zgensym_3b48d2686114c0ff_1[nextMiss0zgensym_3b48d2686114c0ff_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_3b48d2686114c0ff_1)
		switch curField0zgensym_3b48d2686114c0ff_1 {
		// -- templateDecodeMsg ends here --

		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_3b48d2686114c0ff_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Circuit
var decodeMsgFieldOrder0zgensym_3b48d2686114c0ff_1 = []string{"", ""}

var decodeMsgFieldSkip0zgensym_3b48d2686114c0ff_1 = []bool{true, true}

// fieldsNotEmpty supports omitempty tags
func (z Circuit) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 0
	}
	var fieldsInUse uint32 = 0

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Circuit) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_3b48d2686114c0ff_2 [2]bool
	fieldsInUse_zgensym_3b48d2686114c0ff_3 := z.fieldsNotEmpty(empty_zgensym_3b48d2686114c0ff_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_3b48d2686114c0ff_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Circuit'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74})
	if err != nil {
		return err
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Circuit) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Circuit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Circuit) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_3b48d2686114c0ff_5 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_3b48d2686114c0ff_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_3b48d2686114c0ff_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_3b48d2686114c0ff_5 := totalEncodedFields4zgensym_3b48d2686114c0ff_5
	missingFieldsLeft4zgensym_3b48d2686114c0ff_5 := maxFields4zgensym_3b48d2686114c0ff_5 - totalEncodedFields4zgensym_3b48d2686114c0ff_5

	var nextMiss4zgensym_3b48d2686114c0ff_5 int32 = -1
	var found4zgensym_3b48d2686114c0ff_5 [maxFields4zgensym_3b48d2686114c0ff_5]bool
	var curField4zgensym_3b48d2686114c0ff_5 string

doneWithStruct4zgensym_3b48d2686114c0ff_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_3b48d2686114c0ff_5 > 0 || missingFieldsLeft4zgensym_3b48d2686114c0ff_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_3b48d2686114c0ff_5, missingFieldsLeft4zgensym_3b48d2686114c0ff_5, msgp.ShowFound(found4zgensym_3b48d2686114c0ff_5[:]), unmarshalMsgFieldOrder4zgensym_3b48d2686114c0ff_5)
		if encodedFieldsLeft4zgensym_3b48d2686114c0ff_5 > 0 {
			encodedFieldsLeft4zgensym_3b48d2686114c0ff_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_3b48d2686114c0ff_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_3b48d2686114c0ff_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_3b48d2686114c0ff_5 = 0
			}
			for nextMiss4zgensym_3b48d2686114c0ff_5 < maxFields4zgensym_3b48d2686114c0ff_5 && (found4zgensym_3b48d2686114c0ff_5[nextMiss4zgensym_3b48d2686114c0ff_5] || unmarshalMsgFieldSkip4zgensym_3b48d2686114c0ff_5[nextMiss4zgensym_3b48d2686114c0ff_5]) {
				nextMiss4zgensym_3b48d2686114c0ff_5++
			}
			if nextMiss4zgensym_3b48d2686114c0ff_5 == maxFields4zgensym_3b48d2686114c0ff_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_3b48d2686114c0ff_5
			}
			missingFieldsLeft4zgensym_3b48d2686114c0ff_5--
			curField4zgensym_3b48d2686114c0ff_5 = unmarshalMsgFieldOrder4zgensym_3b48d2686114c0ff_5[nextMiss4zgensym_3b48d2686114c0ff_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_3b48d2686114c0ff_5)
		switch curField4zgensym_3b48d2686114c0ff_5 {
		// -- templateUnmarshalMsg ends here --

		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_3b48d2686114c0ff_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Circuit
var unmarshalMsgFieldOrder4zgensym_3b48d2686114c0ff_5 = []string{"", ""}

var unmarshalMsgFieldSkip4zgensym_3b48d2686114c0ff_5 = []bool{true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Circuit) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Fragment) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields8zgensym_3b48d2686114c0ff_9 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields8zgensym_3b48d2686114c0ff_9 uint32
	totalEncodedFields8zgensym_3b48d2686114c0ff_9, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft8zgensym_3b48d2686114c0ff_9 := totalEncodedFields8zgensym_3b48d2686114c0ff_9
	missingFieldsLeft8zgensym_3b48d2686114c0ff_9 := maxFields8zgensym_3b48d2686114c0ff_9 - totalEncodedFields8zgensym_3b48d2686114c0ff_9

	var nextMiss8zgensym_3b48d2686114c0ff_9 int32 = -1
	var found8zgensym_3b48d2686114c0ff_9 [maxFields8zgensym_3b48d2686114c0ff_9]bool
	var curField8zgensym_3b48d2686114c0ff_9 string

doneWithStruct8zgensym_3b48d2686114c0ff_9:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft8zgensym_3b48d2686114c0ff_9 > 0 || missingFieldsLeft8zgensym_3b48d2686114c0ff_9 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_3b48d2686114c0ff_9, missingFieldsLeft8zgensym_3b48d2686114c0ff_9, msgp.ShowFound(found8zgensym_3b48d2686114c0ff_9[:]), decodeMsgFieldOrder8zgensym_3b48d2686114c0ff_9)
		if encodedFieldsLeft8zgensym_3b48d2686114c0ff_9 > 0 {
			encodedFieldsLeft8zgensym_3b48d2686114c0ff_9--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField8zgensym_3b48d2686114c0ff_9 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss8zgensym_3b48d2686114c0ff_9 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss8zgensym_3b48d2686114c0ff_9 = 0
			}
			for nextMiss8zgensym_3b48d2686114c0ff_9 < maxFields8zgensym_3b48d2686114c0ff_9 && (found8zgensym_3b48d2686114c0ff_9[nextMiss8zgensym_3b48d2686114c0ff_9] || decodeMsgFieldSkip8zgensym_3b48d2686114c0ff_9[nextMiss8zgensym_3b48d2686114c0ff_9]) {
				nextMiss8zgensym_3b48d2686114c0ff_9++
			}
			if nextMiss8zgensym_3b48d2686114c0ff_9 == maxFields8zgensym_3b48d2686114c0ff_9 {
				// filled all the empty fields!
				break doneWithStruct8zgensym_3b48d2686114c0ff_9
			}
			missingFieldsLeft8zgensym_3b48d2686114c0ff_9--
			curField8zgensym_3b48d2686114c0ff_9 = decodeMsgFieldOrder8zgensym_3b48d2686114c0ff_9[nextMiss8zgensym_3b48d2686114c0ff_9]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_3b48d2686114c0ff_9)
		switch curField8zgensym_3b48d2686114c0ff_9 {
		// -- templateDecodeMsg ends here --

		case "FromPeerID_zid00_str":
			found8zgensym_3b48d2686114c0ff_9[0] = true
			z.FromPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ToPeerID_zid01_str":
			found8zgensym_3b48d2686114c0ff_9[1] = true
			z.ToPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CircuitID_zid02_str":
			found8zgensym_3b48d2686114c0ff_9[2] = true
			z.CircuitID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ServiceName_zid03_str":
			found8zgensym_3b48d2686114c0ff_9[3] = true
			z.ServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FragType_zid04_str":
			found8zgensym_3b48d2686114c0ff_9[4] = true
			z.FragType, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FragPart_zid05_i64":
			found8zgensym_3b48d2686114c0ff_9[5] = true
			z.FragPart, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Args_zid06_map":
			found8zgensym_3b48d2686114c0ff_9[6] = true
			var zgensym_3b48d2686114c0ff_10 uint32
			zgensym_3b48d2686114c0ff_10, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Args == nil && zgensym_3b48d2686114c0ff_10 > 0 {
				z.Args = make(map[string]string, zgensym_3b48d2686114c0ff_10)
			} else if len(z.Args) > 0 {
				for key, _ := range z.Args {
					delete(z.Args, key)
				}
			}
			for zgensym_3b48d2686114c0ff_10 > 0 {
				zgensym_3b48d2686114c0ff_10--
				var zgensym_3b48d2686114c0ff_6 string
				var zgensym_3b48d2686114c0ff_7 string
				zgensym_3b48d2686114c0ff_6, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_3b48d2686114c0ff_7, err = dc.ReadString()
				if err != nil {
					return
				}
				z.Args[zgensym_3b48d2686114c0ff_6] = zgensym_3b48d2686114c0ff_7
			}
		case "Payload_zid07_bin":
			found8zgensym_3b48d2686114c0ff_9[7] = true
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				return
			}
		case "Err_zid08_str":
			found8zgensym_3b48d2686114c0ff_9[8] = true
			z.Err, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss8zgensym_3b48d2686114c0ff_9 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Fragment
var decodeMsgFieldOrder8zgensym_3b48d2686114c0ff_9 = []string{"FromPeerID_zid00_str", "ToPeerID_zid01_str", "CircuitID_zid02_str", "ServiceName_zid03_str", "FragType_zid04_str", "FragPart_zid05_i64", "Args_zid06_map", "Payload_zid07_bin", "Err_zid08_str"}

var decodeMsgFieldSkip8zgensym_3b48d2686114c0ff_9 = []bool{false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Fragment) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 9
	}
	var fieldsInUse uint32 = 9
	isempty[0] = (len(z.FromPeerID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.ToPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.CircuitID) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.ServiceName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.FragType) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.FragPart == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.Args) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.Payload) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.Err) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Fragment) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_3b48d2686114c0ff_11 [9]bool
	fieldsInUse_zgensym_3b48d2686114c0ff_12 := z.fieldsNotEmpty(empty_zgensym_3b48d2686114c0ff_11[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_3b48d2686114c0ff_12 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Fragment'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_3b48d2686114c0ff_11[0] {
		// write "FromPeerID_zid00_str"
		err = en.Append(0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[1] {
		// write "ToPeerID_zid01_str"
		err = en.Append(0xb2, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ToPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[2] {
		// write "CircuitID_zid02_str"
		err = en.Append(0xb3, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CircuitID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[3] {
		// write "ServiceName_zid03_str"
		err = en.Append(0xb5, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[4] {
		// write "FragType_zid04_str"
		err = en.Append(0xb2, 0x46, 0x72, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FragType)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[5] {
		// write "FragPart_zid05_i64"
		err = en.Append(0xb2, 0x46, 0x72, 0x61, 0x67, 0x50, 0x61, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FragPart)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[6] {
		// write "Args_zid06_map"
		err = en.Append(0xae, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Args)))
		if err != nil {
			return
		}
		for zgensym_3b48d2686114c0ff_6, zgensym_3b48d2686114c0ff_7 := range z.Args {
			err = en.WriteString(zgensym_3b48d2686114c0ff_6)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_3b48d2686114c0ff_7)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[7] {
		// write "Payload_zid07_bin"
		err = en.Append(0xb1, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Payload)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_3b48d2686114c0ff_11[8] {
		// write "Err_zid08_str"
		err = en.Append(0xad, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Err)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Fragment) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "FromPeerID_zid00_str"
		o = append(o, 0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerID)
	}

	if !empty[1] {
		// string "ToPeerID_zid01_str"
		o = append(o, 0xb2, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ToPeerID)
	}

	if !empty[2] {
		// string "CircuitID_zid02_str"
		o = append(o, 0xb3, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CircuitID)
	}

	if !empty[3] {
		// string "ServiceName_zid03_str"
		o = append(o, 0xb5, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ServiceName)
	}

	if !empty[4] {
		// string "FragType_zid04_str"
		o = append(o, 0xb2, 0x46, 0x72, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FragType)
	}

	if !empty[5] {
		// string "FragPart_zid05_i64"
		o = append(o, 0xb2, 0x46, 0x72, 0x61, 0x67, 0x50, 0x61, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FragPart)
	}

	if !empty[6] {
		// string "Args_zid06_map"
		o = append(o, 0xae, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Args)))
		for zgensym_3b48d2686114c0ff_6, zgensym_3b48d2686114c0ff_7 := range z.Args {
			o = msgp.AppendString(o, zgensym_3b48d2686114c0ff_6)
			o = msgp.AppendString(o, zgensym_3b48d2686114c0ff_7)
		}
	}

	if !empty[7] {
		// string "Payload_zid07_bin"
		o = append(o, 0xb1, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Payload)
	}

	if !empty[8] {
		// string "Err_zid08_str"
		o = append(o, 0xad, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Err)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Fragment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Fragment) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields13zgensym_3b48d2686114c0ff_14 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields13zgensym_3b48d2686114c0ff_14 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields13zgensym_3b48d2686114c0ff_14, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft13zgensym_3b48d2686114c0ff_14 := totalEncodedFields13zgensym_3b48d2686114c0ff_14
	missingFieldsLeft13zgensym_3b48d2686114c0ff_14 := maxFields13zgensym_3b48d2686114c0ff_14 - totalEncodedFields13zgensym_3b48d2686114c0ff_14

	var nextMiss13zgensym_3b48d2686114c0ff_14 int32 = -1
	var found13zgensym_3b48d2686114c0ff_14 [maxFields13zgensym_3b48d2686114c0ff_14]bool
	var curField13zgensym_3b48d2686114c0ff_14 string

doneWithStruct13zgensym_3b48d2686114c0ff_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_3b48d2686114c0ff_14 > 0 || missingFieldsLeft13zgensym_3b48d2686114c0ff_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft13zgensym_3b48d2686114c0ff_14, missingFieldsLeft13zgensym_3b48d2686114c0ff_14, msgp.ShowFound(found13zgensym_3b48d2686114c0ff_14[:]), unmarshalMsgFieldOrder13zgensym_3b48d2686114c0ff_14)
		if encodedFieldsLeft13zgensym_3b48d2686114c0ff_14 > 0 {
			encodedFieldsLeft13zgensym_3b48d2686114c0ff_14--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField13zgensym_3b48d2686114c0ff_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_3b48d2686114c0ff_14 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss13zgensym_3b48d2686114c0ff_14 = 0
			}
			for nextMiss13zgensym_3b48d2686114c0ff_14 < maxFields13zgensym_3b48d2686114c0ff_14 && (found13zgensym_3b48d2686114c0ff_14[nextMiss13zgensym_3b48d2686114c0ff_14] || unmarshalMsgFieldSkip13zgensym_3b48d2686114c0ff_14[nextMiss13zgensym_3b48d2686114c0ff_14]) {
				nextMiss13zgensym_3b48d2686114c0ff_14++
			}
			if nextMiss13zgensym_3b48d2686114c0ff_14 == maxFields13zgensym_3b48d2686114c0ff_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_3b48d2686114c0ff_14
			}
			missingFieldsLeft13zgensym_3b48d2686114c0ff_14--
			curField13zgensym_3b48d2686114c0ff_14 = unmarshalMsgFieldOrder13zgensym_3b48d2686114c0ff_14[nextMiss13zgensym_3b48d2686114c0ff_14]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField13zgensym_3b48d2686114c0ff_14)
		switch curField13zgensym_3b48d2686114c0ff_14 {
		// -- templateUnmarshalMsg ends here --

		case "FromPeerID_zid00_str":
			found13zgensym_3b48d2686114c0ff_14[0] = true
			z.FromPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ToPeerID_zid01_str":
			found13zgensym_3b48d2686114c0ff_14[1] = true
			z.ToPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CircuitID_zid02_str":
			found13zgensym_3b48d2686114c0ff_14[2] = true
			z.CircuitID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ServiceName_zid03_str":
			found13zgensym_3b48d2686114c0ff_14[3] = true
			z.ServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FragType_zid04_str":
			found13zgensym_3b48d2686114c0ff_14[4] = true
			z.FragType, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FragPart_zid05_i64":
			found13zgensym_3b48d2686114c0ff_14[5] = true
			z.FragPart, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Args_zid06_map":
			found13zgensym_3b48d2686114c0ff_14[6] = true
			if nbs.AlwaysNil {
				if len(z.Args) > 0 {
					for key, _ := range z.Args {
						delete(z.Args, key)
					}
				}

			} else {

				var zgensym_3b48d2686114c0ff_15 uint32
				zgensym_3b48d2686114c0ff_15, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Args == nil && zgensym_3b48d2686114c0ff_15 > 0 {
					z.Args = make(map[string]string, zgensym_3b48d2686114c0ff_15)
				} else if len(z.Args) > 0 {
					for key, _ := range z.Args {
						delete(z.Args, key)
					}
				}
				for zgensym_3b48d2686114c0ff_15 > 0 {
					var zgensym_3b48d2686114c0ff_6 string
					var zgensym_3b48d2686114c0ff_7 string
					zgensym_3b48d2686114c0ff_15--
					zgensym_3b48d2686114c0ff_6, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_3b48d2686114c0ff_7, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.Args[zgensym_3b48d2686114c0ff_6] = zgensym_3b48d2686114c0ff_7
				}
			}
		case "Payload_zid07_bin":
			found13zgensym_3b48d2686114c0ff_14[7] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Payload = z.Payload[:0]
			} else {
				z.Payload, bts, err = nbs.ReadBytesBytes(bts, z.Payload)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "Err_zid08_str":
			found13zgensym_3b48d2686114c0ff_14[8] = true
			z.Err, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_3b48d2686114c0ff_14 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Fragment
var unmarshalMsgFieldOrder13zgensym_3b48d2686114c0ff_14 = []string{"FromPeerID_zid00_str", "ToPeerID_zid01_str", "CircuitID_zid02_str", "ServiceName_zid03_str", "FragType_zid04_str", "FragPart_zid05_i64", "Args_zid06_map", "Payload_zid07_bin", "Err_zid08_str"}

var unmarshalMsgFieldSkip13zgensym_3b48d2686114c0ff_14 = []bool{false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Fragment) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.FromPeerID) + 19 + msgp.StringPrefixSize + len(z.ToPeerID) + 20 + msgp.StringPrefixSize + len(z.CircuitID) + 22 + msgp.StringPrefixSize + len(z.ServiceName) + 19 + msgp.StringPrefixSize + len(z.FragType) + 19 + msgp.Int64Size + 15 + msgp.MapHeaderSize
	if z.Args != nil {
		for zgensym_3b48d2686114c0ff_6, zgensym_3b48d2686114c0ff_7 := range z.Args {
			_ = zgensym_3b48d2686114c0ff_7
			_ = zgensym_3b48d2686114c0ff_6
			s += msgp.StringPrefixSize + len(zgensym_3b48d2686114c0ff_6) + msgp.StringPrefixSize + len(zgensym_3b48d2686114c0ff_7)
		}
	}
	s += 18 + msgp.BytesPrefixSize + len(z.Payload) + 14 + msgp.StringPrefixSize + len(z.Err)
	return
}
