// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package tube

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ParRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_27c7d695a88980_1 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_27c7d695a88980_1 uint32
	totalEncodedFields0zgensym_27c7d695a88980_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_27c7d695a88980_1 := totalEncodedFields0zgensym_27c7d695a88980_1
	missingFieldsLeft0zgensym_27c7d695a88980_1 := maxFields0zgensym_27c7d695a88980_1 - totalEncodedFields0zgensym_27c7d695a88980_1

	var nextMiss0zgensym_27c7d695a88980_1 int32 = -1
	var found0zgensym_27c7d695a88980_1 [maxFields0zgensym_27c7d695a88980_1]bool
	var curField0zgensym_27c7d695a88980_1 string

doneWithStruct0zgensym_27c7d695a88980_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_27c7d695a88980_1 > 0 || missingFieldsLeft0zgensym_27c7d695a88980_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_27c7d695a88980_1, missingFieldsLeft0zgensym_27c7d695a88980_1, msgp.ShowFound(found0zgensym_27c7d695a88980_1[:]), decodeMsgFieldOrder0zgensym_27c7d695a88980_1)
		if encodedFieldsLeft0zgensym_27c7d695a88980_1 > 0 {
			encodedFieldsLeft0zgensym_27c7d695a88980_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_27c7d695a88980_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_27c7d695a88980_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_27c7d695a88980_1 = 0
			}
			for nextMiss0zgensym_27c7d695a88980_1 < maxFields0zgensym_27c7d695a88980_1 && (found0zgensym_27c7d695a88980_1[nextMiss0zgensym_27c7d695a88980_1] || decodeMsgFieldSkip0zgensym_27c7d695a88980_1[nextMiss0zgensym_27c7d695a88980_1]) {
				nextMiss0zgensym_27c7d695a88980_1++
			}
			if nextMiss0zgensym_27c7d695a88980_1 == maxFields0zgensym_27c7d695a88980_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_27c7d695a88980_1
			}
			missingFieldsLeft0zgensym_27c7d695a88980_1--
			curField0zgensym_27c7d695a88980_1 = decodeMsgFieldOrder0zgensym_27c7d695a88980_1[nextMiss0zgensym_27c7d695a88980_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_27c7d695a88980_1)
		switch curField0zgensym_27c7d695a88980_1 {
		// -- templateDecodeMsg ends here --

		case "Offset_zid00_i64":
			found0zgensym_27c7d695a88980_1[0] = true
			z.Offset, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Len0_zid01_i64":
			found0zgensym_27c7d695a88980_1[1] = true
			z.Len0, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Len2_zid02_i64":
			found0zgensym_27c7d695a88980_1[2] = true
			z.Len2, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Index_zid03_i64":
			found0zgensym_27c7d695a88980_1[3] = true
			z.Index, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Term_zid04_i64":
			found0zgensym_27c7d695a88980_1[4] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Epoch_zid05_i64":
			found0zgensym_27c7d695a88980_1[5] = true
			z.Epoch, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "TicketID_zid06_str":
			found0zgensym_27c7d695a88980_1[6] = true
			z.TicketID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ClusterID_zid07_str":
			found0zgensym_27c7d695a88980_1[7] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RLEblake3_zid08_str":
			found0zgensym_27c7d695a88980_1[8] = true
			z.RLEblake3, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_27c7d695a88980_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ParRecord
var decodeMsgFieldOrder0zgensym_27c7d695a88980_1 = []string{"Offset_zid00_i64", "Len0_zid01_i64", "Len2_zid02_i64", "Index_zid03_i64", "Term_zid04_i64", "Epoch_zid05_i64", "TicketID_zid06_str", "ClusterID_zid07_str", "RLEblake3_zid08_str"}

var decodeMsgFieldSkip0zgensym_27c7d695a88980_1 = []bool{false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ParRecord) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 9
	}
	var fieldsInUse uint32 = 9
	isempty[0] = (z.Offset == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Len0 == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Len2 == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Index == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Term == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.Epoch == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.TicketID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.RLEblake3) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ParRecord) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_27c7d695a88980_2 [9]bool
	fieldsInUse_zgensym_27c7d695a88980_3 := z.fieldsNotEmpty(empty_zgensym_27c7d695a88980_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_27c7d695a88980_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ParRecord'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64})
	if err != nil {
		return err
	}

	if !empty_zgensym_27c7d695a88980_2[0] {
		// write "Offset_zid00_i64"
		err = en.Append(0xb0, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Offset)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[1] {
		// write "Len0_zid01_i64"
		err = en.Append(0xae, 0x4c, 0x65, 0x6e, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Len0)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[2] {
		// write "Len2_zid02_i64"
		err = en.Append(0xae, 0x4c, 0x65, 0x6e, 0x32, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Len2)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[3] {
		// write "Index_zid03_i64"
		err = en.Append(0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Index)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[4] {
		// write "Term_zid04_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[5] {
		// write "Epoch_zid05_i64"
		err = en.Append(0xaf, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Epoch)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[6] {
		// write "TicketID_zid06_str"
		err = en.Append(0xb2, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.TicketID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[7] {
		// write "ClusterID_zid07_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_27c7d695a88980_2[8] {
		// write "RLEblake3_zid08_str"
		err = en.Append(0xb3, 0x52, 0x4c, 0x45, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RLEblake3)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ParRecord) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Offset_zid00_i64"
		o = append(o, 0xb0, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Offset)
	}

	if !empty[1] {
		// string "Len0_zid01_i64"
		o = append(o, 0xae, 0x4c, 0x65, 0x6e, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Len0)
	}

	if !empty[2] {
		// string "Len2_zid02_i64"
		o = append(o, 0xae, 0x4c, 0x65, 0x6e, 0x32, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Len2)
	}

	if !empty[3] {
		// string "Index_zid03_i64"
		o = append(o, 0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Index)
	}

	if !empty[4] {
		// string "Term_zid04_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[5] {
		// string "Epoch_zid05_i64"
		o = append(o, 0xaf, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Epoch)
	}

	if !empty[6] {
		// string "TicketID_zid06_str"
		o = append(o, 0xb2, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.TicketID)
	}

	if !empty[7] {
		// string "ClusterID_zid07_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[8] {
		// string "RLEblake3_zid08_str"
		o = append(o, 0xb3, 0x52, 0x4c, 0x45, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RLEblake3)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ParRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ParRecord) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_27c7d695a88980_5 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_27c7d695a88980_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_27c7d695a88980_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_27c7d695a88980_5 := totalEncodedFields4zgensym_27c7d695a88980_5
	missingFieldsLeft4zgensym_27c7d695a88980_5 := maxFields4zgensym_27c7d695a88980_5 - totalEncodedFields4zgensym_27c7d695a88980_5

	var nextMiss4zgensym_27c7d695a88980_5 int32 = -1
	var found4zgensym_27c7d695a88980_5 [maxFields4zgensym_27c7d695a88980_5]bool
	var curField4zgensym_27c7d695a88980_5 string

doneWithStruct4zgensym_27c7d695a88980_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_27c7d695a88980_5 > 0 || missingFieldsLeft4zgensym_27c7d695a88980_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_27c7d695a88980_5, missingFieldsLeft4zgensym_27c7d695a88980_5, msgp.ShowFound(found4zgensym_27c7d695a88980_5[:]), unmarshalMsgFieldOrder4zgensym_27c7d695a88980_5)
		if encodedFieldsLeft4zgensym_27c7d695a88980_5 > 0 {
			encodedFieldsLeft4zgensym_27c7d695a88980_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_27c7d695a88980_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_27c7d695a88980_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_27c7d695a88980_5 = 0
			}
			for nextMiss4zgensym_27c7d695a88980_5 < maxFields4zgensym_27c7d695a88980_5 && (found4zgensym_27c7d695a88980_5[nextMiss4zgensym_27c7d695a88980_5] || unmarshalMsgFieldSkip4zgensym_27c7d695a88980_5[nextMiss4zgensym_27c7d695a88980_5]) {
				nextMiss4zgensym_27c7d695a88980_5++
			}
			if nextMiss4zgensym_27c7d695a88980_5 == maxFields4zgensym_27c7d695a88980_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_27c7d695a88980_5
			}
			missingFieldsLeft4zgensym_27c7d695a88980_5--
			curField4zgensym_27c7d695a88980_5 = unmarshalMsgFieldOrder4zgensym_27c7d695a88980_5[nextMiss4zgensym_27c7d695a88980_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_27c7d695a88980_5)
		switch curField4zgensym_27c7d695a88980_5 {
		// -- templateUnmarshalMsg ends here --

		case "Offset_zid00_i64":
			found4zgensym_27c7d695a88980_5[0] = true
			z.Offset, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Len0_zid01_i64":
			found4zgensym_27c7d695a88980_5[1] = true
			z.Len0, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Len2_zid02_i64":
			found4zgensym_27c7d695a88980_5[2] = true
			z.Len2, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Index_zid03_i64":
			found4zgensym_27c7d695a88980_5[3] = true
			z.Index, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Term_zid04_i64":
			found4zgensym_27c7d695a88980_5[4] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Epoch_zid05_i64":
			found4zgensym_27c7d695a88980_5[5] = true
			z.Epoch, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "TicketID_zid06_str":
			found4zgensym_27c7d695a88980_5[6] = true
			z.TicketID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ClusterID_zid07_str":
			found4zgensym_27c7d695a88980_5[7] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RLEblake3_zid08_str":
			found4zgensym_27c7d695a88980_5[8] = true
			z.RLEblake3, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_27c7d695a88980_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ParRecord
var unmarshalMsgFieldOrder4zgensym_27c7d695a88980_5 = []string{"Offset_zid00_i64", "Len0_zid01_i64", "Len2_zid02_i64", "Index_zid03_i64", "Term_zid04_i64", "Epoch_zid05_i64", "TicketID_zid06_str", "ClusterID_zid07_str", "RLEblake3_zid08_str"}

var unmarshalMsgFieldSkip4zgensym_27c7d695a88980_5 = []bool{false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ParRecord) Msgsize() (s int) {
	s = 1 + 17 + msgp.Int64Size + 15 + msgp.Int64Size + 15 + msgp.Int64Size + 16 + msgp.Int64Size + 15 + msgp.Int64Size + 16 + msgp.Int64Size + 19 + msgp.StringPrefixSize + len(z.TicketID) + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 20 + msgp.StringPrefixSize + len(z.RLEblake3)
	return
}
func (z *ParRecord) Gstring() (r string) {
	r = "&ParRecord{\n"
	r += fmt.Sprintf("   Offset: %v,\n", z.Offset)
	r += fmt.Sprintf("     Len0: %v,\n", z.Len0)
	r += fmt.Sprintf("     Len2: %v,\n", z.Len2)
	r += fmt.Sprintf("    Index: %v,\n", z.Index)
	r += fmt.Sprintf("     Term: %v,\n", z.Term)
	r += fmt.Sprintf("    Epoch: %v,\n", z.Epoch)
	r += fmt.Sprintf(" TicketID: \"%v\",\n", z.TicketID)
	r += fmt.Sprintf("ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("RLEblake3: \"%v\",\n", z.RLEblake3)
	r += "}\n"
	return
}
