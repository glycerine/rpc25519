// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package art

import (
	"fmt"

	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_da1be0b343e58527_0 []byte
		zgensym_da1be0b343e58527_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSlice(zgensym_da1be0b343e58527_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_da1be0b343e58527_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_da1be0b343e58527_1 = zgensym_da1be0b343e58527_1[:0]
		} else {
			zgensym_da1be0b343e58527_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSlice(zgensym_da1be0b343e58527_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSlice) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSliceValue) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_da1be0b343e58527_2 []byte
		zgensym_da1be0b343e58527_2, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSliceValue(zgensym_da1be0b343e58527_2)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSliceValue) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSliceValue) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSliceValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSliceValue) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_da1be0b343e58527_3 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_da1be0b343e58527_3 = zgensym_da1be0b343e58527_3[:0]
		} else {
			zgensym_da1be0b343e58527_3, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSliceValue(zgensym_da1be0b343e58527_3)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSliceValue) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Key) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_da1be0b343e58527_4 []byte
		zgensym_da1be0b343e58527_4, err = dc.ReadBytes([]byte((*z)))
		(*z) = Key(zgensym_da1be0b343e58527_4)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Key) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Key) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Key) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Key) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_da1be0b343e58527_5 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_da1be0b343e58527_5 = zgensym_da1be0b343e58527_5[:0]
		} else {
			zgensym_da1be0b343e58527_5, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = Key(zgensym_da1be0b343e58527_5)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Key) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Leaf) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_da1be0b343e58527_7 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_da1be0b343e58527_7 uint32
	totalEncodedFields6zgensym_da1be0b343e58527_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_da1be0b343e58527_7 := totalEncodedFields6zgensym_da1be0b343e58527_7
	missingFieldsLeft6zgensym_da1be0b343e58527_7 := maxFields6zgensym_da1be0b343e58527_7 - totalEncodedFields6zgensym_da1be0b343e58527_7

	var nextMiss6zgensym_da1be0b343e58527_7 int32 = -1
	var found6zgensym_da1be0b343e58527_7 [maxFields6zgensym_da1be0b343e58527_7]bool
	var curField6zgensym_da1be0b343e58527_7 string

doneWithStruct6zgensym_da1be0b343e58527_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_da1be0b343e58527_7 > 0 || missingFieldsLeft6zgensym_da1be0b343e58527_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_da1be0b343e58527_7, missingFieldsLeft6zgensym_da1be0b343e58527_7, msgp.ShowFound(found6zgensym_da1be0b343e58527_7[:]), decodeMsgFieldOrder6zgensym_da1be0b343e58527_7)
		if encodedFieldsLeft6zgensym_da1be0b343e58527_7 > 0 {
			encodedFieldsLeft6zgensym_da1be0b343e58527_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_da1be0b343e58527_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_da1be0b343e58527_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_da1be0b343e58527_7 = 0
			}
			for nextMiss6zgensym_da1be0b343e58527_7 < maxFields6zgensym_da1be0b343e58527_7 && (found6zgensym_da1be0b343e58527_7[nextMiss6zgensym_da1be0b343e58527_7] || decodeMsgFieldSkip6zgensym_da1be0b343e58527_7[nextMiss6zgensym_da1be0b343e58527_7]) {
				nextMiss6zgensym_da1be0b343e58527_7++
			}
			if nextMiss6zgensym_da1be0b343e58527_7 == maxFields6zgensym_da1be0b343e58527_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_da1be0b343e58527_7
			}
			missingFieldsLeft6zgensym_da1be0b343e58527_7--
			curField6zgensym_da1be0b343e58527_7 = decodeMsgFieldOrder6zgensym_da1be0b343e58527_7[nextMiss6zgensym_da1be0b343e58527_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_da1be0b343e58527_7)
		switch curField6zgensym_da1be0b343e58527_7 {
		// -- templateDecodeMsg ends here --

		case "Key_zid00_rct":
			found6zgensym_da1be0b343e58527_7[0] = true
			{
				var zgensym_da1be0b343e58527_8 []byte
				zgensym_da1be0b343e58527_8, err = dc.ReadBytes([]byte(z.Key))
				z.Key = Key(zgensym_da1be0b343e58527_8)
			}
			if err != nil {
				return
			}
		case "Value_zid01_bin":
			found6zgensym_da1be0b343e58527_7[1] = true
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_da1be0b343e58527_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Leaf
var decodeMsgFieldOrder6zgensym_da1be0b343e58527_7 = []string{"Key_zid00_rct", "Value_zid01_bin"}

var decodeMsgFieldSkip6zgensym_da1be0b343e58527_7 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Leaf) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Key) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Value) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Leaf) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_da1be0b343e58527_9 [2]bool
	fieldsInUse_zgensym_da1be0b343e58527_10 := z.fieldsNotEmpty(empty_zgensym_da1be0b343e58527_9[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_da1be0b343e58527_10 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Leaf'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4c, 0x65, 0x61, 0x66})
	if err != nil {
		return err
	}

	if !empty_zgensym_da1be0b343e58527_9[0] {
		// write "Key_zid00_rct"
		err = en.Append(0xad, 0x4b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteBytes([]byte(z.Key))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_da1be0b343e58527_9[1] {
		// write "Value_zid01_bin"
		err = en.Append(0xaf, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Value)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Leaf) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Key_zid00_rct"
		o = append(o, 0xad, 0x4b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendBytes(o, []byte(z.Key))
	}

	if !empty[1] {
		// string "Value_zid01_bin"
		o = append(o, 0xaf, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Value)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Leaf) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Leaf) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields11zgensym_da1be0b343e58527_12 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields11zgensym_da1be0b343e58527_12 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields11zgensym_da1be0b343e58527_12, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft11zgensym_da1be0b343e58527_12 := totalEncodedFields11zgensym_da1be0b343e58527_12
	missingFieldsLeft11zgensym_da1be0b343e58527_12 := maxFields11zgensym_da1be0b343e58527_12 - totalEncodedFields11zgensym_da1be0b343e58527_12

	var nextMiss11zgensym_da1be0b343e58527_12 int32 = -1
	var found11zgensym_da1be0b343e58527_12 [maxFields11zgensym_da1be0b343e58527_12]bool
	var curField11zgensym_da1be0b343e58527_12 string

doneWithStruct11zgensym_da1be0b343e58527_12:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft11zgensym_da1be0b343e58527_12 > 0 || missingFieldsLeft11zgensym_da1be0b343e58527_12 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft11zgensym_da1be0b343e58527_12, missingFieldsLeft11zgensym_da1be0b343e58527_12, msgp.ShowFound(found11zgensym_da1be0b343e58527_12[:]), unmarshalMsgFieldOrder11zgensym_da1be0b343e58527_12)
		if encodedFieldsLeft11zgensym_da1be0b343e58527_12 > 0 {
			encodedFieldsLeft11zgensym_da1be0b343e58527_12--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField11zgensym_da1be0b343e58527_12 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss11zgensym_da1be0b343e58527_12 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss11zgensym_da1be0b343e58527_12 = 0
			}
			for nextMiss11zgensym_da1be0b343e58527_12 < maxFields11zgensym_da1be0b343e58527_12 && (found11zgensym_da1be0b343e58527_12[nextMiss11zgensym_da1be0b343e58527_12] || unmarshalMsgFieldSkip11zgensym_da1be0b343e58527_12[nextMiss11zgensym_da1be0b343e58527_12]) {
				nextMiss11zgensym_da1be0b343e58527_12++
			}
			if nextMiss11zgensym_da1be0b343e58527_12 == maxFields11zgensym_da1be0b343e58527_12 {
				// filled all the empty fields!
				break doneWithStruct11zgensym_da1be0b343e58527_12
			}
			missingFieldsLeft11zgensym_da1be0b343e58527_12--
			curField11zgensym_da1be0b343e58527_12 = unmarshalMsgFieldOrder11zgensym_da1be0b343e58527_12[nextMiss11zgensym_da1be0b343e58527_12]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField11zgensym_da1be0b343e58527_12)
		switch curField11zgensym_da1be0b343e58527_12 {
		// -- templateUnmarshalMsg ends here --

		case "Key_zid00_rct":
			found11zgensym_da1be0b343e58527_12[0] = true
			{
				var zgensym_da1be0b343e58527_13 []byte
				if nbs.AlwaysNil || msgp.IsNil(bts) {
					if !nbs.AlwaysNil {
						bts = bts[1:]
					}
					zgensym_da1be0b343e58527_13 = zgensym_da1be0b343e58527_13[:0]
				} else {
					zgensym_da1be0b343e58527_13, bts, err = nbs.ReadBytesBytes(bts, []byte(z.Key))

					if err != nil {
						return
					}
				}
				if err != nil {
					return
				}
				z.Key = Key(zgensym_da1be0b343e58527_13)
			}
		case "Value_zid01_bin":
			found11zgensym_da1be0b343e58527_12[1] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Value = z.Value[:0]
			} else {
				z.Value, bts, err = nbs.ReadBytesBytes(bts, z.Value)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss11zgensym_da1be0b343e58527_12 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Leaf
var unmarshalMsgFieldOrder11zgensym_da1be0b343e58527_12 = []string{"Key_zid00_rct", "Value_zid01_bin"}

var unmarshalMsgFieldSkip11zgensym_da1be0b343e58527_12 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Leaf) Msgsize() (s int) {
	s = 1 + 14 + msgp.BytesPrefixSize + len([]byte(z.Key)) + 16 + msgp.BytesPrefixSize + len(z.Value)
	return
}
func (z *Leaf) Gstring() (r string) {
	r = "&Leaf{\n"
	r += fmt.Sprintf("  Key: %v,\n", z.Key)
	r += fmt.Sprintf("Value: %v,\n", z.Value)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TestBytes) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields14zgensym_da1be0b343e58527_15 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields14zgensym_da1be0b343e58527_15 uint32
	totalEncodedFields14zgensym_da1be0b343e58527_15, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft14zgensym_da1be0b343e58527_15 := totalEncodedFields14zgensym_da1be0b343e58527_15
	missingFieldsLeft14zgensym_da1be0b343e58527_15 := maxFields14zgensym_da1be0b343e58527_15 - totalEncodedFields14zgensym_da1be0b343e58527_15

	var nextMiss14zgensym_da1be0b343e58527_15 int32 = -1
	var found14zgensym_da1be0b343e58527_15 [maxFields14zgensym_da1be0b343e58527_15]bool
	var curField14zgensym_da1be0b343e58527_15 string

doneWithStruct14zgensym_da1be0b343e58527_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_da1be0b343e58527_15 > 0 || missingFieldsLeft14zgensym_da1be0b343e58527_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft14zgensym_da1be0b343e58527_15, missingFieldsLeft14zgensym_da1be0b343e58527_15, msgp.ShowFound(found14zgensym_da1be0b343e58527_15[:]), decodeMsgFieldOrder14zgensym_da1be0b343e58527_15)
		if encodedFieldsLeft14zgensym_da1be0b343e58527_15 > 0 {
			encodedFieldsLeft14zgensym_da1be0b343e58527_15--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField14zgensym_da1be0b343e58527_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_da1be0b343e58527_15 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss14zgensym_da1be0b343e58527_15 = 0
			}
			for nextMiss14zgensym_da1be0b343e58527_15 < maxFields14zgensym_da1be0b343e58527_15 && (found14zgensym_da1be0b343e58527_15[nextMiss14zgensym_da1be0b343e58527_15] || decodeMsgFieldSkip14zgensym_da1be0b343e58527_15[nextMiss14zgensym_da1be0b343e58527_15]) {
				nextMiss14zgensym_da1be0b343e58527_15++
			}
			if nextMiss14zgensym_da1be0b343e58527_15 == maxFields14zgensym_da1be0b343e58527_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_da1be0b343e58527_15
			}
			missingFieldsLeft14zgensym_da1be0b343e58527_15--
			curField14zgensym_da1be0b343e58527_15 = decodeMsgFieldOrder14zgensym_da1be0b343e58527_15[nextMiss14zgensym_da1be0b343e58527_15]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField14zgensym_da1be0b343e58527_15)
		switch curField14zgensym_da1be0b343e58527_15 {
		// -- templateDecodeMsg ends here --

		case "Slc_zid00_bin":
			found14zgensym_da1be0b343e58527_15[0] = true
			z.Slc, err = dc.ReadBytes(z.Slc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_da1be0b343e58527_15 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TestBytes
var decodeMsgFieldOrder14zgensym_da1be0b343e58527_15 = []string{"Slc_zid00_bin"}

var decodeMsgFieldSkip14zgensym_da1be0b343e58527_15 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *TestBytes) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Slc) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TestBytes) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_da1be0b343e58527_16 [1]bool
	fieldsInUse_zgensym_da1be0b343e58527_17 := z.fieldsNotEmpty(empty_zgensym_da1be0b343e58527_16[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_da1be0b343e58527_17 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TestBytes'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x65, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_da1be0b343e58527_16[0] {
		// write "Slc_zid00_bin"
		err = en.Append(0xad, 0x53, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Slc)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TestBytes) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Slc_zid00_bin"
		o = append(o, 0xad, 0x53, 0x6c, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Slc)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TestBytes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TestBytes) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields18zgensym_da1be0b343e58527_19 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields18zgensym_da1be0b343e58527_19 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields18zgensym_da1be0b343e58527_19, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft18zgensym_da1be0b343e58527_19 := totalEncodedFields18zgensym_da1be0b343e58527_19
	missingFieldsLeft18zgensym_da1be0b343e58527_19 := maxFields18zgensym_da1be0b343e58527_19 - totalEncodedFields18zgensym_da1be0b343e58527_19

	var nextMiss18zgensym_da1be0b343e58527_19 int32 = -1
	var found18zgensym_da1be0b343e58527_19 [maxFields18zgensym_da1be0b343e58527_19]bool
	var curField18zgensym_da1be0b343e58527_19 string

doneWithStruct18zgensym_da1be0b343e58527_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_da1be0b343e58527_19 > 0 || missingFieldsLeft18zgensym_da1be0b343e58527_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_da1be0b343e58527_19, missingFieldsLeft18zgensym_da1be0b343e58527_19, msgp.ShowFound(found18zgensym_da1be0b343e58527_19[:]), unmarshalMsgFieldOrder18zgensym_da1be0b343e58527_19)
		if encodedFieldsLeft18zgensym_da1be0b343e58527_19 > 0 {
			encodedFieldsLeft18zgensym_da1be0b343e58527_19--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField18zgensym_da1be0b343e58527_19 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss18zgensym_da1be0b343e58527_19 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss18zgensym_da1be0b343e58527_19 = 0
			}
			for nextMiss18zgensym_da1be0b343e58527_19 < maxFields18zgensym_da1be0b343e58527_19 && (found18zgensym_da1be0b343e58527_19[nextMiss18zgensym_da1be0b343e58527_19] || unmarshalMsgFieldSkip18zgensym_da1be0b343e58527_19[nextMiss18zgensym_da1be0b343e58527_19]) {
				nextMiss18zgensym_da1be0b343e58527_19++
			}
			if nextMiss18zgensym_da1be0b343e58527_19 == maxFields18zgensym_da1be0b343e58527_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_da1be0b343e58527_19
			}
			missingFieldsLeft18zgensym_da1be0b343e58527_19--
			curField18zgensym_da1be0b343e58527_19 = unmarshalMsgFieldOrder18zgensym_da1be0b343e58527_19[nextMiss18zgensym_da1be0b343e58527_19]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_da1be0b343e58527_19)
		switch curField18zgensym_da1be0b343e58527_19 {
		// -- templateUnmarshalMsg ends here --

		case "Slc_zid00_bin":
			found18zgensym_da1be0b343e58527_19[0] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Slc = z.Slc[:0]
			} else {
				z.Slc, bts, err = nbs.ReadBytesBytes(bts, z.Slc)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_da1be0b343e58527_19 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TestBytes
var unmarshalMsgFieldOrder18zgensym_da1be0b343e58527_19 = []string{"Slc_zid00_bin"}

var unmarshalMsgFieldSkip18zgensym_da1be0b343e58527_19 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TestBytes) Msgsize() (s int) {
	s = 1 + 14 + msgp.BytesPrefixSize + len(z.Slc)
	return
}
func (z *TestBytes) Gstring() (r string) {
	r = "&TestBytes{\n"
	r += fmt.Sprintf("Slc: %v,\n", z.Slc)
	r += "}\n"
	return
}
