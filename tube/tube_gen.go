// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package tube

import (
	"fmt"
	"time"

	"github.com/glycerine/greenpack/msgp"
	"github.com/glycerine/rpc25519/tube/art"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *AppendEntries) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields3zgensym_8df0a91a1f250219_4 = 23

	// -- templateDecodeMsg starts here--
	var totalEncodedFields3zgensym_8df0a91a1f250219_4 uint32
	totalEncodedFields3zgensym_8df0a91a1f250219_4, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft3zgensym_8df0a91a1f250219_4 := totalEncodedFields3zgensym_8df0a91a1f250219_4
	missingFieldsLeft3zgensym_8df0a91a1f250219_4 := maxFields3zgensym_8df0a91a1f250219_4 - totalEncodedFields3zgensym_8df0a91a1f250219_4

	var nextMiss3zgensym_8df0a91a1f250219_4 int32 = -1
	var found3zgensym_8df0a91a1f250219_4 [maxFields3zgensym_8df0a91a1f250219_4]bool
	var curField3zgensym_8df0a91a1f250219_4 string

doneWithStruct3zgensym_8df0a91a1f250219_4:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft3zgensym_8df0a91a1f250219_4 > 0 || missingFieldsLeft3zgensym_8df0a91a1f250219_4 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft3zgensym_8df0a91a1f250219_4, missingFieldsLeft3zgensym_8df0a91a1f250219_4, msgp.ShowFound(found3zgensym_8df0a91a1f250219_4[:]), decodeMsgFieldOrder3zgensym_8df0a91a1f250219_4)
		if encodedFieldsLeft3zgensym_8df0a91a1f250219_4 > 0 {
			encodedFieldsLeft3zgensym_8df0a91a1f250219_4--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField3zgensym_8df0a91a1f250219_4 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss3zgensym_8df0a91a1f250219_4 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss3zgensym_8df0a91a1f250219_4 = 0
			}
			for nextMiss3zgensym_8df0a91a1f250219_4 < maxFields3zgensym_8df0a91a1f250219_4 && (found3zgensym_8df0a91a1f250219_4[nextMiss3zgensym_8df0a91a1f250219_4] || decodeMsgFieldSkip3zgensym_8df0a91a1f250219_4[nextMiss3zgensym_8df0a91a1f250219_4]) {
				nextMiss3zgensym_8df0a91a1f250219_4++
			}
			if nextMiss3zgensym_8df0a91a1f250219_4 == maxFields3zgensym_8df0a91a1f250219_4 {
				// filled all the empty fields!
				break doneWithStruct3zgensym_8df0a91a1f250219_4
			}
			missingFieldsLeft3zgensym_8df0a91a1f250219_4--
			curField3zgensym_8df0a91a1f250219_4 = decodeMsgFieldOrder3zgensym_8df0a91a1f250219_4[nextMiss3zgensym_8df0a91a1f250219_4]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField3zgensym_8df0a91a1f250219_4)
		switch curField3zgensym_8df0a91a1f250219_4 {
		// -- templateDecodeMsg ends here --

		case "ClusterID_zid00_str":
			found3zgensym_8df0a91a1f250219_4[0] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found3zgensym_8df0a91a1f250219_4[1] = true
			z.FromPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found3zgensym_8df0a91a1f250219_4[2] = true
			z.FromPeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found3zgensym_8df0a91a1f250219_4[3] = true
			z.FromPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found3zgensym_8df0a91a1f250219_4[4] = true
			z.FromPeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderTerm_zid05_i64":
			found3zgensym_8df0a91a1f250219_4[5] = true
			z.LeaderTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LeaderID_zid06_str":
			found3zgensym_8df0a91a1f250219_4[6] = true
			z.LeaderID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderName_zid07_str":
			found3zgensym_8df0a91a1f250219_4[7] = true
			z.LeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderURL_zid08_str":
			found3zgensym_8df0a91a1f250219_4[8] = true
			z.LeaderURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PrevLogIndex_zid09_i64":
			found3zgensym_8df0a91a1f250219_4[9] = true
			z.PrevLogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PrevLogTerm_zid10_i64":
			found3zgensym_8df0a91a1f250219_4[10] = true
			z.PrevLogTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Entries_zid11_slc":
			found3zgensym_8df0a91a1f250219_4[11] = true
			var zgensym_8df0a91a1f250219_5 uint32
			zgensym_8df0a91a1f250219_5, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Entries) >= int(zgensym_8df0a91a1f250219_5) {
				z.Entries = (z.Entries)[:zgensym_8df0a91a1f250219_5]
			} else {
				z.Entries = make([]*RaftLogEntry, zgensym_8df0a91a1f250219_5)
			}
			for zgensym_8df0a91a1f250219_0 := range z.Entries {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Entries[zgensym_8df0a91a1f250219_0] != nil {
						dc.PushAlwaysNil()
						err = z.Entries[zgensym_8df0a91a1f250219_0].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Entries[zgensym_8df0a91a1f250219_0] == nil {
						z.Entries[zgensym_8df0a91a1f250219_0] = new(RaftLogEntry)
					}
					dc.DedupIndexEachPtr(z.Entries[zgensym_8df0a91a1f250219_0])

					err = z.Entries[zgensym_8df0a91a1f250219_0].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "LeaderCommitIndex_zid12_i64":
			found3zgensym_8df0a91a1f250219_4[12] = true
			z.LeaderCommitIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LeaderCommitIndexEntryTerm_zid13_i64":
			found3zgensym_8df0a91a1f250219_4[13] = true
			z.LeaderCommitIndexEntryTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LogTermsRLE_zid14_ptr":
			found3zgensym_8df0a91a1f250219_4[14] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.LogTermsRLE != nil {
					dc.PushAlwaysNil()
					err = z.LogTermsRLE.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.LogTermsRLE == nil {
					z.LogTermsRLE = new(TermsRLE)
				}
				dc.DedupIndexEachPtr(z.LogTermsRLE)

				err = z.LogTermsRLE.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "AEID_zid15_str":
			found3zgensym_8df0a91a1f250219_4[15] = true
			z.AEID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "MC_zid16_ptr":
			found3zgensym_8df0a91a1f250219_4[16] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ShadowReplicas_zid17_ptr":
			found3zgensym_8df0a91a1f250219_4[17] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ShadowReplicas != nil {
					dc.PushAlwaysNil()
					err = z.ShadowReplicas.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ShadowReplicas == nil {
					z.ShadowReplicas = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.ShadowReplicas)

				err = z.ShadowReplicas.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "PeerID2LastHeard_zid18_map":
			found3zgensym_8df0a91a1f250219_4[18] = true
			var zgensym_8df0a91a1f250219_6 uint32
			zgensym_8df0a91a1f250219_6, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.PeerID2LastHeard == nil && zgensym_8df0a91a1f250219_6 > 0 {
				z.PeerID2LastHeard = make(map[string]time.Time, zgensym_8df0a91a1f250219_6)
			} else if len(z.PeerID2LastHeard) > 0 {
				for key, _ := range z.PeerID2LastHeard {
					delete(z.PeerID2LastHeard, key)
				}
			}
			for zgensym_8df0a91a1f250219_6 > 0 {
				zgensym_8df0a91a1f250219_6--
				var zgensym_8df0a91a1f250219_1 string
				var zgensym_8df0a91a1f250219_2 time.Time
				zgensym_8df0a91a1f250219_1, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_2, err = dc.ReadTime()
				if err != nil {
					return
				}
				z.PeerID2LastHeard[zgensym_8df0a91a1f250219_1] = zgensym_8df0a91a1f250219_2
			}
		case "LeaderLLI_zid19_i64":
			found3zgensym_8df0a91a1f250219_4[19] = true
			z.LeaderLLI, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LeaderLLT_zid20_i64":
			found3zgensym_8df0a91a1f250219_4[20] = true
			z.LeaderLLT, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LeaderCompactIndex_zid21_i64":
			found3zgensym_8df0a91a1f250219_4[21] = true
			z.LeaderCompactIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LeaderCompactTerm_zid22_i64":
			found3zgensym_8df0a91a1f250219_4[22] = true
			z.LeaderCompactTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss3zgensym_8df0a91a1f250219_4 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of AppendEntries
var decodeMsgFieldOrder3zgensym_8df0a91a1f250219_4 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "LeaderTerm_zid05_i64", "LeaderID_zid06_str", "LeaderName_zid07_str", "LeaderURL_zid08_str", "PrevLogIndex_zid09_i64", "PrevLogTerm_zid10_i64", "Entries_zid11_slc", "LeaderCommitIndex_zid12_i64", "LeaderCommitIndexEntryTerm_zid13_i64", "LogTermsRLE_zid14_ptr", "AEID_zid15_str", "MC_zid16_ptr", "ShadowReplicas_zid17_ptr", "PeerID2LastHeard_zid18_map", "LeaderLLI_zid19_i64", "LeaderLLT_zid20_i64", "LeaderCompactIndex_zid21_i64", "LeaderCompactTerm_zid22_i64"}

var decodeMsgFieldSkip3zgensym_8df0a91a1f250219_4 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *AppendEntries) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 23
	}
	var fieldsInUse uint32 = 23
	isempty[0] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FromPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.FromPeerName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FromPeerServiceName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.FromPeerServiceNameVersion) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.LeaderTerm == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.LeaderID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.LeaderName) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.LeaderURL) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.PrevLogIndex == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.PrevLogTerm == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.Entries) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.LeaderCommitIndex == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (z.LeaderCommitIndexEntryTerm == 0) // number, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.LogTermsRLE == nil) // pointer, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (len(z.AEID) == 0) // string, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.MC == nil) // pointer, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (z.ShadowReplicas == nil) // pointer, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (len(z.PeerID2LastHeard) == 0) // string, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (z.LeaderLLI == 0) // number, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (z.LeaderLLT == 0) // number, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = (z.LeaderCompactIndex == 0) // number, omitempty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (z.LeaderCompactTerm == 0) // number, omitempty
	if isempty[22] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *AppendEntries) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_7 [23]bool
	fieldsInUse_zgensym_8df0a91a1f250219_8 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_7[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_8 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'AppendEntries'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_7[0] {
		// write "ClusterID_zid00_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[1] {
		// write "FromPeerID_zid01_str"
		err = en.Append(0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[2] {
		// write "FromPeerName_zid02_str"
		err = en.Append(0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[3] {
		// write "FromPeerServiceName_zid03_str"
		err = en.Append(0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[4] {
		// write "FromPeerServiceNameVersion_zid04_str"
		err = en.Append(0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[5] {
		// write "LeaderTerm_zid05_i64"
		err = en.Append(0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[6] {
		// write "LeaderID_zid06_str"
		err = en.Append(0xb2, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[7] {
		// write "LeaderName_zid07_str"
		err = en.Append(0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[8] {
		// write "LeaderURL_zid08_str"
		err = en.Append(0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[9] {
		// write "PrevLogIndex_zid09_i64"
		err = en.Append(0xb6, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PrevLogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[10] {
		// write "PrevLogTerm_zid10_i64"
		err = en.Append(0xb5, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PrevLogTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[11] {
		// write "Entries_zid11_slc"
		err = en.Append(0xb1, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Entries)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_0 := range z.Entries {
			// gPtr.encodeGen():

			if z.Entries[zgensym_8df0a91a1f250219_0] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Entries[zgensym_8df0a91a1f250219_0].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[12] {
		// write "LeaderCommitIndex_zid12_i64"
		err = en.Append(0xbb, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderCommitIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[13] {
		// write "LeaderCommitIndexEntryTerm_zid13_i64"
		err = en.Append(0xd9, 0x24, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderCommitIndexEntryTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[14] {
		// write "LogTermsRLE_zid14_ptr"
		err = en.Append(0xb5, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.LogTermsRLE == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.LogTermsRLE.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[15] {
		// write "AEID_zid15_str"
		err = en.Append(0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AEID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[16] {
		// write "MC_zid16_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[17] {
		// write "ShadowReplicas_zid17_ptr"
		err = en.Append(0xb8, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ShadowReplicas == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ShadowReplicas.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[18] {
		// write "PeerID2LastHeard_zid18_map"
		err = en.Append(0xba, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.PeerID2LastHeard)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_1, zgensym_8df0a91a1f250219_2 := range z.PeerID2LastHeard {
			err = en.WriteString(zgensym_8df0a91a1f250219_1)
			if err != nil {
				return
			}
			err = en.WriteTime(zgensym_8df0a91a1f250219_2)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[19] {
		// write "LeaderLLI_zid19_i64"
		err = en.Append(0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x49, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderLLI)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[20] {
		// write "LeaderLLT_zid20_i64"
		err = en.Append(0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderLLT)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[21] {
		// write "LeaderCompactIndex_zid21_i64"
		err = en.Append(0xbc, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderCompactIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_7[22] {
		// write "LeaderCompactTerm_zid22_i64"
		err = en.Append(0xbb, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderCompactTerm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppendEntries) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [23]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ClusterID_zid00_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[1] {
		// string "FromPeerID_zid01_str"
		o = append(o, 0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerID)
	}

	if !empty[2] {
		// string "FromPeerName_zid02_str"
		o = append(o, 0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerName)
	}

	if !empty[3] {
		// string "FromPeerServiceName_zid03_str"
		o = append(o, 0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceName)
	}

	if !empty[4] {
		// string "FromPeerServiceNameVersion_zid04_str"
		o = append(o, 0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceNameVersion)
	}

	if !empty[5] {
		// string "LeaderTerm_zid05_i64"
		o = append(o, 0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderTerm)
	}

	if !empty[6] {
		// string "LeaderID_zid06_str"
		o = append(o, 0xb2, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderID)
	}

	if !empty[7] {
		// string "LeaderName_zid07_str"
		o = append(o, 0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderName)
	}

	if !empty[8] {
		// string "LeaderURL_zid08_str"
		o = append(o, 0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderURL)
	}

	if !empty[9] {
		// string "PrevLogIndex_zid09_i64"
		o = append(o, 0xb6, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PrevLogIndex)
	}

	if !empty[10] {
		// string "PrevLogTerm_zid10_i64"
		o = append(o, 0xb5, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PrevLogTerm)
	}

	if !empty[11] {
		// string "Entries_zid11_slc"
		o = append(o, 0xb1, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Entries)))
		for zgensym_8df0a91a1f250219_0 := range z.Entries {
			// marshalGen.gPtr()

			if z.Entries[zgensym_8df0a91a1f250219_0] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Entries[zgensym_8df0a91a1f250219_0].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[12] {
		// string "LeaderCommitIndex_zid12_i64"
		o = append(o, 0xbb, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderCommitIndex)
	}

	if !empty[13] {
		// string "LeaderCommitIndexEntryTerm_zid13_i64"
		o = append(o, 0xd9, 0x24, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderCommitIndexEntryTerm)
	}

	if !empty[14] {
		// string "LogTermsRLE_zid14_ptr"
		o = append(o, 0xb5, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.LogTermsRLE == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.LogTermsRLE.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[15] {
		// string "AEID_zid15_str"
		o = append(o, 0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AEID)
	}

	if !empty[16] {
		// string "MC_zid16_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[17] {
		// string "ShadowReplicas_zid17_ptr"
		o = append(o, 0xb8, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ShadowReplicas == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ShadowReplicas.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[18] {
		// string "PeerID2LastHeard_zid18_map"
		o = append(o, 0xba, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.PeerID2LastHeard)))
		for zgensym_8df0a91a1f250219_1, zgensym_8df0a91a1f250219_2 := range z.PeerID2LastHeard {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_1)
			o = msgp.AppendTime(o, zgensym_8df0a91a1f250219_2)
		}
	}

	if !empty[19] {
		// string "LeaderLLI_zid19_i64"
		o = append(o, 0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x49, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderLLI)
	}

	if !empty[20] {
		// string "LeaderLLT_zid20_i64"
		o = append(o, 0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderLLT)
	}

	if !empty[21] {
		// string "LeaderCompactIndex_zid21_i64"
		o = append(o, 0xbc, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderCompactIndex)
	}

	if !empty[22] {
		// string "LeaderCompactTerm_zid22_i64"
		o = append(o, 0xbb, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderCompactTerm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppendEntries) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *AppendEntries) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields9zgensym_8df0a91a1f250219_10 = 23

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields9zgensym_8df0a91a1f250219_10 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields9zgensym_8df0a91a1f250219_10, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft9zgensym_8df0a91a1f250219_10 := totalEncodedFields9zgensym_8df0a91a1f250219_10
	missingFieldsLeft9zgensym_8df0a91a1f250219_10 := maxFields9zgensym_8df0a91a1f250219_10 - totalEncodedFields9zgensym_8df0a91a1f250219_10

	var nextMiss9zgensym_8df0a91a1f250219_10 int32 = -1
	var found9zgensym_8df0a91a1f250219_10 [maxFields9zgensym_8df0a91a1f250219_10]bool
	var curField9zgensym_8df0a91a1f250219_10 string

doneWithStruct9zgensym_8df0a91a1f250219_10:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft9zgensym_8df0a91a1f250219_10 > 0 || missingFieldsLeft9zgensym_8df0a91a1f250219_10 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft9zgensym_8df0a91a1f250219_10, missingFieldsLeft9zgensym_8df0a91a1f250219_10, msgp.ShowFound(found9zgensym_8df0a91a1f250219_10[:]), unmarshalMsgFieldOrder9zgensym_8df0a91a1f250219_10)
		if encodedFieldsLeft9zgensym_8df0a91a1f250219_10 > 0 {
			encodedFieldsLeft9zgensym_8df0a91a1f250219_10--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField9zgensym_8df0a91a1f250219_10 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss9zgensym_8df0a91a1f250219_10 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss9zgensym_8df0a91a1f250219_10 = 0
			}
			for nextMiss9zgensym_8df0a91a1f250219_10 < maxFields9zgensym_8df0a91a1f250219_10 && (found9zgensym_8df0a91a1f250219_10[nextMiss9zgensym_8df0a91a1f250219_10] || unmarshalMsgFieldSkip9zgensym_8df0a91a1f250219_10[nextMiss9zgensym_8df0a91a1f250219_10]) {
				nextMiss9zgensym_8df0a91a1f250219_10++
			}
			if nextMiss9zgensym_8df0a91a1f250219_10 == maxFields9zgensym_8df0a91a1f250219_10 {
				// filled all the empty fields!
				break doneWithStruct9zgensym_8df0a91a1f250219_10
			}
			missingFieldsLeft9zgensym_8df0a91a1f250219_10--
			curField9zgensym_8df0a91a1f250219_10 = unmarshalMsgFieldOrder9zgensym_8df0a91a1f250219_10[nextMiss9zgensym_8df0a91a1f250219_10]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField9zgensym_8df0a91a1f250219_10)
		switch curField9zgensym_8df0a91a1f250219_10 {
		// -- templateUnmarshalMsg ends here --

		case "ClusterID_zid00_str":
			found9zgensym_8df0a91a1f250219_10[0] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found9zgensym_8df0a91a1f250219_10[1] = true
			z.FromPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found9zgensym_8df0a91a1f250219_10[2] = true
			z.FromPeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found9zgensym_8df0a91a1f250219_10[3] = true
			z.FromPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found9zgensym_8df0a91a1f250219_10[4] = true
			z.FromPeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderTerm_zid05_i64":
			found9zgensym_8df0a91a1f250219_10[5] = true
			z.LeaderTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LeaderID_zid06_str":
			found9zgensym_8df0a91a1f250219_10[6] = true
			z.LeaderID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderName_zid07_str":
			found9zgensym_8df0a91a1f250219_10[7] = true
			z.LeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderURL_zid08_str":
			found9zgensym_8df0a91a1f250219_10[8] = true
			z.LeaderURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PrevLogIndex_zid09_i64":
			found9zgensym_8df0a91a1f250219_10[9] = true
			z.PrevLogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PrevLogTerm_zid10_i64":
			found9zgensym_8df0a91a1f250219_10[10] = true
			z.PrevLogTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Entries_zid11_slc":
			found9zgensym_8df0a91a1f250219_10[11] = true
			if nbs.AlwaysNil {
				(z.Entries) = (z.Entries)[:0]
			} else {

				var zgensym_8df0a91a1f250219_11 uint32
				zgensym_8df0a91a1f250219_11, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Entries) >= int(zgensym_8df0a91a1f250219_11) {
					z.Entries = (z.Entries)[:zgensym_8df0a91a1f250219_11]
				} else {
					z.Entries = make([]*RaftLogEntry, zgensym_8df0a91a1f250219_11)
				}
				for zgensym_8df0a91a1f250219_0 := range z.Entries {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Entries[zgensym_8df0a91a1f250219_0] != nil {
							z.Entries[zgensym_8df0a91a1f250219_0].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Entries[zgensym_8df0a91a1f250219_0] {
								z.Entries[zgensym_8df0a91a1f250219_0].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Entries[zgensym_8df0a91a1f250219_0] == nil {
								z.Entries[zgensym_8df0a91a1f250219_0] = new(RaftLogEntry)
							}

							bts, err = z.Entries[zgensym_8df0a91a1f250219_0].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "LeaderCommitIndex_zid12_i64":
			found9zgensym_8df0a91a1f250219_10[12] = true
			z.LeaderCommitIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LeaderCommitIndexEntryTerm_zid13_i64":
			found9zgensym_8df0a91a1f250219_10[13] = true
			z.LeaderCommitIndexEntryTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LogTermsRLE_zid14_ptr":
			found9zgensym_8df0a91a1f250219_10[14] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.LogTermsRLE != nil {
					z.LogTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.LogTermsRLE {
						z.LogTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.LogTermsRLE == nil {
						z.LogTermsRLE = new(TermsRLE)
					}

					bts, err = z.LogTermsRLE.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "AEID_zid15_str":
			found9zgensym_8df0a91a1f250219_10[15] = true
			z.AEID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "MC_zid16_ptr":
			found9zgensym_8df0a91a1f250219_10[16] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "ShadowReplicas_zid17_ptr":
			found9zgensym_8df0a91a1f250219_10[17] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ShadowReplicas != nil {
					z.ShadowReplicas.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ShadowReplicas {
						z.ShadowReplicas.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ShadowReplicas == nil {
						z.ShadowReplicas = new(MemberConfig)
					}

					bts, err = z.ShadowReplicas.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "PeerID2LastHeard_zid18_map":
			found9zgensym_8df0a91a1f250219_10[18] = true
			if nbs.AlwaysNil {
				if len(z.PeerID2LastHeard) > 0 {
					for key, _ := range z.PeerID2LastHeard {
						delete(z.PeerID2LastHeard, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_12 uint32
				zgensym_8df0a91a1f250219_12, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.PeerID2LastHeard == nil && zgensym_8df0a91a1f250219_12 > 0 {
					z.PeerID2LastHeard = make(map[string]time.Time, zgensym_8df0a91a1f250219_12)
				} else if len(z.PeerID2LastHeard) > 0 {
					for key, _ := range z.PeerID2LastHeard {
						delete(z.PeerID2LastHeard, key)
					}
				}
				for zgensym_8df0a91a1f250219_12 > 0 {
					var zgensym_8df0a91a1f250219_1 string
					var zgensym_8df0a91a1f250219_2 time.Time
					zgensym_8df0a91a1f250219_12--
					zgensym_8df0a91a1f250219_1, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_2, bts, err = nbs.ReadTimeBytes(bts)

					if err != nil {
						return
					}
					z.PeerID2LastHeard[zgensym_8df0a91a1f250219_1] = zgensym_8df0a91a1f250219_2
				}
			}
		case "LeaderLLI_zid19_i64":
			found9zgensym_8df0a91a1f250219_10[19] = true
			z.LeaderLLI, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LeaderLLT_zid20_i64":
			found9zgensym_8df0a91a1f250219_10[20] = true
			z.LeaderLLT, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LeaderCompactIndex_zid21_i64":
			found9zgensym_8df0a91a1f250219_10[21] = true
			z.LeaderCompactIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LeaderCompactTerm_zid22_i64":
			found9zgensym_8df0a91a1f250219_10[22] = true
			z.LeaderCompactTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss9zgensym_8df0a91a1f250219_10 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of AppendEntries
var unmarshalMsgFieldOrder9zgensym_8df0a91a1f250219_10 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "LeaderTerm_zid05_i64", "LeaderID_zid06_str", "LeaderName_zid07_str", "LeaderURL_zid08_str", "PrevLogIndex_zid09_i64", "PrevLogTerm_zid10_i64", "Entries_zid11_slc", "LeaderCommitIndex_zid12_i64", "LeaderCommitIndexEntryTerm_zid13_i64", "LogTermsRLE_zid14_ptr", "AEID_zid15_str", "MC_zid16_ptr", "ShadowReplicas_zid17_ptr", "PeerID2LastHeard_zid18_map", "LeaderLLI_zid19_i64", "LeaderLLT_zid20_i64", "LeaderCompactIndex_zid21_i64", "LeaderCompactTerm_zid22_i64"}

var unmarshalMsgFieldSkip9zgensym_8df0a91a1f250219_10 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppendEntries) Msgsize() (s int) {
	s = 3 + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 21 + msgp.StringPrefixSize + len(z.FromPeerID) + 23 + msgp.StringPrefixSize + len(z.FromPeerName) + 30 + msgp.StringPrefixSize + len(z.FromPeerServiceName) + 38 + msgp.StringPrefixSize + len(z.FromPeerServiceNameVersion) + 21 + msgp.Int64Size + 19 + msgp.StringPrefixSize + len(z.LeaderID) + 21 + msgp.StringPrefixSize + len(z.LeaderName) + 20 + msgp.StringPrefixSize + len(z.LeaderURL) + 23 + msgp.Int64Size + 22 + msgp.Int64Size + 18 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_0 := range z.Entries {
		if z.Entries[zgensym_8df0a91a1f250219_0] == nil {
			s += msgp.NilSize
		} else {
			s += z.Entries[zgensym_8df0a91a1f250219_0].Msgsize()
		}
	}
	s += 28 + msgp.Int64Size + 38 + msgp.Int64Size + 22
	if z.LogTermsRLE == nil {
		s += msgp.NilSize
	} else {
		s += z.LogTermsRLE.Msgsize()
	}
	s += 15 + msgp.StringPrefixSize + len(z.AEID) + 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	s += 25
	if z.ShadowReplicas == nil {
		s += msgp.NilSize
	} else {
		s += z.ShadowReplicas.Msgsize()
	}
	s += 27 + msgp.MapHeaderSize
	if z.PeerID2LastHeard != nil {
		for zgensym_8df0a91a1f250219_1, zgensym_8df0a91a1f250219_2 := range z.PeerID2LastHeard {
			_ = zgensym_8df0a91a1f250219_2
			_ = zgensym_8df0a91a1f250219_1
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_1) + msgp.TimeSize
		}
	}
	s += 20 + msgp.Int64Size + 20 + msgp.Int64Size + 29 + msgp.Int64Size + 28 + msgp.Int64Size
	return
}
func (z *AppendEntries) Gstring() (r string) {
	r = "&AppendEntries{\n"
	r += fmt.Sprintf("                 ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("                FromPeerID: \"%v\",\n", z.FromPeerID)
	r += fmt.Sprintf("              FromPeerName: \"%v\",\n", z.FromPeerName)
	r += fmt.Sprintf("       FromPeerServiceName: \"%v\",\n", z.FromPeerServiceName)
	r += fmt.Sprintf("FromPeerServiceNameVersion: \"%v\",\n", z.FromPeerServiceNameVersion)
	r += fmt.Sprintf("                LeaderTerm: %v,\n", z.LeaderTerm)
	r += fmt.Sprintf("                  LeaderID: \"%v\",\n", z.LeaderID)
	r += fmt.Sprintf("                LeaderName: \"%v\",\n", z.LeaderName)
	r += fmt.Sprintf("                 LeaderURL: \"%v\",\n", z.LeaderURL)
	r += fmt.Sprintf("              PrevLogIndex: %v,\n", z.PrevLogIndex)
	r += fmt.Sprintf("               PrevLogTerm: %v,\n", z.PrevLogTerm)
	r += fmt.Sprintf("                   Entries: %v,\n", z.Entries)
	r += fmt.Sprintf("         LeaderCommitIndex: %v,\n", z.LeaderCommitIndex)
	r += fmt.Sprintf("LeaderCommitIndexEntryTerm: %v,\n", z.LeaderCommitIndexEntryTerm)
	r += fmt.Sprintf("               LogTermsRLE: %v,\n", z.LogTermsRLE)
	r += fmt.Sprintf("                      AEID: \"%v\",\n", z.AEID)
	r += fmt.Sprintf("                        MC: %v,\n", z.MC)
	r += fmt.Sprintf("            ShadowReplicas: %v,\n", z.ShadowReplicas)
	r += fmt.Sprintf("          PeerID2LastHeard: %v,\n", z.PeerID2LastHeard)
	r += fmt.Sprintf("                 LeaderLLI: %v,\n", z.LeaderLLI)
	r += fmt.Sprintf("                 LeaderLLT: %v,\n", z.LeaderLLT)
	r += fmt.Sprintf("        LeaderCompactIndex: %v,\n", z.LeaderCompactIndex)
	r += fmt.Sprintf("         LeaderCompactTerm: %v,\n", z.LeaderCompactTerm)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *AppendEntriesAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields13zgensym_8df0a91a1f250219_14 = 41

	// -- templateDecodeMsg starts here--
	var totalEncodedFields13zgensym_8df0a91a1f250219_14 uint32
	totalEncodedFields13zgensym_8df0a91a1f250219_14, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft13zgensym_8df0a91a1f250219_14 := totalEncodedFields13zgensym_8df0a91a1f250219_14
	missingFieldsLeft13zgensym_8df0a91a1f250219_14 := maxFields13zgensym_8df0a91a1f250219_14 - totalEncodedFields13zgensym_8df0a91a1f250219_14

	var nextMiss13zgensym_8df0a91a1f250219_14 int32 = -1
	var found13zgensym_8df0a91a1f250219_14 [maxFields13zgensym_8df0a91a1f250219_14]bool
	var curField13zgensym_8df0a91a1f250219_14 string

doneWithStruct13zgensym_8df0a91a1f250219_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_8df0a91a1f250219_14 > 0 || missingFieldsLeft13zgensym_8df0a91a1f250219_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft13zgensym_8df0a91a1f250219_14, missingFieldsLeft13zgensym_8df0a91a1f250219_14, msgp.ShowFound(found13zgensym_8df0a91a1f250219_14[:]), decodeMsgFieldOrder13zgensym_8df0a91a1f250219_14)
		if encodedFieldsLeft13zgensym_8df0a91a1f250219_14 > 0 {
			encodedFieldsLeft13zgensym_8df0a91a1f250219_14--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField13zgensym_8df0a91a1f250219_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_8df0a91a1f250219_14 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss13zgensym_8df0a91a1f250219_14 = 0
			}
			for nextMiss13zgensym_8df0a91a1f250219_14 < maxFields13zgensym_8df0a91a1f250219_14 && (found13zgensym_8df0a91a1f250219_14[nextMiss13zgensym_8df0a91a1f250219_14] || decodeMsgFieldSkip13zgensym_8df0a91a1f250219_14[nextMiss13zgensym_8df0a91a1f250219_14]) {
				nextMiss13zgensym_8df0a91a1f250219_14++
			}
			if nextMiss13zgensym_8df0a91a1f250219_14 == maxFields13zgensym_8df0a91a1f250219_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_8df0a91a1f250219_14
			}
			missingFieldsLeft13zgensym_8df0a91a1f250219_14--
			curField13zgensym_8df0a91a1f250219_14 = decodeMsgFieldOrder13zgensym_8df0a91a1f250219_14[nextMiss13zgensym_8df0a91a1f250219_14]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField13zgensym_8df0a91a1f250219_14)
		switch curField13zgensym_8df0a91a1f250219_14 {
		// -- templateDecodeMsg ends here --

		case "ClusterID_zid00_str":
			found13zgensym_8df0a91a1f250219_14[0] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found13zgensym_8df0a91a1f250219_14[1] = true
			z.FromPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found13zgensym_8df0a91a1f250219_14[2] = true
			z.FromPeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found13zgensym_8df0a91a1f250219_14[3] = true
			z.FromPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found13zgensym_8df0a91a1f250219_14[4] = true
			z.FromPeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Term_zid05_i64":
			found13zgensym_8df0a91a1f250219_14[5] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Rejected_zid06_boo":
			found13zgensym_8df0a91a1f250219_14[6] = true
			z.Rejected, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "LogsMatchExactly_zid07_boo":
			found13zgensym_8df0a91a1f250219_14[7] = true
			z.LogsMatchExactly, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "LargestCommonRaftIndex_zid08_i64":
			found13zgensym_8df0a91a1f250219_14[8] = true
			z.LargestCommonRaftIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ConflictTerm_zid09_i64":
			found13zgensym_8df0a91a1f250219_14[9] = true
			z.ConflictTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ConflictTerm1stIndex_zid10_i64":
			found13zgensym_8df0a91a1f250219_14[10] = true
			z.ConflictTerm1stIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogCompactIndex_zid11_i64":
			found13zgensym_8df0a91a1f250219_14[11] = true
			z.PeerLogCompactIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogCompactTerm_zid12_i64":
			found13zgensym_8df0a91a1f250219_14[12] = true
			z.PeerLogCompactTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogFirstIndex_zid13_i64":
			found13zgensym_8df0a91a1f250219_14[13] = true
			z.PeerLogFirstIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogFirstTerm_zid14_i64":
			found13zgensym_8df0a91a1f250219_14[14] = true
			z.PeerLogFirstTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogLastIndex_zid15_i64":
			found13zgensym_8df0a91a1f250219_14[15] = true
			z.PeerLogLastIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogLastTerm_zid16_i64":
			found13zgensym_8df0a91a1f250219_14[16] = true
			z.PeerLogLastTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedPrevLogIndex_zid17_i64":
			found13zgensym_8df0a91a1f250219_14[17] = true
			z.SuppliedPrevLogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedPrevLogTerm_zid18_i64":
			found13zgensym_8df0a91a1f250219_14[18] = true
			z.SuppliedPrevLogTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedEntriesIndexBeg_zid19_i64":
			found13zgensym_8df0a91a1f250219_14[19] = true
			z.SuppliedEntriesIndexBeg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedEntriesIndexEnd_zid20_i64":
			found13zgensym_8df0a91a1f250219_14[20] = true
			z.SuppliedEntriesIndexEnd, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedLeaderCommitIndex_zid21_i64":
			found13zgensym_8df0a91a1f250219_14[21] = true
			z.SuppliedLeaderCommitIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedLeader_zid22_str":
			found13zgensym_8df0a91a1f250219_14[22] = true
			z.SuppliedLeader, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SuppliedLeaderName_zid23_str":
			found13zgensym_8df0a91a1f250219_14[23] = true
			z.SuppliedLeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SuppliedLeaderTermsRLE_zid24_ptr":
			found13zgensym_8df0a91a1f250219_14[24] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.SuppliedLeaderTermsRLE != nil {
					dc.PushAlwaysNil()
					err = z.SuppliedLeaderTermsRLE.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.SuppliedLeaderTermsRLE == nil {
					z.SuppliedLeaderTermsRLE = new(TermsRLE)
				}
				dc.DedupIndexEachPtr(z.SuppliedLeaderTermsRLE)

				err = z.SuppliedLeaderTermsRLE.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "SuppliedLeaderLastTerm_zid25_i64":
			found13zgensym_8df0a91a1f250219_14[25] = true
			z.SuppliedLeaderLastTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedLeaderLLI_zid26_i64":
			found13zgensym_8df0a91a1f250219_14[26] = true
			z.SuppliedLeaderLLI, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedLeaderLLT_zid27_i64":
			found13zgensym_8df0a91a1f250219_14[27] = true
			z.SuppliedLeaderLLT, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerLogTermsRLE_zid28_ptr":
			found13zgensym_8df0a91a1f250219_14[28] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.PeerLogTermsRLE != nil {
					dc.PushAlwaysNil()
					err = z.PeerLogTermsRLE.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.PeerLogTermsRLE == nil {
					z.PeerLogTermsRLE = new(TermsRLE)
				}
				dc.DedupIndexEachPtr(z.PeerLogTermsRLE)

				err = z.PeerLogTermsRLE.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "RejectReason_zid29_str":
			found13zgensym_8df0a91a1f250219_14[29] = true
			z.RejectReason, err = dc.ReadString()
			if err != nil {
				return
			}
		case "AEID_zid30_str":
			found13zgensym_8df0a91a1f250219_14[30] = true
			z.AEID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PreVoteOn_zid31_boo":
			found13zgensym_8df0a91a1f250219_14[31] = true
			z.PreVoteOn, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "MinElectionTimeoutDur_zid32_dur":
			found13zgensym_8df0a91a1f250219_14[32] = true
			z.MinElectionTimeoutDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "SpanMatching_zid33_ptr":
			found13zgensym_8df0a91a1f250219_14[33] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.SpanMatching = nil
			} else {
				if z.SpanMatching == nil {
					z.SpanMatching = new(LogEntrySpan)
				}
				dc.DedupIndexEachPtr(z.SpanMatching)

				const maxFields15zgensym_8df0a91a1f250219_16 = 2

				// -- templateDecodeMsg starts here--
				var totalEncodedFields15zgensym_8df0a91a1f250219_16 uint32
				totalEncodedFields15zgensym_8df0a91a1f250219_16, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft15zgensym_8df0a91a1f250219_16 := totalEncodedFields15zgensym_8df0a91a1f250219_16
				missingFieldsLeft15zgensym_8df0a91a1f250219_16 := maxFields15zgensym_8df0a91a1f250219_16 - totalEncodedFields15zgensym_8df0a91a1f250219_16

				var nextMiss15zgensym_8df0a91a1f250219_16 int32 = -1
				var found15zgensym_8df0a91a1f250219_16 [maxFields15zgensym_8df0a91a1f250219_16]bool
				var curField15zgensym_8df0a91a1f250219_16 string

			doneWithStruct15zgensym_8df0a91a1f250219_16:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft15zgensym_8df0a91a1f250219_16 > 0 || missingFieldsLeft15zgensym_8df0a91a1f250219_16 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft15zgensym_8df0a91a1f250219_16, missingFieldsLeft15zgensym_8df0a91a1f250219_16, msgp.ShowFound(found15zgensym_8df0a91a1f250219_16[:]), decodeMsgFieldOrder15zgensym_8df0a91a1f250219_16)
					if encodedFieldsLeft15zgensym_8df0a91a1f250219_16 > 0 {
						encodedFieldsLeft15zgensym_8df0a91a1f250219_16--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField15zgensym_8df0a91a1f250219_16 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss15zgensym_8df0a91a1f250219_16 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss15zgensym_8df0a91a1f250219_16 = 0
						}
						for nextMiss15zgensym_8df0a91a1f250219_16 < maxFields15zgensym_8df0a91a1f250219_16 && (found15zgensym_8df0a91a1f250219_16[nextMiss15zgensym_8df0a91a1f250219_16] || decodeMsgFieldSkip15zgensym_8df0a91a1f250219_16[nextMiss15zgensym_8df0a91a1f250219_16]) {
							nextMiss15zgensym_8df0a91a1f250219_16++
						}
						if nextMiss15zgensym_8df0a91a1f250219_16 == maxFields15zgensym_8df0a91a1f250219_16 {
							// filled all the empty fields!
							break doneWithStruct15zgensym_8df0a91a1f250219_16
						}
						missingFieldsLeft15zgensym_8df0a91a1f250219_16--
						curField15zgensym_8df0a91a1f250219_16 = decodeMsgFieldOrder15zgensym_8df0a91a1f250219_16[nextMiss15zgensym_8df0a91a1f250219_16]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField15zgensym_8df0a91a1f250219_16)
					switch curField15zgensym_8df0a91a1f250219_16 {
					// -- templateDecodeMsg ends here --

					case "Beg_zid00_i64":
						found15zgensym_8df0a91a1f250219_16[0] = true
						z.SpanMatching.Beg, err = dc.ReadInt64()
						if err != nil {
							return
						}
					case "Endx_zid01_i64":
						found15zgensym_8df0a91a1f250219_16[1] = true
						z.SpanMatching.Endx, err = dc.ReadInt64()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss15zgensym_8df0a91a1f250219_16 != -1 {
					dc.PopAlwaysNil()
				}

			}
		case "PeerMC_zid34_ptr":
			found13zgensym_8df0a91a1f250219_14[34] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.PeerMC != nil {
					dc.PushAlwaysNil()
					err = z.PeerMC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.PeerMC == nil {
					z.PeerMC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.PeerMC)

				err = z.PeerMC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "PeerCompactionDiscardedLastIndex_zid35_i64":
			found13zgensym_8df0a91a1f250219_14[35] = true
			z.PeerCompactionDiscardedLastIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerCompactionDiscardedLastTerm_zid36_i64":
			found13zgensym_8df0a91a1f250219_14[36] = true
			z.PeerCompactionDiscardedLastTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "NeedSnapshotGap_zid37_boo":
			found13zgensym_8df0a91a1f250219_14[37] = true
			z.NeedSnapshotGap, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "SuppliedLeaderCommitIndexEntryTerm_zid38_i64":
			found13zgensym_8df0a91a1f250219_14[38] = true
			z.SuppliedLeaderCommitIndexEntryTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedCompactIndex_zid39_i64":
			found13zgensym_8df0a91a1f250219_14[39] = true
			z.SuppliedCompactIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SuppliedCompactTerm_zid40_i64":
			found13zgensym_8df0a91a1f250219_14[40] = true
			z.SuppliedCompactTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_8df0a91a1f250219_14 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of AppendEntriesAck
var decodeMsgFieldOrder13zgensym_8df0a91a1f250219_14 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "Term_zid05_i64", "Rejected_zid06_boo", "LogsMatchExactly_zid07_boo", "LargestCommonRaftIndex_zid08_i64", "ConflictTerm_zid09_i64", "ConflictTerm1stIndex_zid10_i64", "PeerLogCompactIndex_zid11_i64", "PeerLogCompactTerm_zid12_i64", "PeerLogFirstIndex_zid13_i64", "PeerLogFirstTerm_zid14_i64", "PeerLogLastIndex_zid15_i64", "PeerLogLastTerm_zid16_i64", "SuppliedPrevLogIndex_zid17_i64", "SuppliedPrevLogTerm_zid18_i64", "SuppliedEntriesIndexBeg_zid19_i64", "SuppliedEntriesIndexEnd_zid20_i64", "SuppliedLeaderCommitIndex_zid21_i64", "SuppliedLeader_zid22_str", "SuppliedLeaderName_zid23_str", "SuppliedLeaderTermsRLE_zid24_ptr", "SuppliedLeaderLastTerm_zid25_i64", "SuppliedLeaderLLI_zid26_i64", "SuppliedLeaderLLT_zid27_i64", "PeerLogTermsRLE_zid28_ptr", "RejectReason_zid29_str", "AEID_zid30_str", "PreVoteOn_zid31_boo", "MinElectionTimeoutDur_zid32_dur", "SpanMatching_zid33_ptr", "PeerMC_zid34_ptr", "PeerCompactionDiscardedLastIndex_zid35_i64", "PeerCompactionDiscardedLastTerm_zid36_i64", "NeedSnapshotGap_zid37_boo", "SuppliedLeaderCommitIndexEntryTerm_zid38_i64", "SuppliedCompactIndex_zid39_i64", "SuppliedCompactTerm_zid40_i64"}

var decodeMsgFieldSkip13zgensym_8df0a91a1f250219_14 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fields of LogEntrySpan
var decodeMsgFieldOrder15zgensym_8df0a91a1f250219_16 = []string{"Beg_zid00_i64", "Endx_zid01_i64"}

var decodeMsgFieldSkip15zgensym_8df0a91a1f250219_16 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *AppendEntriesAck) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 41
	}
	var fieldsInUse uint32 = 41
	isempty[0] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FromPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.FromPeerName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FromPeerServiceName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.FromPeerServiceNameVersion) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.Term == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (!z.Rejected) // bool, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (!z.LogsMatchExactly) // bool, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.LargestCommonRaftIndex == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.ConflictTerm == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.ConflictTerm1stIndex == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.PeerLogCompactIndex == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.PeerLogCompactTerm == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (z.PeerLogFirstIndex == 0) // number, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.PeerLogFirstTerm == 0) // number, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (z.PeerLogLastIndex == 0) // number, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.PeerLogLastTerm == 0) // number, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (z.SuppliedPrevLogIndex == 0) // number, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (z.SuppliedPrevLogTerm == 0) // number, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (z.SuppliedEntriesIndexBeg == 0) // number, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (z.SuppliedEntriesIndexEnd == 0) // number, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = (z.SuppliedLeaderCommitIndex == 0) // number, omitempty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (len(z.SuppliedLeader) == 0) // string, omitempty
	if isempty[22] {
		fieldsInUse--
	}
	isempty[23] = (len(z.SuppliedLeaderName) == 0) // string, omitempty
	if isempty[23] {
		fieldsInUse--
	}
	isempty[24] = (z.SuppliedLeaderTermsRLE == nil) // pointer, omitempty
	if isempty[24] {
		fieldsInUse--
	}
	isempty[25] = (z.SuppliedLeaderLastTerm == 0) // number, omitempty
	if isempty[25] {
		fieldsInUse--
	}
	isempty[26] = (z.SuppliedLeaderLLI == 0) // number, omitempty
	if isempty[26] {
		fieldsInUse--
	}
	isempty[27] = (z.SuppliedLeaderLLT == 0) // number, omitempty
	if isempty[27] {
		fieldsInUse--
	}
	isempty[28] = (z.PeerLogTermsRLE == nil) // pointer, omitempty
	if isempty[28] {
		fieldsInUse--
	}
	isempty[29] = (len(z.RejectReason) == 0) // string, omitempty
	if isempty[29] {
		fieldsInUse--
	}
	isempty[30] = (len(z.AEID) == 0) // string, omitempty
	if isempty[30] {
		fieldsInUse--
	}
	isempty[31] = (!z.PreVoteOn) // bool, omitempty
	if isempty[31] {
		fieldsInUse--
	}
	isempty[32] = false
	if isempty[32] {
		fieldsInUse--
	}
	isempty[33] = (z.SpanMatching == nil) // pointer, omitempty
	if isempty[33] {
		fieldsInUse--
	}
	isempty[34] = (z.PeerMC == nil) // pointer, omitempty
	if isempty[34] {
		fieldsInUse--
	}
	isempty[35] = (z.PeerCompactionDiscardedLastIndex == 0) // number, omitempty
	if isempty[35] {
		fieldsInUse--
	}
	isempty[36] = (z.PeerCompactionDiscardedLastTerm == 0) // number, omitempty
	if isempty[36] {
		fieldsInUse--
	}
	isempty[37] = (!z.NeedSnapshotGap) // bool, omitempty
	if isempty[37] {
		fieldsInUse--
	}
	isempty[38] = (z.SuppliedLeaderCommitIndexEntryTerm == 0) // number, omitempty
	if isempty[38] {
		fieldsInUse--
	}
	isempty[39] = (z.SuppliedCompactIndex == 0) // number, omitempty
	if isempty[39] {
		fieldsInUse--
	}
	isempty[40] = (z.SuppliedCompactTerm == 0) // number, omitempty
	if isempty[40] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *AppendEntriesAck) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_17 [41]bool
	fieldsInUse_zgensym_8df0a91a1f250219_18 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_17[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_18 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'AppendEntriesAck'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_17[0] {
		// write "ClusterID_zid00_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[1] {
		// write "FromPeerID_zid01_str"
		err = en.Append(0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[2] {
		// write "FromPeerName_zid02_str"
		err = en.Append(0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[3] {
		// write "FromPeerServiceName_zid03_str"
		err = en.Append(0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[4] {
		// write "FromPeerServiceNameVersion_zid04_str"
		err = en.Append(0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[5] {
		// write "Term_zid05_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[6] {
		// write "Rejected_zid06_boo"
		err = en.Append(0xb2, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Rejected)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[7] {
		// write "LogsMatchExactly_zid07_boo"
		err = en.Append(0xba, 0x4c, 0x6f, 0x67, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.LogsMatchExactly)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[8] {
		// write "LargestCommonRaftIndex_zid08_i64"
		err = en.Append(0xd9, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LargestCommonRaftIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[9] {
		// write "ConflictTerm_zid09_i64"
		err = en.Append(0xb6, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ConflictTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[10] {
		// write "ConflictTerm1stIndex_zid10_i64"
		err = en.Append(0xbe, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x31, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ConflictTerm1stIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[11] {
		// write "PeerLogCompactIndex_zid11_i64"
		err = en.Append(0xbd, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerLogCompactIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[12] {
		// write "PeerLogCompactTerm_zid12_i64"
		err = en.Append(0xbc, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerLogCompactTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[13] {
		// write "PeerLogFirstIndex_zid13_i64"
		err = en.Append(0xbb, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerLogFirstIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[14] {
		// write "PeerLogFirstTerm_zid14_i64"
		err = en.Append(0xba, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerLogFirstTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[15] {
		// write "PeerLogLastIndex_zid15_i64"
		err = en.Append(0xba, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerLogLastIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[16] {
		// write "PeerLogLastTerm_zid16_i64"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerLogLastTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[17] {
		// write "SuppliedPrevLogIndex_zid17_i64"
		err = en.Append(0xbe, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedPrevLogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[18] {
		// write "SuppliedPrevLogTerm_zid18_i64"
		err = en.Append(0xbd, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedPrevLogTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[19] {
		// write "SuppliedEntriesIndexBeg_zid19_i64"
		err = en.Append(0xd9, 0x21, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedEntriesIndexBeg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[20] {
		// write "SuppliedEntriesIndexEnd_zid20_i64"
		err = en.Append(0xd9, 0x21, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedEntriesIndexEnd)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[21] {
		// write "SuppliedLeaderCommitIndex_zid21_i64"
		err = en.Append(0xd9, 0x23, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedLeaderCommitIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[22] {
		// write "SuppliedLeader_zid22_str"
		err = en.Append(0xb8, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SuppliedLeader)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[23] {
		// write "SuppliedLeaderName_zid23_str"
		err = en.Append(0xbc, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SuppliedLeaderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[24] {
		// write "SuppliedLeaderTermsRLE_zid24_ptr"
		err = en.Append(0xd9, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SuppliedLeaderTermsRLE == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.SuppliedLeaderTermsRLE.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[25] {
		// write "SuppliedLeaderLastTerm_zid25_i64"
		err = en.Append(0xd9, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedLeaderLastTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[26] {
		// write "SuppliedLeaderLLI_zid26_i64"
		err = en.Append(0xbb, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x49, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedLeaderLLI)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[27] {
		// write "SuppliedLeaderLLT_zid27_i64"
		err = en.Append(0xbb, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedLeaderLLT)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[28] {
		// write "PeerLogTermsRLE_zid28_ptr"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.PeerLogTermsRLE == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.PeerLogTermsRLE.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[29] {
		// write "RejectReason_zid29_str"
		err = en.Append(0xb6, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RejectReason)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[30] {
		// write "AEID_zid30_str"
		err = en.Append(0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AEID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[31] {
		// write "PreVoteOn_zid31_boo"
		err = en.Append(0xb3, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.PreVoteOn)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[32] {
		// write "MinElectionTimeoutDur_zid32_dur"
		err = en.Append(0xbf, 0x4d, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x32, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.MinElectionTimeoutDur)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[33] {
		// write "SpanMatching_zid33_ptr"
		err = en.Append(0xb6, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x33, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.SpanMatching == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {

			// honor the omitempty tags
			var empty_zgensym_8df0a91a1f250219_19 [2]bool
			fieldsInUse_zgensym_8df0a91a1f250219_20 := z.SpanMatching.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_19[:])

			// map header
			err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_20 + 1)
			if err != nil {
				return err
			}

			// runtime struct type identification for 'LogEntrySpan'
			err = en.Append(0xa1, 0x40)
			if err != nil {
				return err
			}
			err = en.WriteStringFromBytes([]byte{0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x70, 0x61, 0x6e})
			if err != nil {
				return err
			}

			if !empty_zgensym_8df0a91a1f250219_19[0] {
				// write "Beg_zid00_i64"
				err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
				if err != nil {
					return err
				}
				err = en.WriteInt64(z.SpanMatching.Beg)
				if err != nil {
					return
				}
			}

			if !empty_zgensym_8df0a91a1f250219_19[1] {
				// write "Endx_zid01_i64"
				err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
				if err != nil {
					return err
				}
				err = en.WriteInt64(z.SpanMatching.Endx)
				if err != nil {
					return
				}
			}

		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[34] {
		// write "PeerMC_zid34_ptr"
		err = en.Append(0xb0, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x34, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.PeerMC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.PeerMC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[35] {
		// write "PeerCompactionDiscardedLastIndex_zid35_i64"
		err = en.Append(0xd9, 0x2a, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerCompactionDiscardedLastIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[36] {
		// write "PeerCompactionDiscardedLastTerm_zid36_i64"
		err = en.Append(0xd9, 0x29, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PeerCompactionDiscardedLastTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[37] {
		// write "NeedSnapshotGap_zid37_boo"
		err = en.Append(0xb9, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.NeedSnapshotGap)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[38] {
		// write "SuppliedLeaderCommitIndexEntryTerm_zid38_i64"
		err = en.Append(0xd9, 0x2c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedLeaderCommitIndexEntryTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[39] {
		// write "SuppliedCompactIndex_zid39_i64"
		err = en.Append(0xbe, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedCompactIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_17[40] {
		// write "SuppliedCompactTerm_zid40_i64"
		err = en.Append(0xbd, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SuppliedCompactTerm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppendEntriesAck) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [41]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ClusterID_zid00_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[1] {
		// string "FromPeerID_zid01_str"
		o = append(o, 0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerID)
	}

	if !empty[2] {
		// string "FromPeerName_zid02_str"
		o = append(o, 0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerName)
	}

	if !empty[3] {
		// string "FromPeerServiceName_zid03_str"
		o = append(o, 0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceName)
	}

	if !empty[4] {
		// string "FromPeerServiceNameVersion_zid04_str"
		o = append(o, 0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceNameVersion)
	}

	if !empty[5] {
		// string "Term_zid05_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[6] {
		// string "Rejected_zid06_boo"
		o = append(o, 0xb2, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Rejected)
	}

	if !empty[7] {
		// string "LogsMatchExactly_zid07_boo"
		o = append(o, 0xba, 0x4c, 0x6f, 0x67, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.LogsMatchExactly)
	}

	if !empty[8] {
		// string "LargestCommonRaftIndex_zid08_i64"
		o = append(o, 0xd9, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LargestCommonRaftIndex)
	}

	if !empty[9] {
		// string "ConflictTerm_zid09_i64"
		o = append(o, 0xb6, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ConflictTerm)
	}

	if !empty[10] {
		// string "ConflictTerm1stIndex_zid10_i64"
		o = append(o, 0xbe, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x31, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ConflictTerm1stIndex)
	}

	if !empty[11] {
		// string "PeerLogCompactIndex_zid11_i64"
		o = append(o, 0xbd, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerLogCompactIndex)
	}

	if !empty[12] {
		// string "PeerLogCompactTerm_zid12_i64"
		o = append(o, 0xbc, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerLogCompactTerm)
	}

	if !empty[13] {
		// string "PeerLogFirstIndex_zid13_i64"
		o = append(o, 0xbb, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerLogFirstIndex)
	}

	if !empty[14] {
		// string "PeerLogFirstTerm_zid14_i64"
		o = append(o, 0xba, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerLogFirstTerm)
	}

	if !empty[15] {
		// string "PeerLogLastIndex_zid15_i64"
		o = append(o, 0xba, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerLogLastIndex)
	}

	if !empty[16] {
		// string "PeerLogLastTerm_zid16_i64"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerLogLastTerm)
	}

	if !empty[17] {
		// string "SuppliedPrevLogIndex_zid17_i64"
		o = append(o, 0xbe, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedPrevLogIndex)
	}

	if !empty[18] {
		// string "SuppliedPrevLogTerm_zid18_i64"
		o = append(o, 0xbd, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedPrevLogTerm)
	}

	if !empty[19] {
		// string "SuppliedEntriesIndexBeg_zid19_i64"
		o = append(o, 0xd9, 0x21, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedEntriesIndexBeg)
	}

	if !empty[20] {
		// string "SuppliedEntriesIndexEnd_zid20_i64"
		o = append(o, 0xd9, 0x21, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedEntriesIndexEnd)
	}

	if !empty[21] {
		// string "SuppliedLeaderCommitIndex_zid21_i64"
		o = append(o, 0xd9, 0x23, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedLeaderCommitIndex)
	}

	if !empty[22] {
		// string "SuppliedLeader_zid22_str"
		o = append(o, 0xb8, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SuppliedLeader)
	}

	if !empty[23] {
		// string "SuppliedLeaderName_zid23_str"
		o = append(o, 0xbc, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SuppliedLeaderName)
	}

	if !empty[24] {
		// string "SuppliedLeaderTermsRLE_zid24_ptr"
		o = append(o, 0xd9, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SuppliedLeaderTermsRLE == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.SuppliedLeaderTermsRLE.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[25] {
		// string "SuppliedLeaderLastTerm_zid25_i64"
		o = append(o, 0xd9, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedLeaderLastTerm)
	}

	if !empty[26] {
		// string "SuppliedLeaderLLI_zid26_i64"
		o = append(o, 0xbb, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x49, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedLeaderLLI)
	}

	if !empty[27] {
		// string "SuppliedLeaderLLT_zid27_i64"
		o = append(o, 0xbb, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x4c, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedLeaderLLT)
	}

	if !empty[28] {
		// string "PeerLogTermsRLE_zid28_ptr"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.PeerLogTermsRLE == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.PeerLogTermsRLE.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[29] {
		// string "RejectReason_zid29_str"
		o = append(o, 0xb6, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RejectReason)
	}

	if !empty[30] {
		// string "AEID_zid30_str"
		o = append(o, 0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AEID)
	}

	if !empty[31] {
		// string "PreVoteOn_zid31_boo"
		o = append(o, 0xb3, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.PreVoteOn)
	}

	if !empty[32] {
		// string "MinElectionTimeoutDur_zid32_dur"
		o = append(o, 0xbf, 0x4d, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x32, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.MinElectionTimeoutDur)
	}

	if !empty[33] {
		// string "SpanMatching_zid33_ptr"
		o = append(o, 0xb6, 0x53, 0x70, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x33, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.SpanMatching == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			// honor the omitempty tags
			var empty [2]bool
			fieldsInUse := z.SpanMatching.fieldsNotEmpty(empty[:])
			o = msgp.AppendMapHeader(o, fieldsInUse)

			if !empty[0] {
				// string "Beg_zid00_i64"
				o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
				o = msgp.AppendInt64(o, z.SpanMatching.Beg)
			}

			if !empty[1] {
				// string "Endx_zid01_i64"
				o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
				o = msgp.AppendInt64(o, z.SpanMatching.Endx)
			}

		}
	}

	if !empty[34] {
		// string "PeerMC_zid34_ptr"
		o = append(o, 0xb0, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x34, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.PeerMC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.PeerMC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[35] {
		// string "PeerCompactionDiscardedLastIndex_zid35_i64"
		o = append(o, 0xd9, 0x2a, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerCompactionDiscardedLastIndex)
	}

	if !empty[36] {
		// string "PeerCompactionDiscardedLastTerm_zid36_i64"
		o = append(o, 0xd9, 0x29, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PeerCompactionDiscardedLastTerm)
	}

	if !empty[37] {
		// string "NeedSnapshotGap_zid37_boo"
		o = append(o, 0xb9, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x61, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.NeedSnapshotGap)
	}

	if !empty[38] {
		// string "SuppliedLeaderCommitIndexEntryTerm_zid38_i64"
		o = append(o, 0xd9, 0x2c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedLeaderCommitIndexEntryTerm)
	}

	if !empty[39] {
		// string "SuppliedCompactIndex_zid39_i64"
		o = append(o, 0xbe, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedCompactIndex)
	}

	if !empty[40] {
		// string "SuppliedCompactTerm_zid40_i64"
		o = append(o, 0xbd, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SuppliedCompactTerm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppendEntriesAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *AppendEntriesAck) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields21zgensym_8df0a91a1f250219_22 = 41

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields21zgensym_8df0a91a1f250219_22 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields21zgensym_8df0a91a1f250219_22, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft21zgensym_8df0a91a1f250219_22 := totalEncodedFields21zgensym_8df0a91a1f250219_22
	missingFieldsLeft21zgensym_8df0a91a1f250219_22 := maxFields21zgensym_8df0a91a1f250219_22 - totalEncodedFields21zgensym_8df0a91a1f250219_22

	var nextMiss21zgensym_8df0a91a1f250219_22 int32 = -1
	var found21zgensym_8df0a91a1f250219_22 [maxFields21zgensym_8df0a91a1f250219_22]bool
	var curField21zgensym_8df0a91a1f250219_22 string

doneWithStruct21zgensym_8df0a91a1f250219_22:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft21zgensym_8df0a91a1f250219_22 > 0 || missingFieldsLeft21zgensym_8df0a91a1f250219_22 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft21zgensym_8df0a91a1f250219_22, missingFieldsLeft21zgensym_8df0a91a1f250219_22, msgp.ShowFound(found21zgensym_8df0a91a1f250219_22[:]), unmarshalMsgFieldOrder21zgensym_8df0a91a1f250219_22)
		if encodedFieldsLeft21zgensym_8df0a91a1f250219_22 > 0 {
			encodedFieldsLeft21zgensym_8df0a91a1f250219_22--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField21zgensym_8df0a91a1f250219_22 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss21zgensym_8df0a91a1f250219_22 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss21zgensym_8df0a91a1f250219_22 = 0
			}
			for nextMiss21zgensym_8df0a91a1f250219_22 < maxFields21zgensym_8df0a91a1f250219_22 && (found21zgensym_8df0a91a1f250219_22[nextMiss21zgensym_8df0a91a1f250219_22] || unmarshalMsgFieldSkip21zgensym_8df0a91a1f250219_22[nextMiss21zgensym_8df0a91a1f250219_22]) {
				nextMiss21zgensym_8df0a91a1f250219_22++
			}
			if nextMiss21zgensym_8df0a91a1f250219_22 == maxFields21zgensym_8df0a91a1f250219_22 {
				// filled all the empty fields!
				break doneWithStruct21zgensym_8df0a91a1f250219_22
			}
			missingFieldsLeft21zgensym_8df0a91a1f250219_22--
			curField21zgensym_8df0a91a1f250219_22 = unmarshalMsgFieldOrder21zgensym_8df0a91a1f250219_22[nextMiss21zgensym_8df0a91a1f250219_22]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField21zgensym_8df0a91a1f250219_22)
		switch curField21zgensym_8df0a91a1f250219_22 {
		// -- templateUnmarshalMsg ends here --

		case "ClusterID_zid00_str":
			found21zgensym_8df0a91a1f250219_22[0] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found21zgensym_8df0a91a1f250219_22[1] = true
			z.FromPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found21zgensym_8df0a91a1f250219_22[2] = true
			z.FromPeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found21zgensym_8df0a91a1f250219_22[3] = true
			z.FromPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found21zgensym_8df0a91a1f250219_22[4] = true
			z.FromPeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Term_zid05_i64":
			found21zgensym_8df0a91a1f250219_22[5] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Rejected_zid06_boo":
			found21zgensym_8df0a91a1f250219_22[6] = true
			z.Rejected, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "LogsMatchExactly_zid07_boo":
			found21zgensym_8df0a91a1f250219_22[7] = true
			z.LogsMatchExactly, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "LargestCommonRaftIndex_zid08_i64":
			found21zgensym_8df0a91a1f250219_22[8] = true
			z.LargestCommonRaftIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ConflictTerm_zid09_i64":
			found21zgensym_8df0a91a1f250219_22[9] = true
			z.ConflictTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ConflictTerm1stIndex_zid10_i64":
			found21zgensym_8df0a91a1f250219_22[10] = true
			z.ConflictTerm1stIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogCompactIndex_zid11_i64":
			found21zgensym_8df0a91a1f250219_22[11] = true
			z.PeerLogCompactIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogCompactTerm_zid12_i64":
			found21zgensym_8df0a91a1f250219_22[12] = true
			z.PeerLogCompactTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogFirstIndex_zid13_i64":
			found21zgensym_8df0a91a1f250219_22[13] = true
			z.PeerLogFirstIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogFirstTerm_zid14_i64":
			found21zgensym_8df0a91a1f250219_22[14] = true
			z.PeerLogFirstTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogLastIndex_zid15_i64":
			found21zgensym_8df0a91a1f250219_22[15] = true
			z.PeerLogLastIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogLastTerm_zid16_i64":
			found21zgensym_8df0a91a1f250219_22[16] = true
			z.PeerLogLastTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedPrevLogIndex_zid17_i64":
			found21zgensym_8df0a91a1f250219_22[17] = true
			z.SuppliedPrevLogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedPrevLogTerm_zid18_i64":
			found21zgensym_8df0a91a1f250219_22[18] = true
			z.SuppliedPrevLogTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedEntriesIndexBeg_zid19_i64":
			found21zgensym_8df0a91a1f250219_22[19] = true
			z.SuppliedEntriesIndexBeg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedEntriesIndexEnd_zid20_i64":
			found21zgensym_8df0a91a1f250219_22[20] = true
			z.SuppliedEntriesIndexEnd, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeaderCommitIndex_zid21_i64":
			found21zgensym_8df0a91a1f250219_22[21] = true
			z.SuppliedLeaderCommitIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeader_zid22_str":
			found21zgensym_8df0a91a1f250219_22[22] = true
			z.SuppliedLeader, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeaderName_zid23_str":
			found21zgensym_8df0a91a1f250219_22[23] = true
			z.SuppliedLeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeaderTermsRLE_zid24_ptr":
			found21zgensym_8df0a91a1f250219_22[24] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.SuppliedLeaderTermsRLE != nil {
					z.SuppliedLeaderTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.SuppliedLeaderTermsRLE {
						z.SuppliedLeaderTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.SuppliedLeaderTermsRLE == nil {
						z.SuppliedLeaderTermsRLE = new(TermsRLE)
					}

					bts, err = z.SuppliedLeaderTermsRLE.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "SuppliedLeaderLastTerm_zid25_i64":
			found21zgensym_8df0a91a1f250219_22[25] = true
			z.SuppliedLeaderLastTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeaderLLI_zid26_i64":
			found21zgensym_8df0a91a1f250219_22[26] = true
			z.SuppliedLeaderLLI, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeaderLLT_zid27_i64":
			found21zgensym_8df0a91a1f250219_22[27] = true
			z.SuppliedLeaderLLT, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerLogTermsRLE_zid28_ptr":
			found21zgensym_8df0a91a1f250219_22[28] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.PeerLogTermsRLE != nil {
					z.PeerLogTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.PeerLogTermsRLE {
						z.PeerLogTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.PeerLogTermsRLE == nil {
						z.PeerLogTermsRLE = new(TermsRLE)
					}

					bts, err = z.PeerLogTermsRLE.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "RejectReason_zid29_str":
			found21zgensym_8df0a91a1f250219_22[29] = true
			z.RejectReason, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "AEID_zid30_str":
			found21zgensym_8df0a91a1f250219_22[30] = true
			z.AEID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PreVoteOn_zid31_boo":
			found21zgensym_8df0a91a1f250219_22[31] = true
			z.PreVoteOn, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "MinElectionTimeoutDur_zid32_dur":
			found21zgensym_8df0a91a1f250219_22[32] = true
			z.MinElectionTimeoutDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "SpanMatching_zid33_ptr":
			found21zgensym_8df0a91a1f250219_22[33] = true
			// default gPtr logic.
			if nbs.PeekNil(bts) && z.SpanMatching == nil {
				// consume the nil
				bts, err = nbs.ReadNilBytes(bts)
				if err != nil {
					return
				}
			} else {
				// read as-if the wire has bytes, letting nbs take care of nils.

				if z.SpanMatching == nil {
					z.SpanMatching = new(LogEntrySpan)
				}

				const maxFields23zgensym_8df0a91a1f250219_24 = 2

				// -- templateUnmarshalMsg starts here--
				var totalEncodedFields23zgensym_8df0a91a1f250219_24 uint32
				if !nbs.AlwaysNil {
					totalEncodedFields23zgensym_8df0a91a1f250219_24, bts, err = nbs.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
				}
				encodedFieldsLeft23zgensym_8df0a91a1f250219_24 := totalEncodedFields23zgensym_8df0a91a1f250219_24
				missingFieldsLeft23zgensym_8df0a91a1f250219_24 := maxFields23zgensym_8df0a91a1f250219_24 - totalEncodedFields23zgensym_8df0a91a1f250219_24

				var nextMiss23zgensym_8df0a91a1f250219_24 int32 = -1
				var found23zgensym_8df0a91a1f250219_24 [maxFields23zgensym_8df0a91a1f250219_24]bool
				var curField23zgensym_8df0a91a1f250219_24 string

			doneWithStruct23zgensym_8df0a91a1f250219_24:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft23zgensym_8df0a91a1f250219_24 > 0 || missingFieldsLeft23zgensym_8df0a91a1f250219_24 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft23zgensym_8df0a91a1f250219_24, missingFieldsLeft23zgensym_8df0a91a1f250219_24, msgp.ShowFound(found23zgensym_8df0a91a1f250219_24[:]), unmarshalMsgFieldOrder23zgensym_8df0a91a1f250219_24)
					if encodedFieldsLeft23zgensym_8df0a91a1f250219_24 > 0 {
						encodedFieldsLeft23zgensym_8df0a91a1f250219_24--
						field, bts, err = nbs.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						curField23zgensym_8df0a91a1f250219_24 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss23zgensym_8df0a91a1f250219_24 < 0 {
							// set bts to contain just mnil (0xc0)
							bts = nbs.PushAlwaysNil(bts)
							nextMiss23zgensym_8df0a91a1f250219_24 = 0
						}
						for nextMiss23zgensym_8df0a91a1f250219_24 < maxFields23zgensym_8df0a91a1f250219_24 && (found23zgensym_8df0a91a1f250219_24[nextMiss23zgensym_8df0a91a1f250219_24] || unmarshalMsgFieldSkip23zgensym_8df0a91a1f250219_24[nextMiss23zgensym_8df0a91a1f250219_24]) {
							nextMiss23zgensym_8df0a91a1f250219_24++
						}
						if nextMiss23zgensym_8df0a91a1f250219_24 == maxFields23zgensym_8df0a91a1f250219_24 {
							// filled all the empty fields!
							break doneWithStruct23zgensym_8df0a91a1f250219_24
						}
						missingFieldsLeft23zgensym_8df0a91a1f250219_24--
						curField23zgensym_8df0a91a1f250219_24 = unmarshalMsgFieldOrder23zgensym_8df0a91a1f250219_24[nextMiss23zgensym_8df0a91a1f250219_24]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField23zgensym_8df0a91a1f250219_24)
					switch curField23zgensym_8df0a91a1f250219_24 {
					// -- templateUnmarshalMsg ends here --

					case "Beg_zid00_i64":
						found23zgensym_8df0a91a1f250219_24[0] = true
						z.SpanMatching.Beg, bts, err = nbs.ReadInt64Bytes(bts)

						if err != nil {
							return
						}
					case "Endx_zid01_i64":
						found23zgensym_8df0a91a1f250219_24[1] = true
						z.SpanMatching.Endx, bts, err = nbs.ReadInt64Bytes(bts)

						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
				if nextMiss23zgensym_8df0a91a1f250219_24 != -1 {
					bts = nbs.PopAlwaysNil()
				}

			}
		case "PeerMC_zid34_ptr":
			found21zgensym_8df0a91a1f250219_22[34] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.PeerMC != nil {
					z.PeerMC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.PeerMC {
						z.PeerMC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.PeerMC == nil {
						z.PeerMC = new(MemberConfig)
					}

					bts, err = z.PeerMC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "PeerCompactionDiscardedLastIndex_zid35_i64":
			found21zgensym_8df0a91a1f250219_22[35] = true
			z.PeerCompactionDiscardedLastIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerCompactionDiscardedLastTerm_zid36_i64":
			found21zgensym_8df0a91a1f250219_22[36] = true
			z.PeerCompactionDiscardedLastTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "NeedSnapshotGap_zid37_boo":
			found21zgensym_8df0a91a1f250219_22[37] = true
			z.NeedSnapshotGap, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "SuppliedLeaderCommitIndexEntryTerm_zid38_i64":
			found21zgensym_8df0a91a1f250219_22[38] = true
			z.SuppliedLeaderCommitIndexEntryTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedCompactIndex_zid39_i64":
			found21zgensym_8df0a91a1f250219_22[39] = true
			z.SuppliedCompactIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SuppliedCompactTerm_zid40_i64":
			found21zgensym_8df0a91a1f250219_22[40] = true
			z.SuppliedCompactTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss21zgensym_8df0a91a1f250219_22 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of AppendEntriesAck
var unmarshalMsgFieldOrder21zgensym_8df0a91a1f250219_22 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "Term_zid05_i64", "Rejected_zid06_boo", "LogsMatchExactly_zid07_boo", "LargestCommonRaftIndex_zid08_i64", "ConflictTerm_zid09_i64", "ConflictTerm1stIndex_zid10_i64", "PeerLogCompactIndex_zid11_i64", "PeerLogCompactTerm_zid12_i64", "PeerLogFirstIndex_zid13_i64", "PeerLogFirstTerm_zid14_i64", "PeerLogLastIndex_zid15_i64", "PeerLogLastTerm_zid16_i64", "SuppliedPrevLogIndex_zid17_i64", "SuppliedPrevLogTerm_zid18_i64", "SuppliedEntriesIndexBeg_zid19_i64", "SuppliedEntriesIndexEnd_zid20_i64", "SuppliedLeaderCommitIndex_zid21_i64", "SuppliedLeader_zid22_str", "SuppliedLeaderName_zid23_str", "SuppliedLeaderTermsRLE_zid24_ptr", "SuppliedLeaderLastTerm_zid25_i64", "SuppliedLeaderLLI_zid26_i64", "SuppliedLeaderLLT_zid27_i64", "PeerLogTermsRLE_zid28_ptr", "RejectReason_zid29_str", "AEID_zid30_str", "PreVoteOn_zid31_boo", "MinElectionTimeoutDur_zid32_dur", "SpanMatching_zid33_ptr", "PeerMC_zid34_ptr", "PeerCompactionDiscardedLastIndex_zid35_i64", "PeerCompactionDiscardedLastTerm_zid36_i64", "NeedSnapshotGap_zid37_boo", "SuppliedLeaderCommitIndexEntryTerm_zid38_i64", "SuppliedCompactIndex_zid39_i64", "SuppliedCompactTerm_zid40_i64"}

var unmarshalMsgFieldSkip21zgensym_8df0a91a1f250219_22 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fields of LogEntrySpan
var unmarshalMsgFieldOrder23zgensym_8df0a91a1f250219_24 = []string{"Beg_zid00_i64", "Endx_zid01_i64"}

var unmarshalMsgFieldSkip23zgensym_8df0a91a1f250219_24 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppendEntriesAck) Msgsize() (s int) {
	s = 3 + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 21 + msgp.StringPrefixSize + len(z.FromPeerID) + 23 + msgp.StringPrefixSize + len(z.FromPeerName) + 30 + msgp.StringPrefixSize + len(z.FromPeerServiceName) + 38 + msgp.StringPrefixSize + len(z.FromPeerServiceNameVersion) + 15 + msgp.Int64Size + 19 + msgp.BoolSize + 27 + msgp.BoolSize + 34 + msgp.Int64Size + 23 + msgp.Int64Size + 31 + msgp.Int64Size + 30 + msgp.Int64Size + 29 + msgp.Int64Size + 28 + msgp.Int64Size + 27 + msgp.Int64Size + 27 + msgp.Int64Size + 26 + msgp.Int64Size + 31 + msgp.Int64Size + 30 + msgp.Int64Size + 35 + msgp.Int64Size + 35 + msgp.Int64Size + 37 + msgp.Int64Size + 25 + msgp.StringPrefixSize + len(z.SuppliedLeader) + 29 + msgp.StringPrefixSize + len(z.SuppliedLeaderName) + 34
	if z.SuppliedLeaderTermsRLE == nil {
		s += msgp.NilSize
	} else {
		s += z.SuppliedLeaderTermsRLE.Msgsize()
	}
	s += 34 + msgp.Int64Size + 28 + msgp.Int64Size + 28 + msgp.Int64Size + 26
	if z.PeerLogTermsRLE == nil {
		s += msgp.NilSize
	} else {
		s += z.PeerLogTermsRLE.Msgsize()
	}
	s += 23 + msgp.StringPrefixSize + len(z.RejectReason) + 15 + msgp.StringPrefixSize + len(z.AEID) + 20 + msgp.BoolSize + 32 + msgp.DurationSize + 23
	if z.SpanMatching == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 14 + msgp.Int64Size + 15 + msgp.Int64Size
	}
	s += 17
	if z.PeerMC == nil {
		s += msgp.NilSize
	} else {
		s += z.PeerMC.Msgsize()
	}
	s += 44 + msgp.Int64Size + 43 + msgp.Int64Size + 26 + msgp.BoolSize + 46 + msgp.Int64Size + 31 + msgp.Int64Size + 30 + msgp.Int64Size
	return
}
func (z *AppendEntriesAck) Gstring() (r string) {
	r = "&AppendEntriesAck{\n"
	r += fmt.Sprintf("                         ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("                        FromPeerID: \"%v\",\n", z.FromPeerID)
	r += fmt.Sprintf("                      FromPeerName: \"%v\",\n", z.FromPeerName)
	r += fmt.Sprintf("               FromPeerServiceName: \"%v\",\n", z.FromPeerServiceName)
	r += fmt.Sprintf("        FromPeerServiceNameVersion: \"%v\",\n", z.FromPeerServiceNameVersion)
	r += fmt.Sprintf("                              Term: %v,\n", z.Term)
	r += fmt.Sprintf("                          Rejected: %v,\n", z.Rejected)
	r += fmt.Sprintf("                  LogsMatchExactly: %v,\n", z.LogsMatchExactly)
	r += fmt.Sprintf("            LargestCommonRaftIndex: %v,\n", z.LargestCommonRaftIndex)
	r += fmt.Sprintf("                      ConflictTerm: %v,\n", z.ConflictTerm)
	r += fmt.Sprintf("              ConflictTerm1stIndex: %v,\n", z.ConflictTerm1stIndex)
	r += fmt.Sprintf("               PeerLogCompactIndex: %v,\n", z.PeerLogCompactIndex)
	r += fmt.Sprintf("                PeerLogCompactTerm: %v,\n", z.PeerLogCompactTerm)
	r += fmt.Sprintf("                 PeerLogFirstIndex: %v,\n", z.PeerLogFirstIndex)
	r += fmt.Sprintf("                  PeerLogFirstTerm: %v,\n", z.PeerLogFirstTerm)
	r += fmt.Sprintf("                  PeerLogLastIndex: %v,\n", z.PeerLogLastIndex)
	r += fmt.Sprintf("                   PeerLogLastTerm: %v,\n", z.PeerLogLastTerm)
	r += fmt.Sprintf("              SuppliedPrevLogIndex: %v,\n", z.SuppliedPrevLogIndex)
	r += fmt.Sprintf("               SuppliedPrevLogTerm: %v,\n", z.SuppliedPrevLogTerm)
	r += fmt.Sprintf("           SuppliedEntriesIndexBeg: %v,\n", z.SuppliedEntriesIndexBeg)
	r += fmt.Sprintf("           SuppliedEntriesIndexEnd: %v,\n", z.SuppliedEntriesIndexEnd)
	r += fmt.Sprintf("         SuppliedLeaderCommitIndex: %v,\n", z.SuppliedLeaderCommitIndex)
	r += fmt.Sprintf("                    SuppliedLeader: \"%v\",\n", z.SuppliedLeader)
	r += fmt.Sprintf("                SuppliedLeaderName: \"%v\",\n", z.SuppliedLeaderName)
	r += fmt.Sprintf("            SuppliedLeaderTermsRLE: %v,\n", z.SuppliedLeaderTermsRLE)
	r += fmt.Sprintf("            SuppliedLeaderLastTerm: %v,\n", z.SuppliedLeaderLastTerm)
	r += fmt.Sprintf("                 SuppliedLeaderLLI: %v,\n", z.SuppliedLeaderLLI)
	r += fmt.Sprintf("                 SuppliedLeaderLLT: %v,\n", z.SuppliedLeaderLLT)
	r += fmt.Sprintf("                   PeerLogTermsRLE: %v,\n", z.PeerLogTermsRLE)
	r += fmt.Sprintf("                      RejectReason: \"%v\",\n", z.RejectReason)
	r += fmt.Sprintf("                              AEID: \"%v\",\n", z.AEID)
	r += fmt.Sprintf("                         PreVoteOn: %v,\n", z.PreVoteOn)
	r += fmt.Sprintf("             MinElectionTimeoutDur: %v,\n", z.MinElectionTimeoutDur)
	r += fmt.Sprintf("                      SpanMatching: %v,\n", z.SpanMatching)
	r += fmt.Sprintf("                            PeerMC: %v,\n", z.PeerMC)
	r += fmt.Sprintf("  PeerCompactionDiscardedLastIndex: %v,\n", z.PeerCompactionDiscardedLastIndex)
	r += fmt.Sprintf("   PeerCompactionDiscardedLastTerm: %v,\n", z.PeerCompactionDiscardedLastTerm)
	r += fmt.Sprintf("                   NeedSnapshotGap: %v,\n", z.NeedSnapshotGap)
	r += fmt.Sprintf("SuppliedLeaderCommitIndexEntryTerm: %v,\n", z.SuppliedLeaderCommitIndexEntryTerm)
	r += fmt.Sprintf("              SuppliedCompactIndex: %v,\n", z.SuppliedCompactIndex)
	r += fmt.Sprintf("               SuppliedCompactTerm: %v,\n", z.SuppliedCompactTerm)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ArtTable) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields25zgensym_8df0a91a1f250219_26 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields25zgensym_8df0a91a1f250219_26 uint32
	totalEncodedFields25zgensym_8df0a91a1f250219_26, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft25zgensym_8df0a91a1f250219_26 := totalEncodedFields25zgensym_8df0a91a1f250219_26
	missingFieldsLeft25zgensym_8df0a91a1f250219_26 := maxFields25zgensym_8df0a91a1f250219_26 - totalEncodedFields25zgensym_8df0a91a1f250219_26

	var nextMiss25zgensym_8df0a91a1f250219_26 int32 = -1
	var found25zgensym_8df0a91a1f250219_26 [maxFields25zgensym_8df0a91a1f250219_26]bool
	var curField25zgensym_8df0a91a1f250219_26 string

doneWithStruct25zgensym_8df0a91a1f250219_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_8df0a91a1f250219_26 > 0 || missingFieldsLeft25zgensym_8df0a91a1f250219_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_8df0a91a1f250219_26, missingFieldsLeft25zgensym_8df0a91a1f250219_26, msgp.ShowFound(found25zgensym_8df0a91a1f250219_26[:]), decodeMsgFieldOrder25zgensym_8df0a91a1f250219_26)
		if encodedFieldsLeft25zgensym_8df0a91a1f250219_26 > 0 {
			encodedFieldsLeft25zgensym_8df0a91a1f250219_26--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField25zgensym_8df0a91a1f250219_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_8df0a91a1f250219_26 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss25zgensym_8df0a91a1f250219_26 = 0
			}
			for nextMiss25zgensym_8df0a91a1f250219_26 < maxFields25zgensym_8df0a91a1f250219_26 && (found25zgensym_8df0a91a1f250219_26[nextMiss25zgensym_8df0a91a1f250219_26] || decodeMsgFieldSkip25zgensym_8df0a91a1f250219_26[nextMiss25zgensym_8df0a91a1f250219_26]) {
				nextMiss25zgensym_8df0a91a1f250219_26++
			}
			if nextMiss25zgensym_8df0a91a1f250219_26 == maxFields25zgensym_8df0a91a1f250219_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_8df0a91a1f250219_26
			}
			missingFieldsLeft25zgensym_8df0a91a1f250219_26--
			curField25zgensym_8df0a91a1f250219_26 = decodeMsgFieldOrder25zgensym_8df0a91a1f250219_26[nextMiss25zgensym_8df0a91a1f250219_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_8df0a91a1f250219_26)
		switch curField25zgensym_8df0a91a1f250219_26 {
		// -- templateDecodeMsg ends here --

		case "Tree_zid00_ptr":
			found25zgensym_8df0a91a1f250219_26[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Tree != nil {
					dc.PushAlwaysNil()
					err = z.Tree.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Tree == nil {
					z.Tree = new(art.Tree)
				}
				dc.DedupIndexEachPtr(z.Tree)

				err = z.Tree.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_8df0a91a1f250219_26 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ArtTable
var decodeMsgFieldOrder25zgensym_8df0a91a1f250219_26 = []string{"Tree_zid00_ptr"}

var decodeMsgFieldSkip25zgensym_8df0a91a1f250219_26 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *ArtTable) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Tree == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ArtTable) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_27 [1]bool
	fieldsInUse_zgensym_8df0a91a1f250219_28 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_27[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_28 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ArtTable'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x41, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_27[0] {
		// write "Tree_zid00_ptr"
		err = en.Append(0xae, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Tree == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Tree.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ArtTable) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Tree_zid00_ptr"
		o = append(o, 0xae, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Tree == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Tree.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ArtTable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ArtTable) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields29zgensym_8df0a91a1f250219_30 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields29zgensym_8df0a91a1f250219_30 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields29zgensym_8df0a91a1f250219_30, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft29zgensym_8df0a91a1f250219_30 := totalEncodedFields29zgensym_8df0a91a1f250219_30
	missingFieldsLeft29zgensym_8df0a91a1f250219_30 := maxFields29zgensym_8df0a91a1f250219_30 - totalEncodedFields29zgensym_8df0a91a1f250219_30

	var nextMiss29zgensym_8df0a91a1f250219_30 int32 = -1
	var found29zgensym_8df0a91a1f250219_30 [maxFields29zgensym_8df0a91a1f250219_30]bool
	var curField29zgensym_8df0a91a1f250219_30 string

doneWithStruct29zgensym_8df0a91a1f250219_30:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft29zgensym_8df0a91a1f250219_30 > 0 || missingFieldsLeft29zgensym_8df0a91a1f250219_30 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft29zgensym_8df0a91a1f250219_30, missingFieldsLeft29zgensym_8df0a91a1f250219_30, msgp.ShowFound(found29zgensym_8df0a91a1f250219_30[:]), unmarshalMsgFieldOrder29zgensym_8df0a91a1f250219_30)
		if encodedFieldsLeft29zgensym_8df0a91a1f250219_30 > 0 {
			encodedFieldsLeft29zgensym_8df0a91a1f250219_30--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField29zgensym_8df0a91a1f250219_30 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss29zgensym_8df0a91a1f250219_30 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss29zgensym_8df0a91a1f250219_30 = 0
			}
			for nextMiss29zgensym_8df0a91a1f250219_30 < maxFields29zgensym_8df0a91a1f250219_30 && (found29zgensym_8df0a91a1f250219_30[nextMiss29zgensym_8df0a91a1f250219_30] || unmarshalMsgFieldSkip29zgensym_8df0a91a1f250219_30[nextMiss29zgensym_8df0a91a1f250219_30]) {
				nextMiss29zgensym_8df0a91a1f250219_30++
			}
			if nextMiss29zgensym_8df0a91a1f250219_30 == maxFields29zgensym_8df0a91a1f250219_30 {
				// filled all the empty fields!
				break doneWithStruct29zgensym_8df0a91a1f250219_30
			}
			missingFieldsLeft29zgensym_8df0a91a1f250219_30--
			curField29zgensym_8df0a91a1f250219_30 = unmarshalMsgFieldOrder29zgensym_8df0a91a1f250219_30[nextMiss29zgensym_8df0a91a1f250219_30]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField29zgensym_8df0a91a1f250219_30)
		switch curField29zgensym_8df0a91a1f250219_30 {
		// -- templateUnmarshalMsg ends here --

		case "Tree_zid00_ptr":
			found29zgensym_8df0a91a1f250219_30[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Tree != nil {
					z.Tree.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Tree {
						z.Tree.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Tree == nil {
						z.Tree = new(art.Tree)
					}

					bts, err = z.Tree.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss29zgensym_8df0a91a1f250219_30 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ArtTable
var unmarshalMsgFieldOrder29zgensym_8df0a91a1f250219_30 = []string{"Tree_zid00_ptr"}

var unmarshalMsgFieldSkip29zgensym_8df0a91a1f250219_30 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ArtTable) Msgsize() (s int) {
	s = 1 + 15
	if z.Tree == nil {
		s += msgp.NilSize
	} else {
		s += z.Tree.Msgsize()
	}
	return
}
func (z *ArtTable) Gstring() (r string) {
	r = "&ArtTable{\n"
	r += fmt.Sprintf("Tree: %v,\n", z.Tree)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Blake3sum) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields31zgensym_8df0a91a1f250219_32 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields31zgensym_8df0a91a1f250219_32 uint32
	totalEncodedFields31zgensym_8df0a91a1f250219_32, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft31zgensym_8df0a91a1f250219_32 := totalEncodedFields31zgensym_8df0a91a1f250219_32
	missingFieldsLeft31zgensym_8df0a91a1f250219_32 := maxFields31zgensym_8df0a91a1f250219_32 - totalEncodedFields31zgensym_8df0a91a1f250219_32

	var nextMiss31zgensym_8df0a91a1f250219_32 int32 = -1
	var found31zgensym_8df0a91a1f250219_32 [maxFields31zgensym_8df0a91a1f250219_32]bool
	var curField31zgensym_8df0a91a1f250219_32 string

doneWithStruct31zgensym_8df0a91a1f250219_32:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft31zgensym_8df0a91a1f250219_32 > 0 || missingFieldsLeft31zgensym_8df0a91a1f250219_32 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft31zgensym_8df0a91a1f250219_32, missingFieldsLeft31zgensym_8df0a91a1f250219_32, msgp.ShowFound(found31zgensym_8df0a91a1f250219_32[:]), decodeMsgFieldOrder31zgensym_8df0a91a1f250219_32)
		if encodedFieldsLeft31zgensym_8df0a91a1f250219_32 > 0 {
			encodedFieldsLeft31zgensym_8df0a91a1f250219_32--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField31zgensym_8df0a91a1f250219_32 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss31zgensym_8df0a91a1f250219_32 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss31zgensym_8df0a91a1f250219_32 = 0
			}
			for nextMiss31zgensym_8df0a91a1f250219_32 < maxFields31zgensym_8df0a91a1f250219_32 && (found31zgensym_8df0a91a1f250219_32[nextMiss31zgensym_8df0a91a1f250219_32] || decodeMsgFieldSkip31zgensym_8df0a91a1f250219_32[nextMiss31zgensym_8df0a91a1f250219_32]) {
				nextMiss31zgensym_8df0a91a1f250219_32++
			}
			if nextMiss31zgensym_8df0a91a1f250219_32 == maxFields31zgensym_8df0a91a1f250219_32 {
				// filled all the empty fields!
				break doneWithStruct31zgensym_8df0a91a1f250219_32
			}
			missingFieldsLeft31zgensym_8df0a91a1f250219_32--
			curField31zgensym_8df0a91a1f250219_32 = decodeMsgFieldOrder31zgensym_8df0a91a1f250219_32[nextMiss31zgensym_8df0a91a1f250219_32]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField31zgensym_8df0a91a1f250219_32)
		switch curField31zgensym_8df0a91a1f250219_32 {
		// -- templateDecodeMsg ends here --

		case "Sum33B_zid00_str":
			found31zgensym_8df0a91a1f250219_32[0] = true
			z.Sum33B, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Sum33Bchain_zid01_str":
			found31zgensym_8df0a91a1f250219_32[1] = true
			z.Sum33Bchain, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss31zgensym_8df0a91a1f250219_32 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Blake3sum
var decodeMsgFieldOrder31zgensym_8df0a91a1f250219_32 = []string{"Sum33B_zid00_str", "Sum33Bchain_zid01_str"}

var decodeMsgFieldSkip31zgensym_8df0a91a1f250219_32 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Blake3sum) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Sum33B) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Sum33Bchain) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Blake3sum) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_33 [2]bool
	fieldsInUse_zgensym_8df0a91a1f250219_34 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_33[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_34 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Blake3sum'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x6c, 0x61, 0x6b, 0x65, 0x33, 0x73, 0x75, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_33[0] {
		// write "Sum33B_zid00_str"
		err = en.Append(0xb0, 0x53, 0x75, 0x6d, 0x33, 0x33, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Sum33B)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_33[1] {
		// write "Sum33Bchain_zid01_str"
		err = en.Append(0xb5, 0x53, 0x75, 0x6d, 0x33, 0x33, 0x42, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Sum33Bchain)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Blake3sum) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Sum33B_zid00_str"
		o = append(o, 0xb0, 0x53, 0x75, 0x6d, 0x33, 0x33, 0x42, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Sum33B)
	}

	if !empty[1] {
		// string "Sum33Bchain_zid01_str"
		o = append(o, 0xb5, 0x53, 0x75, 0x6d, 0x33, 0x33, 0x42, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Sum33Bchain)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Blake3sum) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Blake3sum) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields35zgensym_8df0a91a1f250219_36 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields35zgensym_8df0a91a1f250219_36 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields35zgensym_8df0a91a1f250219_36, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft35zgensym_8df0a91a1f250219_36 := totalEncodedFields35zgensym_8df0a91a1f250219_36
	missingFieldsLeft35zgensym_8df0a91a1f250219_36 := maxFields35zgensym_8df0a91a1f250219_36 - totalEncodedFields35zgensym_8df0a91a1f250219_36

	var nextMiss35zgensym_8df0a91a1f250219_36 int32 = -1
	var found35zgensym_8df0a91a1f250219_36 [maxFields35zgensym_8df0a91a1f250219_36]bool
	var curField35zgensym_8df0a91a1f250219_36 string

doneWithStruct35zgensym_8df0a91a1f250219_36:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft35zgensym_8df0a91a1f250219_36 > 0 || missingFieldsLeft35zgensym_8df0a91a1f250219_36 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft35zgensym_8df0a91a1f250219_36, missingFieldsLeft35zgensym_8df0a91a1f250219_36, msgp.ShowFound(found35zgensym_8df0a91a1f250219_36[:]), unmarshalMsgFieldOrder35zgensym_8df0a91a1f250219_36)
		if encodedFieldsLeft35zgensym_8df0a91a1f250219_36 > 0 {
			encodedFieldsLeft35zgensym_8df0a91a1f250219_36--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField35zgensym_8df0a91a1f250219_36 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss35zgensym_8df0a91a1f250219_36 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss35zgensym_8df0a91a1f250219_36 = 0
			}
			for nextMiss35zgensym_8df0a91a1f250219_36 < maxFields35zgensym_8df0a91a1f250219_36 && (found35zgensym_8df0a91a1f250219_36[nextMiss35zgensym_8df0a91a1f250219_36] || unmarshalMsgFieldSkip35zgensym_8df0a91a1f250219_36[nextMiss35zgensym_8df0a91a1f250219_36]) {
				nextMiss35zgensym_8df0a91a1f250219_36++
			}
			if nextMiss35zgensym_8df0a91a1f250219_36 == maxFields35zgensym_8df0a91a1f250219_36 {
				// filled all the empty fields!
				break doneWithStruct35zgensym_8df0a91a1f250219_36
			}
			missingFieldsLeft35zgensym_8df0a91a1f250219_36--
			curField35zgensym_8df0a91a1f250219_36 = unmarshalMsgFieldOrder35zgensym_8df0a91a1f250219_36[nextMiss35zgensym_8df0a91a1f250219_36]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField35zgensym_8df0a91a1f250219_36)
		switch curField35zgensym_8df0a91a1f250219_36 {
		// -- templateUnmarshalMsg ends here --

		case "Sum33B_zid00_str":
			found35zgensym_8df0a91a1f250219_36[0] = true
			z.Sum33B, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Sum33Bchain_zid01_str":
			found35zgensym_8df0a91a1f250219_36[1] = true
			z.Sum33Bchain, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss35zgensym_8df0a91a1f250219_36 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Blake3sum
var unmarshalMsgFieldOrder35zgensym_8df0a91a1f250219_36 = []string{"Sum33B_zid00_str", "Sum33Bchain_zid01_str"}

var unmarshalMsgFieldSkip35zgensym_8df0a91a1f250219_36 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Blake3sum) Msgsize() (s int) {
	s = 1 + 17 + msgp.StringPrefixSize + len(z.Sum33B) + 22 + msgp.StringPrefixSize + len(z.Sum33Bchain)
	return
}
func (z *Blake3sum) Gstring() (r string) {
	r = "&Blake3sum{\n"
	r += fmt.Sprintf("     Sum33B: \"%v\",\n", z.Sum33B)
	r += fmt.Sprintf("Sum33Bchain: \"%v\",\n", z.Sum33Bchain)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8df0a91a1f250219_37 []byte
		zgensym_8df0a91a1f250219_37, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSlice(zgensym_8df0a91a1f250219_37)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8df0a91a1f250219_38 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_8df0a91a1f250219_38 = zgensym_8df0a91a1f250219_38[:0]
		} else {
			zgensym_8df0a91a1f250219_38, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSlice(zgensym_8df0a91a1f250219_38)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSlice) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ClusterMembership) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields43zgensym_8df0a91a1f250219_44 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields43zgensym_8df0a91a1f250219_44 uint32
	totalEncodedFields43zgensym_8df0a91a1f250219_44, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft43zgensym_8df0a91a1f250219_44 := totalEncodedFields43zgensym_8df0a91a1f250219_44
	missingFieldsLeft43zgensym_8df0a91a1f250219_44 := maxFields43zgensym_8df0a91a1f250219_44 - totalEncodedFields43zgensym_8df0a91a1f250219_44

	var nextMiss43zgensym_8df0a91a1f250219_44 int32 = -1
	var found43zgensym_8df0a91a1f250219_44 [maxFields43zgensym_8df0a91a1f250219_44]bool
	var curField43zgensym_8df0a91a1f250219_44 string

doneWithStruct43zgensym_8df0a91a1f250219_44:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft43zgensym_8df0a91a1f250219_44 > 0 || missingFieldsLeft43zgensym_8df0a91a1f250219_44 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft43zgensym_8df0a91a1f250219_44, missingFieldsLeft43zgensym_8df0a91a1f250219_44, msgp.ShowFound(found43zgensym_8df0a91a1f250219_44[:]), decodeMsgFieldOrder43zgensym_8df0a91a1f250219_44)
		if encodedFieldsLeft43zgensym_8df0a91a1f250219_44 > 0 {
			encodedFieldsLeft43zgensym_8df0a91a1f250219_44--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField43zgensym_8df0a91a1f250219_44 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss43zgensym_8df0a91a1f250219_44 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss43zgensym_8df0a91a1f250219_44 = 0
			}
			for nextMiss43zgensym_8df0a91a1f250219_44 < maxFields43zgensym_8df0a91a1f250219_44 && (found43zgensym_8df0a91a1f250219_44[nextMiss43zgensym_8df0a91a1f250219_44] || decodeMsgFieldSkip43zgensym_8df0a91a1f250219_44[nextMiss43zgensym_8df0a91a1f250219_44]) {
				nextMiss43zgensym_8df0a91a1f250219_44++
			}
			if nextMiss43zgensym_8df0a91a1f250219_44 == maxFields43zgensym_8df0a91a1f250219_44 {
				// filled all the empty fields!
				break doneWithStruct43zgensym_8df0a91a1f250219_44
			}
			missingFieldsLeft43zgensym_8df0a91a1f250219_44--
			curField43zgensym_8df0a91a1f250219_44 = decodeMsgFieldOrder43zgensym_8df0a91a1f250219_44[nextMiss43zgensym_8df0a91a1f250219_44]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField43zgensym_8df0a91a1f250219_44)
		switch curField43zgensym_8df0a91a1f250219_44 {
		// -- templateDecodeMsg ends here --

		case "Old__map":
			found43zgensym_8df0a91a1f250219_44[0] = true
			var zgensym_8df0a91a1f250219_45 uint32
			zgensym_8df0a91a1f250219_45, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Old == nil && zgensym_8df0a91a1f250219_45 > 0 {
				z.Old = make(map[string]*RaftNodeInfo, zgensym_8df0a91a1f250219_45)
			} else if len(z.Old) > 0 {
				for key, _ := range z.Old {
					delete(z.Old, key)
				}
			}
			for zgensym_8df0a91a1f250219_45 > 0 {
				zgensym_8df0a91a1f250219_45--
				var zgensym_8df0a91a1f250219_39 string
				var zgensym_8df0a91a1f250219_40 *RaftNodeInfo
				zgensym_8df0a91a1f250219_39, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_40 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_40.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_40 == nil {
						zgensym_8df0a91a1f250219_40 = new(RaftNodeInfo)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_40)

					err = zgensym_8df0a91a1f250219_40.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.Old[zgensym_8df0a91a1f250219_39] = zgensym_8df0a91a1f250219_40
			}
		case "New__map":
			found43zgensym_8df0a91a1f250219_44[1] = true
			var zgensym_8df0a91a1f250219_46 uint32
			zgensym_8df0a91a1f250219_46, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.New == nil && zgensym_8df0a91a1f250219_46 > 0 {
				z.New = make(map[string]*RaftNodeInfo, zgensym_8df0a91a1f250219_46)
			} else if len(z.New) > 0 {
				for key, _ := range z.New {
					delete(z.New, key)
				}
			}
			for zgensym_8df0a91a1f250219_46 > 0 {
				zgensym_8df0a91a1f250219_46--
				var zgensym_8df0a91a1f250219_41 string
				var zgensym_8df0a91a1f250219_42 *RaftNodeInfo
				zgensym_8df0a91a1f250219_41, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_42 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_42.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_42 == nil {
						zgensym_8df0a91a1f250219_42 = new(RaftNodeInfo)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_42)

					err = zgensym_8df0a91a1f250219_42.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.New[zgensym_8df0a91a1f250219_41] = zgensym_8df0a91a1f250219_42
			}
		case "IsJoint__str":
			found43zgensym_8df0a91a1f250219_44[2] = true
			z.IsJoint, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss43zgensym_8df0a91a1f250219_44 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ClusterMembership
var decodeMsgFieldOrder43zgensym_8df0a91a1f250219_44 = []string{"Old__map", "New__map", "IsJoint__str"}

var decodeMsgFieldSkip43zgensym_8df0a91a1f250219_44 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *ClusterMembership) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.Old) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.New) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.IsJoint) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ClusterMembership) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_47 [3]bool
	fieldsInUse_zgensym_8df0a91a1f250219_48 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_47[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_48 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ClusterMembership'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_47[0] {
		// write "Old__map"
		err = en.Append(0xa8, 0x4f, 0x6c, 0x64, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Old)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_39, zgensym_8df0a91a1f250219_40 := range z.Old {
			err = en.WriteString(zgensym_8df0a91a1f250219_39)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_40 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_40.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_47[1] {
		// write "New__map"
		err = en.Append(0xa8, 0x4e, 0x65, 0x77, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.New)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_41, zgensym_8df0a91a1f250219_42 := range z.New {
			err = en.WriteString(zgensym_8df0a91a1f250219_41)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_42 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_42.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_47[2] {
		// write "IsJoint__str"
		err = en.Append(0xac, 0x49, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.IsJoint)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ClusterMembership) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Old__map"
		o = append(o, 0xa8, 0x4f, 0x6c, 0x64, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Old)))
		for zgensym_8df0a91a1f250219_39, zgensym_8df0a91a1f250219_40 := range z.Old {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_39)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_40 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_40.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "New__map"
		o = append(o, 0xa8, 0x4e, 0x65, 0x77, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.New)))
		for zgensym_8df0a91a1f250219_41, zgensym_8df0a91a1f250219_42 := range z.New {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_41)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_42 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_42.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[2] {
		// string "IsJoint__str"
		o = append(o, 0xac, 0x49, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.IsJoint)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClusterMembership) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ClusterMembership) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields49zgensym_8df0a91a1f250219_50 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields49zgensym_8df0a91a1f250219_50 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields49zgensym_8df0a91a1f250219_50, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft49zgensym_8df0a91a1f250219_50 := totalEncodedFields49zgensym_8df0a91a1f250219_50
	missingFieldsLeft49zgensym_8df0a91a1f250219_50 := maxFields49zgensym_8df0a91a1f250219_50 - totalEncodedFields49zgensym_8df0a91a1f250219_50

	var nextMiss49zgensym_8df0a91a1f250219_50 int32 = -1
	var found49zgensym_8df0a91a1f250219_50 [maxFields49zgensym_8df0a91a1f250219_50]bool
	var curField49zgensym_8df0a91a1f250219_50 string

doneWithStruct49zgensym_8df0a91a1f250219_50:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft49zgensym_8df0a91a1f250219_50 > 0 || missingFieldsLeft49zgensym_8df0a91a1f250219_50 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft49zgensym_8df0a91a1f250219_50, missingFieldsLeft49zgensym_8df0a91a1f250219_50, msgp.ShowFound(found49zgensym_8df0a91a1f250219_50[:]), unmarshalMsgFieldOrder49zgensym_8df0a91a1f250219_50)
		if encodedFieldsLeft49zgensym_8df0a91a1f250219_50 > 0 {
			encodedFieldsLeft49zgensym_8df0a91a1f250219_50--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField49zgensym_8df0a91a1f250219_50 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss49zgensym_8df0a91a1f250219_50 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss49zgensym_8df0a91a1f250219_50 = 0
			}
			for nextMiss49zgensym_8df0a91a1f250219_50 < maxFields49zgensym_8df0a91a1f250219_50 && (found49zgensym_8df0a91a1f250219_50[nextMiss49zgensym_8df0a91a1f250219_50] || unmarshalMsgFieldSkip49zgensym_8df0a91a1f250219_50[nextMiss49zgensym_8df0a91a1f250219_50]) {
				nextMiss49zgensym_8df0a91a1f250219_50++
			}
			if nextMiss49zgensym_8df0a91a1f250219_50 == maxFields49zgensym_8df0a91a1f250219_50 {
				// filled all the empty fields!
				break doneWithStruct49zgensym_8df0a91a1f250219_50
			}
			missingFieldsLeft49zgensym_8df0a91a1f250219_50--
			curField49zgensym_8df0a91a1f250219_50 = unmarshalMsgFieldOrder49zgensym_8df0a91a1f250219_50[nextMiss49zgensym_8df0a91a1f250219_50]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField49zgensym_8df0a91a1f250219_50)
		switch curField49zgensym_8df0a91a1f250219_50 {
		// -- templateUnmarshalMsg ends here --

		case "Old__map":
			found49zgensym_8df0a91a1f250219_50[0] = true
			if nbs.AlwaysNil {
				if len(z.Old) > 0 {
					for key, _ := range z.Old {
						delete(z.Old, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_51 uint32
				zgensym_8df0a91a1f250219_51, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Old == nil && zgensym_8df0a91a1f250219_51 > 0 {
					z.Old = make(map[string]*RaftNodeInfo, zgensym_8df0a91a1f250219_51)
				} else if len(z.Old) > 0 {
					for key, _ := range z.Old {
						delete(z.Old, key)
					}
				}
				for zgensym_8df0a91a1f250219_51 > 0 {
					var zgensym_8df0a91a1f250219_39 string
					var zgensym_8df0a91a1f250219_40 *RaftNodeInfo
					zgensym_8df0a91a1f250219_51--
					zgensym_8df0a91a1f250219_39, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_40 != nil {
							zgensym_8df0a91a1f250219_40.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_40 {
								zgensym_8df0a91a1f250219_40.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_40 == nil {
								zgensym_8df0a91a1f250219_40 = new(RaftNodeInfo)
							}

							bts, err = zgensym_8df0a91a1f250219_40.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.Old[zgensym_8df0a91a1f250219_39] = zgensym_8df0a91a1f250219_40
				}
			}
		case "New__map":
			found49zgensym_8df0a91a1f250219_50[1] = true
			if nbs.AlwaysNil {
				if len(z.New) > 0 {
					for key, _ := range z.New {
						delete(z.New, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_52 uint32
				zgensym_8df0a91a1f250219_52, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.New == nil && zgensym_8df0a91a1f250219_52 > 0 {
					z.New = make(map[string]*RaftNodeInfo, zgensym_8df0a91a1f250219_52)
				} else if len(z.New) > 0 {
					for key, _ := range z.New {
						delete(z.New, key)
					}
				}
				for zgensym_8df0a91a1f250219_52 > 0 {
					var zgensym_8df0a91a1f250219_41 string
					var zgensym_8df0a91a1f250219_42 *RaftNodeInfo
					zgensym_8df0a91a1f250219_52--
					zgensym_8df0a91a1f250219_41, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_42 != nil {
							zgensym_8df0a91a1f250219_42.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_42 {
								zgensym_8df0a91a1f250219_42.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_42 == nil {
								zgensym_8df0a91a1f250219_42 = new(RaftNodeInfo)
							}

							bts, err = zgensym_8df0a91a1f250219_42.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.New[zgensym_8df0a91a1f250219_41] = zgensym_8df0a91a1f250219_42
				}
			}
		case "IsJoint__str":
			found49zgensym_8df0a91a1f250219_50[2] = true
			z.IsJoint, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss49zgensym_8df0a91a1f250219_50 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ClusterMembership
var unmarshalMsgFieldOrder49zgensym_8df0a91a1f250219_50 = []string{"Old__map", "New__map", "IsJoint__str"}

var unmarshalMsgFieldSkip49zgensym_8df0a91a1f250219_50 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ClusterMembership) Msgsize() (s int) {
	s = 1 + 9 + msgp.MapHeaderSize
	if z.Old != nil {
		for zgensym_8df0a91a1f250219_39, zgensym_8df0a91a1f250219_40 := range z.Old {
			_ = zgensym_8df0a91a1f250219_40
			_ = zgensym_8df0a91a1f250219_39
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_39)
			if zgensym_8df0a91a1f250219_40 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_40.Msgsize()
			}
		}
	}
	s += 9 + msgp.MapHeaderSize
	if z.New != nil {
		for zgensym_8df0a91a1f250219_41, zgensym_8df0a91a1f250219_42 := range z.New {
			_ = zgensym_8df0a91a1f250219_42
			_ = zgensym_8df0a91a1f250219_41
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_41)
			if zgensym_8df0a91a1f250219_42 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_42.Msgsize()
			}
		}
	}
	s += 13 + msgp.StringPrefixSize + len(z.IsJoint)
	return
}
func (z *ClusterMembership) Gstring() (r string) {
	r = "&ClusterMembership{\n"
	r += fmt.Sprintf("    Old: %v,\n", z.Old)
	r += fmt.Sprintf("    New: %v,\n", z.New)
	r += fmt.Sprintf("IsJoint: \"%v\",\n", z.IsJoint)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Entries) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var zgensym_8df0a91a1f250219_55 uint32
	zgensym_8df0a91a1f250219_55, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap((*z)) >= int(zgensym_8df0a91a1f250219_55) {
		(*z) = (*z)[:zgensym_8df0a91a1f250219_55]
	} else {
		(*z) = make(Entries, zgensym_8df0a91a1f250219_55)
	}
	for zgensym_8df0a91a1f250219_54 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}

			if (*z)[zgensym_8df0a91a1f250219_54] != nil {
				dc.PushAlwaysNil()
				err = (*z)[zgensym_8df0a91a1f250219_54].DecodeMsg(dc)
				if err != nil {
					return
				}
				dc.PopAlwaysNil()
			}
		} else {
			// not Nil, we have something to read

			if (*z)[zgensym_8df0a91a1f250219_54] == nil {
				(*z)[zgensym_8df0a91a1f250219_54] = new(RaftLogEntry)
			}
			dc.DedupIndexEachPtr((*z)[zgensym_8df0a91a1f250219_54])

			err = (*z)[zgensym_8df0a91a1f250219_54].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Entries) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zgensym_8df0a91a1f250219_56 := range z {
		// gPtr.encodeGen():

		if z[zgensym_8df0a91a1f250219_56] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zgensym_8df0a91a1f250219_56].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Entries) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zgensym_8df0a91a1f250219_56 := range z {
		// marshalGen.gPtr()

		if z[zgensym_8df0a91a1f250219_56] == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z[zgensym_8df0a91a1f250219_56].MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entries) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Entries) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	if nbs.AlwaysNil {
		(*z) = (*z)[:0]
	} else {

		var zgensym_8df0a91a1f250219_58 uint32
		zgensym_8df0a91a1f250219_58, bts, err = nbs.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if cap((*z)) >= int(zgensym_8df0a91a1f250219_58) {
			(*z) = (*z)[:zgensym_8df0a91a1f250219_58]
		} else {
			(*z) = make(Entries, zgensym_8df0a91a1f250219_58)
		}
		for zgensym_8df0a91a1f250219_57 := range *z {
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if (*z)[zgensym_8df0a91a1f250219_57] != nil {
					(*z)[zgensym_8df0a91a1f250219_57].UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != (*z)[zgensym_8df0a91a1f250219_57] {
						(*z)[zgensym_8df0a91a1f250219_57].UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if (*z)[zgensym_8df0a91a1f250219_57] == nil {
						(*z)[zgensym_8df0a91a1f250219_57] = new(RaftLogEntry)
					}

					bts, err = (*z)[zgensym_8df0a91a1f250219_57].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		}
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Entries) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_59 := range z {
		if z[zgensym_8df0a91a1f250219_59] == nil {
			s += msgp.NilSize
		} else {
			s += z[zgensym_8df0a91a1f250219_59].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ExternalCluster) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields62zgensym_8df0a91a1f250219_63 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields62zgensym_8df0a91a1f250219_63 uint32
	totalEncodedFields62zgensym_8df0a91a1f250219_63, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft62zgensym_8df0a91a1f250219_63 := totalEncodedFields62zgensym_8df0a91a1f250219_63
	missingFieldsLeft62zgensym_8df0a91a1f250219_63 := maxFields62zgensym_8df0a91a1f250219_63 - totalEncodedFields62zgensym_8df0a91a1f250219_63

	var nextMiss62zgensym_8df0a91a1f250219_63 int32 = -1
	var found62zgensym_8df0a91a1f250219_63 [maxFields62zgensym_8df0a91a1f250219_63]bool
	var curField62zgensym_8df0a91a1f250219_63 string

doneWithStruct62zgensym_8df0a91a1f250219_63:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft62zgensym_8df0a91a1f250219_63 > 0 || missingFieldsLeft62zgensym_8df0a91a1f250219_63 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft62zgensym_8df0a91a1f250219_63, missingFieldsLeft62zgensym_8df0a91a1f250219_63, msgp.ShowFound(found62zgensym_8df0a91a1f250219_63[:]), decodeMsgFieldOrder62zgensym_8df0a91a1f250219_63)
		if encodedFieldsLeft62zgensym_8df0a91a1f250219_63 > 0 {
			encodedFieldsLeft62zgensym_8df0a91a1f250219_63--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField62zgensym_8df0a91a1f250219_63 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss62zgensym_8df0a91a1f250219_63 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss62zgensym_8df0a91a1f250219_63 = 0
			}
			for nextMiss62zgensym_8df0a91a1f250219_63 < maxFields62zgensym_8df0a91a1f250219_63 && (found62zgensym_8df0a91a1f250219_63[nextMiss62zgensym_8df0a91a1f250219_63] || decodeMsgFieldSkip62zgensym_8df0a91a1f250219_63[nextMiss62zgensym_8df0a91a1f250219_63]) {
				nextMiss62zgensym_8df0a91a1f250219_63++
			}
			if nextMiss62zgensym_8df0a91a1f250219_63 == maxFields62zgensym_8df0a91a1f250219_63 {
				// filled all the empty fields!
				break doneWithStruct62zgensym_8df0a91a1f250219_63
			}
			missingFieldsLeft62zgensym_8df0a91a1f250219_63--
			curField62zgensym_8df0a91a1f250219_63 = decodeMsgFieldOrder62zgensym_8df0a91a1f250219_63[nextMiss62zgensym_8df0a91a1f250219_63]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField62zgensym_8df0a91a1f250219_63)
		switch curField62zgensym_8df0a91a1f250219_63 {
		// -- templateDecodeMsg ends here --

		case "Serz_zid00_map":
			found62zgensym_8df0a91a1f250219_63[0] = true
			var zgensym_8df0a91a1f250219_64 uint32
			zgensym_8df0a91a1f250219_64, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Serz == nil && zgensym_8df0a91a1f250219_64 > 0 {
				z.Serz = make(map[string]string, zgensym_8df0a91a1f250219_64)
			} else if len(z.Serz) > 0 {
				for key, _ := range z.Serz {
					delete(z.Serz, key)
				}
			}
			for zgensym_8df0a91a1f250219_64 > 0 {
				zgensym_8df0a91a1f250219_64--
				var zgensym_8df0a91a1f250219_60 string
				var zgensym_8df0a91a1f250219_61 string
				zgensym_8df0a91a1f250219_60, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_61, err = dc.ReadString()
				if err != nil {
					return
				}
				z.Serz[zgensym_8df0a91a1f250219_60] = zgensym_8df0a91a1f250219_61
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss62zgensym_8df0a91a1f250219_63 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ExternalCluster
var decodeMsgFieldOrder62zgensym_8df0a91a1f250219_63 = []string{"Serz_zid00_map", ""}

var decodeMsgFieldSkip62zgensym_8df0a91a1f250219_63 = []bool{false, true}

// fieldsNotEmpty supports omitempty tags
func (z *ExternalCluster) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Serz) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *ExternalCluster) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_65 [2]bool
	fieldsInUse_zgensym_8df0a91a1f250219_66 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_65[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_66 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ExternalCluster'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_65[0] {
		// write "Serz_zid00_map"
		err = en.Append(0xae, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Serz)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_60, zgensym_8df0a91a1f250219_61 := range z.Serz {
			err = en.WriteString(zgensym_8df0a91a1f250219_60)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_61)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ExternalCluster) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Serz_zid00_map"
		o = append(o, 0xae, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Serz)))
		for zgensym_8df0a91a1f250219_60, zgensym_8df0a91a1f250219_61 := range z.Serz {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_60)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_61)
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExternalCluster) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ExternalCluster) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields67zgensym_8df0a91a1f250219_68 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields67zgensym_8df0a91a1f250219_68 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields67zgensym_8df0a91a1f250219_68, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft67zgensym_8df0a91a1f250219_68 := totalEncodedFields67zgensym_8df0a91a1f250219_68
	missingFieldsLeft67zgensym_8df0a91a1f250219_68 := maxFields67zgensym_8df0a91a1f250219_68 - totalEncodedFields67zgensym_8df0a91a1f250219_68

	var nextMiss67zgensym_8df0a91a1f250219_68 int32 = -1
	var found67zgensym_8df0a91a1f250219_68 [maxFields67zgensym_8df0a91a1f250219_68]bool
	var curField67zgensym_8df0a91a1f250219_68 string

doneWithStruct67zgensym_8df0a91a1f250219_68:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft67zgensym_8df0a91a1f250219_68 > 0 || missingFieldsLeft67zgensym_8df0a91a1f250219_68 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft67zgensym_8df0a91a1f250219_68, missingFieldsLeft67zgensym_8df0a91a1f250219_68, msgp.ShowFound(found67zgensym_8df0a91a1f250219_68[:]), unmarshalMsgFieldOrder67zgensym_8df0a91a1f250219_68)
		if encodedFieldsLeft67zgensym_8df0a91a1f250219_68 > 0 {
			encodedFieldsLeft67zgensym_8df0a91a1f250219_68--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField67zgensym_8df0a91a1f250219_68 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss67zgensym_8df0a91a1f250219_68 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss67zgensym_8df0a91a1f250219_68 = 0
			}
			for nextMiss67zgensym_8df0a91a1f250219_68 < maxFields67zgensym_8df0a91a1f250219_68 && (found67zgensym_8df0a91a1f250219_68[nextMiss67zgensym_8df0a91a1f250219_68] || unmarshalMsgFieldSkip67zgensym_8df0a91a1f250219_68[nextMiss67zgensym_8df0a91a1f250219_68]) {
				nextMiss67zgensym_8df0a91a1f250219_68++
			}
			if nextMiss67zgensym_8df0a91a1f250219_68 == maxFields67zgensym_8df0a91a1f250219_68 {
				// filled all the empty fields!
				break doneWithStruct67zgensym_8df0a91a1f250219_68
			}
			missingFieldsLeft67zgensym_8df0a91a1f250219_68--
			curField67zgensym_8df0a91a1f250219_68 = unmarshalMsgFieldOrder67zgensym_8df0a91a1f250219_68[nextMiss67zgensym_8df0a91a1f250219_68]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField67zgensym_8df0a91a1f250219_68)
		switch curField67zgensym_8df0a91a1f250219_68 {
		// -- templateUnmarshalMsg ends here --

		case "Serz_zid00_map":
			found67zgensym_8df0a91a1f250219_68[0] = true
			if nbs.AlwaysNil {
				if len(z.Serz) > 0 {
					for key, _ := range z.Serz {
						delete(z.Serz, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_69 uint32
				zgensym_8df0a91a1f250219_69, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Serz == nil && zgensym_8df0a91a1f250219_69 > 0 {
					z.Serz = make(map[string]string, zgensym_8df0a91a1f250219_69)
				} else if len(z.Serz) > 0 {
					for key, _ := range z.Serz {
						delete(z.Serz, key)
					}
				}
				for zgensym_8df0a91a1f250219_69 > 0 {
					var zgensym_8df0a91a1f250219_60 string
					var zgensym_8df0a91a1f250219_61 string
					zgensym_8df0a91a1f250219_69--
					zgensym_8df0a91a1f250219_60, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_61, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.Serz[zgensym_8df0a91a1f250219_60] = zgensym_8df0a91a1f250219_61
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss67zgensym_8df0a91a1f250219_68 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ExternalCluster
var unmarshalMsgFieldOrder67zgensym_8df0a91a1f250219_68 = []string{"Serz_zid00_map", ""}

var unmarshalMsgFieldSkip67zgensym_8df0a91a1f250219_68 = []bool{false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExternalCluster) Msgsize() (s int) {
	s = 1 + 15 + msgp.MapHeaderSize
	if z.Serz != nil {
		for zgensym_8df0a91a1f250219_60, zgensym_8df0a91a1f250219_61 := range z.Serz {
			_ = zgensym_8df0a91a1f250219_61
			_ = zgensym_8df0a91a1f250219_60
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_60) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_61)
		}
	}
	return
}
func (z *ExternalCluster) Gstring() (r string) {
	r = "&ExternalCluster{\n"
	r += fmt.Sprintf("Serz: %v,\n", z.Serz)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *FirstRaftLogEntryBootstrap) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields70zgensym_8df0a91a1f250219_71 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields70zgensym_8df0a91a1f250219_71 uint32
	totalEncodedFields70zgensym_8df0a91a1f250219_71, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft70zgensym_8df0a91a1f250219_71 := totalEncodedFields70zgensym_8df0a91a1f250219_71
	missingFieldsLeft70zgensym_8df0a91a1f250219_71 := maxFields70zgensym_8df0a91a1f250219_71 - totalEncodedFields70zgensym_8df0a91a1f250219_71

	var nextMiss70zgensym_8df0a91a1f250219_71 int32 = -1
	var found70zgensym_8df0a91a1f250219_71 [maxFields70zgensym_8df0a91a1f250219_71]bool
	var curField70zgensym_8df0a91a1f250219_71 string

doneWithStruct70zgensym_8df0a91a1f250219_71:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft70zgensym_8df0a91a1f250219_71 > 0 || missingFieldsLeft70zgensym_8df0a91a1f250219_71 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft70zgensym_8df0a91a1f250219_71, missingFieldsLeft70zgensym_8df0a91a1f250219_71, msgp.ShowFound(found70zgensym_8df0a91a1f250219_71[:]), decodeMsgFieldOrder70zgensym_8df0a91a1f250219_71)
		if encodedFieldsLeft70zgensym_8df0a91a1f250219_71 > 0 {
			encodedFieldsLeft70zgensym_8df0a91a1f250219_71--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField70zgensym_8df0a91a1f250219_71 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss70zgensym_8df0a91a1f250219_71 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss70zgensym_8df0a91a1f250219_71 = 0
			}
			for nextMiss70zgensym_8df0a91a1f250219_71 < maxFields70zgensym_8df0a91a1f250219_71 && (found70zgensym_8df0a91a1f250219_71[nextMiss70zgensym_8df0a91a1f250219_71] || decodeMsgFieldSkip70zgensym_8df0a91a1f250219_71[nextMiss70zgensym_8df0a91a1f250219_71]) {
				nextMiss70zgensym_8df0a91a1f250219_71++
			}
			if nextMiss70zgensym_8df0a91a1f250219_71 == maxFields70zgensym_8df0a91a1f250219_71 {
				// filled all the empty fields!
				break doneWithStruct70zgensym_8df0a91a1f250219_71
			}
			missingFieldsLeft70zgensym_8df0a91a1f250219_71--
			curField70zgensym_8df0a91a1f250219_71 = decodeMsgFieldOrder70zgensym_8df0a91a1f250219_71[nextMiss70zgensym_8df0a91a1f250219_71]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField70zgensym_8df0a91a1f250219_71)
		switch curField70zgensym_8df0a91a1f250219_71 {
		// -- templateDecodeMsg ends here --

		case "NewConfig__ptr":
			found70zgensym_8df0a91a1f250219_71[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.NewConfig != nil {
					dc.PushAlwaysNil()
					err = z.NewConfig.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.NewConfig == nil {
					z.NewConfig = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.NewConfig)

				err = z.NewConfig.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "DoElection__boo":
			found70zgensym_8df0a91a1f250219_71[1] = true
			z.DoElection, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Err__str":
			found70zgensym_8df0a91a1f250219_71[2] = true
			z.Err, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss70zgensym_8df0a91a1f250219_71 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of FirstRaftLogEntryBootstrap
var decodeMsgFieldOrder70zgensym_8df0a91a1f250219_71 = []string{"NewConfig__ptr", "DoElection__boo", "Err__str", ""}

var decodeMsgFieldSkip70zgensym_8df0a91a1f250219_71 = []bool{false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *FirstRaftLogEntryBootstrap) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.NewConfig == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (!z.DoElection) // bool, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Err) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *FirstRaftLogEntryBootstrap) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_72 [4]bool
	fieldsInUse_zgensym_8df0a91a1f250219_73 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_72[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_73 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'FirstRaftLogEntryBootstrap'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_72[0] {
		// write "NewConfig__ptr"
		err = en.Append(0xae, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.NewConfig == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.NewConfig.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_72[1] {
		// write "DoElection__boo"
		err = en.Append(0xaf, 0x44, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.DoElection)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_72[2] {
		// write "Err__str"
		err = en.Append(0xa8, 0x45, 0x72, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Err)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FirstRaftLogEntryBootstrap) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "NewConfig__ptr"
		o = append(o, 0xae, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.NewConfig == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.NewConfig.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[1] {
		// string "DoElection__boo"
		o = append(o, 0xaf, 0x44, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.DoElection)
	}

	if !empty[2] {
		// string "Err__str"
		o = append(o, 0xa8, 0x45, 0x72, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Err)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FirstRaftLogEntryBootstrap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *FirstRaftLogEntryBootstrap) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields74zgensym_8df0a91a1f250219_75 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields74zgensym_8df0a91a1f250219_75 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields74zgensym_8df0a91a1f250219_75, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft74zgensym_8df0a91a1f250219_75 := totalEncodedFields74zgensym_8df0a91a1f250219_75
	missingFieldsLeft74zgensym_8df0a91a1f250219_75 := maxFields74zgensym_8df0a91a1f250219_75 - totalEncodedFields74zgensym_8df0a91a1f250219_75

	var nextMiss74zgensym_8df0a91a1f250219_75 int32 = -1
	var found74zgensym_8df0a91a1f250219_75 [maxFields74zgensym_8df0a91a1f250219_75]bool
	var curField74zgensym_8df0a91a1f250219_75 string

doneWithStruct74zgensym_8df0a91a1f250219_75:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft74zgensym_8df0a91a1f250219_75 > 0 || missingFieldsLeft74zgensym_8df0a91a1f250219_75 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft74zgensym_8df0a91a1f250219_75, missingFieldsLeft74zgensym_8df0a91a1f250219_75, msgp.ShowFound(found74zgensym_8df0a91a1f250219_75[:]), unmarshalMsgFieldOrder74zgensym_8df0a91a1f250219_75)
		if encodedFieldsLeft74zgensym_8df0a91a1f250219_75 > 0 {
			encodedFieldsLeft74zgensym_8df0a91a1f250219_75--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField74zgensym_8df0a91a1f250219_75 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss74zgensym_8df0a91a1f250219_75 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss74zgensym_8df0a91a1f250219_75 = 0
			}
			for nextMiss74zgensym_8df0a91a1f250219_75 < maxFields74zgensym_8df0a91a1f250219_75 && (found74zgensym_8df0a91a1f250219_75[nextMiss74zgensym_8df0a91a1f250219_75] || unmarshalMsgFieldSkip74zgensym_8df0a91a1f250219_75[nextMiss74zgensym_8df0a91a1f250219_75]) {
				nextMiss74zgensym_8df0a91a1f250219_75++
			}
			if nextMiss74zgensym_8df0a91a1f250219_75 == maxFields74zgensym_8df0a91a1f250219_75 {
				// filled all the empty fields!
				break doneWithStruct74zgensym_8df0a91a1f250219_75
			}
			missingFieldsLeft74zgensym_8df0a91a1f250219_75--
			curField74zgensym_8df0a91a1f250219_75 = unmarshalMsgFieldOrder74zgensym_8df0a91a1f250219_75[nextMiss74zgensym_8df0a91a1f250219_75]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField74zgensym_8df0a91a1f250219_75)
		switch curField74zgensym_8df0a91a1f250219_75 {
		// -- templateUnmarshalMsg ends here --

		case "NewConfig__ptr":
			found74zgensym_8df0a91a1f250219_75[0] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.NewConfig != nil {
					z.NewConfig.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.NewConfig {
						z.NewConfig.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.NewConfig == nil {
						z.NewConfig = new(MemberConfig)
					}

					bts, err = z.NewConfig.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "DoElection__boo":
			found74zgensym_8df0a91a1f250219_75[1] = true
			z.DoElection, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Err__str":
			found74zgensym_8df0a91a1f250219_75[2] = true
			z.Err, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss74zgensym_8df0a91a1f250219_75 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of FirstRaftLogEntryBootstrap
var unmarshalMsgFieldOrder74zgensym_8df0a91a1f250219_75 = []string{"NewConfig__ptr", "DoElection__boo", "Err__str", ""}

var unmarshalMsgFieldSkip74zgensym_8df0a91a1f250219_75 = []bool{false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FirstRaftLogEntryBootstrap) Msgsize() (s int) {
	s = 1 + 15
	if z.NewConfig == nil {
		s += msgp.NilSize
	} else {
		s += z.NewConfig.Msgsize()
	}
	s += 16 + msgp.BoolSize + 9 + msgp.StringPrefixSize + len(z.Err)
	return
}
func (z *FirstRaftLogEntryBootstrap) Gstring() (r string) {
	r = "&FirstRaftLogEntryBootstrap{\n"
	r += fmt.Sprintf(" NewConfig: %v,\n", z.NewConfig)
	r += fmt.Sprintf("DoElection: %v,\n", z.DoElection)
	r += fmt.Sprintf("       Err: \"%v\",\n", z.Err)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *IndexTerm) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields76zgensym_8df0a91a1f250219_77 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields76zgensym_8df0a91a1f250219_77 uint32
	totalEncodedFields76zgensym_8df0a91a1f250219_77, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft76zgensym_8df0a91a1f250219_77 := totalEncodedFields76zgensym_8df0a91a1f250219_77
	missingFieldsLeft76zgensym_8df0a91a1f250219_77 := maxFields76zgensym_8df0a91a1f250219_77 - totalEncodedFields76zgensym_8df0a91a1f250219_77

	var nextMiss76zgensym_8df0a91a1f250219_77 int32 = -1
	var found76zgensym_8df0a91a1f250219_77 [maxFields76zgensym_8df0a91a1f250219_77]bool
	var curField76zgensym_8df0a91a1f250219_77 string

doneWithStruct76zgensym_8df0a91a1f250219_77:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft76zgensym_8df0a91a1f250219_77 > 0 || missingFieldsLeft76zgensym_8df0a91a1f250219_77 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft76zgensym_8df0a91a1f250219_77, missingFieldsLeft76zgensym_8df0a91a1f250219_77, msgp.ShowFound(found76zgensym_8df0a91a1f250219_77[:]), decodeMsgFieldOrder76zgensym_8df0a91a1f250219_77)
		if encodedFieldsLeft76zgensym_8df0a91a1f250219_77 > 0 {
			encodedFieldsLeft76zgensym_8df0a91a1f250219_77--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField76zgensym_8df0a91a1f250219_77 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss76zgensym_8df0a91a1f250219_77 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss76zgensym_8df0a91a1f250219_77 = 0
			}
			for nextMiss76zgensym_8df0a91a1f250219_77 < maxFields76zgensym_8df0a91a1f250219_77 && (found76zgensym_8df0a91a1f250219_77[nextMiss76zgensym_8df0a91a1f250219_77] || decodeMsgFieldSkip76zgensym_8df0a91a1f250219_77[nextMiss76zgensym_8df0a91a1f250219_77]) {
				nextMiss76zgensym_8df0a91a1f250219_77++
			}
			if nextMiss76zgensym_8df0a91a1f250219_77 == maxFields76zgensym_8df0a91a1f250219_77 {
				// filled all the empty fields!
				break doneWithStruct76zgensym_8df0a91a1f250219_77
			}
			missingFieldsLeft76zgensym_8df0a91a1f250219_77--
			curField76zgensym_8df0a91a1f250219_77 = decodeMsgFieldOrder76zgensym_8df0a91a1f250219_77[nextMiss76zgensym_8df0a91a1f250219_77]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField76zgensym_8df0a91a1f250219_77)
		switch curField76zgensym_8df0a91a1f250219_77 {
		// -- templateDecodeMsg ends here --

		case "Index_zid00_i64":
			found76zgensym_8df0a91a1f250219_77[0] = true
			z.Index, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Term_zid01_i64":
			found76zgensym_8df0a91a1f250219_77[1] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss76zgensym_8df0a91a1f250219_77 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of IndexTerm
var decodeMsgFieldOrder76zgensym_8df0a91a1f250219_77 = []string{"Index_zid00_i64", "Term_zid01_i64"}

var decodeMsgFieldSkip76zgensym_8df0a91a1f250219_77 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *IndexTerm) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Index == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Term == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *IndexTerm) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_78 [2]bool
	fieldsInUse_zgensym_8df0a91a1f250219_79 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_78[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_79 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'IndexTerm'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x65, 0x72, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_78[0] {
		// write "Index_zid00_i64"
		err = en.Append(0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Index)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_78[1] {
		// write "Term_zid01_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexTerm) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Index_zid00_i64"
		o = append(o, 0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Index)
	}

	if !empty[1] {
		// string "Term_zid01_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexTerm) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *IndexTerm) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields80zgensym_8df0a91a1f250219_81 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields80zgensym_8df0a91a1f250219_81 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields80zgensym_8df0a91a1f250219_81, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft80zgensym_8df0a91a1f250219_81 := totalEncodedFields80zgensym_8df0a91a1f250219_81
	missingFieldsLeft80zgensym_8df0a91a1f250219_81 := maxFields80zgensym_8df0a91a1f250219_81 - totalEncodedFields80zgensym_8df0a91a1f250219_81

	var nextMiss80zgensym_8df0a91a1f250219_81 int32 = -1
	var found80zgensym_8df0a91a1f250219_81 [maxFields80zgensym_8df0a91a1f250219_81]bool
	var curField80zgensym_8df0a91a1f250219_81 string

doneWithStruct80zgensym_8df0a91a1f250219_81:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft80zgensym_8df0a91a1f250219_81 > 0 || missingFieldsLeft80zgensym_8df0a91a1f250219_81 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft80zgensym_8df0a91a1f250219_81, missingFieldsLeft80zgensym_8df0a91a1f250219_81, msgp.ShowFound(found80zgensym_8df0a91a1f250219_81[:]), unmarshalMsgFieldOrder80zgensym_8df0a91a1f250219_81)
		if encodedFieldsLeft80zgensym_8df0a91a1f250219_81 > 0 {
			encodedFieldsLeft80zgensym_8df0a91a1f250219_81--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField80zgensym_8df0a91a1f250219_81 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss80zgensym_8df0a91a1f250219_81 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss80zgensym_8df0a91a1f250219_81 = 0
			}
			for nextMiss80zgensym_8df0a91a1f250219_81 < maxFields80zgensym_8df0a91a1f250219_81 && (found80zgensym_8df0a91a1f250219_81[nextMiss80zgensym_8df0a91a1f250219_81] || unmarshalMsgFieldSkip80zgensym_8df0a91a1f250219_81[nextMiss80zgensym_8df0a91a1f250219_81]) {
				nextMiss80zgensym_8df0a91a1f250219_81++
			}
			if nextMiss80zgensym_8df0a91a1f250219_81 == maxFields80zgensym_8df0a91a1f250219_81 {
				// filled all the empty fields!
				break doneWithStruct80zgensym_8df0a91a1f250219_81
			}
			missingFieldsLeft80zgensym_8df0a91a1f250219_81--
			curField80zgensym_8df0a91a1f250219_81 = unmarshalMsgFieldOrder80zgensym_8df0a91a1f250219_81[nextMiss80zgensym_8df0a91a1f250219_81]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField80zgensym_8df0a91a1f250219_81)
		switch curField80zgensym_8df0a91a1f250219_81 {
		// -- templateUnmarshalMsg ends here --

		case "Index_zid00_i64":
			found80zgensym_8df0a91a1f250219_81[0] = true
			z.Index, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Term_zid01_i64":
			found80zgensym_8df0a91a1f250219_81[1] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss80zgensym_8df0a91a1f250219_81 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of IndexTerm
var unmarshalMsgFieldOrder80zgensym_8df0a91a1f250219_81 = []string{"Index_zid00_i64", "Term_zid01_i64"}

var unmarshalMsgFieldSkip80zgensym_8df0a91a1f250219_81 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexTerm) Msgsize() (s int) {
	s = 1 + 16 + msgp.Int64Size + 15 + msgp.Int64Size
	return
}
func (z *IndexTerm) Gstring() (r string) {
	r = "&IndexTerm{\n"
	r += fmt.Sprintf("Index: %v,\n", z.Index)
	r += fmt.Sprintf(" Term: %v,\n", z.Term)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Inspection) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields98zgensym_8df0a91a1f250219_99 = 24

	// -- templateDecodeMsg starts here--
	var totalEncodedFields98zgensym_8df0a91a1f250219_99 uint32
	totalEncodedFields98zgensym_8df0a91a1f250219_99, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft98zgensym_8df0a91a1f250219_99 := totalEncodedFields98zgensym_8df0a91a1f250219_99
	missingFieldsLeft98zgensym_8df0a91a1f250219_99 := maxFields98zgensym_8df0a91a1f250219_99 - totalEncodedFields98zgensym_8df0a91a1f250219_99

	var nextMiss98zgensym_8df0a91a1f250219_99 int32 = -1
	var found98zgensym_8df0a91a1f250219_99 [maxFields98zgensym_8df0a91a1f250219_99]bool
	var curField98zgensym_8df0a91a1f250219_99 string

doneWithStruct98zgensym_8df0a91a1f250219_99:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft98zgensym_8df0a91a1f250219_99 > 0 || missingFieldsLeft98zgensym_8df0a91a1f250219_99 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft98zgensym_8df0a91a1f250219_99, missingFieldsLeft98zgensym_8df0a91a1f250219_99, msgp.ShowFound(found98zgensym_8df0a91a1f250219_99[:]), decodeMsgFieldOrder98zgensym_8df0a91a1f250219_99)
		if encodedFieldsLeft98zgensym_8df0a91a1f250219_99 > 0 {
			encodedFieldsLeft98zgensym_8df0a91a1f250219_99--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField98zgensym_8df0a91a1f250219_99 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss98zgensym_8df0a91a1f250219_99 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss98zgensym_8df0a91a1f250219_99 = 0
			}
			for nextMiss98zgensym_8df0a91a1f250219_99 < maxFields98zgensym_8df0a91a1f250219_99 && (found98zgensym_8df0a91a1f250219_99[nextMiss98zgensym_8df0a91a1f250219_99] || decodeMsgFieldSkip98zgensym_8df0a91a1f250219_99[nextMiss98zgensym_8df0a91a1f250219_99]) {
				nextMiss98zgensym_8df0a91a1f250219_99++
			}
			if nextMiss98zgensym_8df0a91a1f250219_99 == maxFields98zgensym_8df0a91a1f250219_99 {
				// filled all the empty fields!
				break doneWithStruct98zgensym_8df0a91a1f250219_99
			}
			missingFieldsLeft98zgensym_8df0a91a1f250219_99--
			curField98zgensym_8df0a91a1f250219_99 = decodeMsgFieldOrder98zgensym_8df0a91a1f250219_99[nextMiss98zgensym_8df0a91a1f250219_99]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField98zgensym_8df0a91a1f250219_99)
		switch curField98zgensym_8df0a91a1f250219_99 {
		// -- templateDecodeMsg ends here --

		case "CktReplica_zid00_map":
			found98zgensym_8df0a91a1f250219_99[0] = true
			var zgensym_8df0a91a1f250219_100 uint32
			zgensym_8df0a91a1f250219_100, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.CktReplica == nil && zgensym_8df0a91a1f250219_100 > 0 {
				z.CktReplica = make(map[string]string, zgensym_8df0a91a1f250219_100)
			} else if len(z.CktReplica) > 0 {
				for key, _ := range z.CktReplica {
					delete(z.CktReplica, key)
				}
			}
			for zgensym_8df0a91a1f250219_100 > 0 {
				zgensym_8df0a91a1f250219_100--
				var zgensym_8df0a91a1f250219_82 string
				var zgensym_8df0a91a1f250219_83 string
				zgensym_8df0a91a1f250219_82, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_83, err = dc.ReadString()
				if err != nil {
					return
				}
				z.CktReplica[zgensym_8df0a91a1f250219_82] = zgensym_8df0a91a1f250219_83
			}
		case "CktReplicaByName_zid01_map":
			found98zgensym_8df0a91a1f250219_99[1] = true
			var zgensym_8df0a91a1f250219_101 uint32
			zgensym_8df0a91a1f250219_101, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.CktReplicaByName == nil && zgensym_8df0a91a1f250219_101 > 0 {
				z.CktReplicaByName = make(map[string]string, zgensym_8df0a91a1f250219_101)
			} else if len(z.CktReplicaByName) > 0 {
				for key, _ := range z.CktReplicaByName {
					delete(z.CktReplicaByName, key)
				}
			}
			for zgensym_8df0a91a1f250219_101 > 0 {
				zgensym_8df0a91a1f250219_101--
				var zgensym_8df0a91a1f250219_84 string
				var zgensym_8df0a91a1f250219_85 string
				zgensym_8df0a91a1f250219_84, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_85, err = dc.ReadString()
				if err != nil {
					return
				}
				z.CktReplicaByName[zgensym_8df0a91a1f250219_84] = zgensym_8df0a91a1f250219_85
			}
		case "CktAll_zid02_map":
			found98zgensym_8df0a91a1f250219_99[2] = true
			var zgensym_8df0a91a1f250219_102 uint32
			zgensym_8df0a91a1f250219_102, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.CktAll == nil && zgensym_8df0a91a1f250219_102 > 0 {
				z.CktAll = make(map[string]string, zgensym_8df0a91a1f250219_102)
			} else if len(z.CktAll) > 0 {
				for key, _ := range z.CktAll {
					delete(z.CktAll, key)
				}
			}
			for zgensym_8df0a91a1f250219_102 > 0 {
				zgensym_8df0a91a1f250219_102--
				var zgensym_8df0a91a1f250219_86 string
				var zgensym_8df0a91a1f250219_87 string
				zgensym_8df0a91a1f250219_86, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_87, err = dc.ReadString()
				if err != nil {
					return
				}
				z.CktAll[zgensym_8df0a91a1f250219_86] = zgensym_8df0a91a1f250219_87
			}
		case "CktAllByName_zid03_map":
			found98zgensym_8df0a91a1f250219_99[3] = true
			var zgensym_8df0a91a1f250219_103 uint32
			zgensym_8df0a91a1f250219_103, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.CktAllByName == nil && zgensym_8df0a91a1f250219_103 > 0 {
				z.CktAllByName = make(map[string]string, zgensym_8df0a91a1f250219_103)
			} else if len(z.CktAllByName) > 0 {
				for key, _ := range z.CktAllByName {
					delete(z.CktAllByName, key)
				}
			}
			for zgensym_8df0a91a1f250219_103 > 0 {
				zgensym_8df0a91a1f250219_103--
				var zgensym_8df0a91a1f250219_88 string
				var zgensym_8df0a91a1f250219_89 string
				zgensym_8df0a91a1f250219_88, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_89, err = dc.ReadString()
				if err != nil {
					return
				}
				z.CktAllByName[zgensym_8df0a91a1f250219_88] = zgensym_8df0a91a1f250219_89
			}
		case "Peers_zid04_map":
			found98zgensym_8df0a91a1f250219_99[4] = true
			var zgensym_8df0a91a1f250219_104 uint32
			zgensym_8df0a91a1f250219_104, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Peers == nil && zgensym_8df0a91a1f250219_104 > 0 {
				z.Peers = make(map[string]*RaftNodeInfo, zgensym_8df0a91a1f250219_104)
			} else if len(z.Peers) > 0 {
				for key, _ := range z.Peers {
					delete(z.Peers, key)
				}
			}
			for zgensym_8df0a91a1f250219_104 > 0 {
				zgensym_8df0a91a1f250219_104--
				var zgensym_8df0a91a1f250219_90 string
				var zgensym_8df0a91a1f250219_91 *RaftNodeInfo
				zgensym_8df0a91a1f250219_90, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_91 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_91.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_91 == nil {
						zgensym_8df0a91a1f250219_91 = new(RaftNodeInfo)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_91)

					err = zgensym_8df0a91a1f250219_91.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.Peers[zgensym_8df0a91a1f250219_90] = zgensym_8df0a91a1f250219_91
			}
		case "WaitingAtLeader_zid05_map":
			found98zgensym_8df0a91a1f250219_99[5] = true
			var zgensym_8df0a91a1f250219_105 uint32
			zgensym_8df0a91a1f250219_105, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.WaitingAtLeader == nil && zgensym_8df0a91a1f250219_105 > 0 {
				z.WaitingAtLeader = make(map[string]*Ticket, zgensym_8df0a91a1f250219_105)
			} else if len(z.WaitingAtLeader) > 0 {
				for key, _ := range z.WaitingAtLeader {
					delete(z.WaitingAtLeader, key)
				}
			}
			for zgensym_8df0a91a1f250219_105 > 0 {
				zgensym_8df0a91a1f250219_105--
				var zgensym_8df0a91a1f250219_92 string
				var zgensym_8df0a91a1f250219_93 *Ticket
				zgensym_8df0a91a1f250219_92, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_93 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_93.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_93 == nil {
						zgensym_8df0a91a1f250219_93 = new(Ticket)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_93)

					err = zgensym_8df0a91a1f250219_93.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.WaitingAtLeader[zgensym_8df0a91a1f250219_92] = zgensym_8df0a91a1f250219_93
			}
		case "WaitingAtFollow_zid06_map":
			found98zgensym_8df0a91a1f250219_99[6] = true
			var zgensym_8df0a91a1f250219_106 uint32
			zgensym_8df0a91a1f250219_106, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.WaitingAtFollow == nil && zgensym_8df0a91a1f250219_106 > 0 {
				z.WaitingAtFollow = make(map[string]*Ticket, zgensym_8df0a91a1f250219_106)
			} else if len(z.WaitingAtFollow) > 0 {
				for key, _ := range z.WaitingAtFollow {
					delete(z.WaitingAtFollow, key)
				}
			}
			for zgensym_8df0a91a1f250219_106 > 0 {
				zgensym_8df0a91a1f250219_106--
				var zgensym_8df0a91a1f250219_94 string
				var zgensym_8df0a91a1f250219_95 *Ticket
				zgensym_8df0a91a1f250219_94, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_95 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_95.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_95 == nil {
						zgensym_8df0a91a1f250219_95 = new(Ticket)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_95)

					err = zgensym_8df0a91a1f250219_95.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.WaitingAtFollow[zgensym_8df0a91a1f250219_94] = zgensym_8df0a91a1f250219_95
			}
		case "Role_zid07_rct":
			found98zgensym_8df0a91a1f250219_99[7] = true
			{
				var zgensym_8df0a91a1f250219_107 int
				zgensym_8df0a91a1f250219_107, err = dc.ReadInt()
				z.Role = RaftRole(zgensym_8df0a91a1f250219_107)
			}
			if err != nil {
				return
			}
		case "State_zid08_ptr":
			found98zgensym_8df0a91a1f250219_99[8] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.State != nil {
					dc.PushAlwaysNil()
					err = z.State.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.State == nil {
					z.State = new(RaftState)
				}
				dc.DedupIndexEachPtr(z.State)

				err = z.State.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "CurrentLeaderName_zid09_str":
			found98zgensym_8df0a91a1f250219_99[9] = true
			z.CurrentLeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CurrentLeaderID_zid10_str":
			found98zgensym_8df0a91a1f250219_99[10] = true
			z.CurrentLeaderID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CurrentLeaderURL_zid11_str":
			found98zgensym_8df0a91a1f250219_99[11] = true
			z.CurrentLeaderURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ElectionCount_zid12_int":
			found98zgensym_8df0a91a1f250219_99[12] = true
			z.ElectionCount, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "LastLeaderActiveStepDown_zid13_tim":
			found98zgensym_8df0a91a1f250219_99[13] = true
			z.LastLeaderActiveStepDown, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Cfg_zid14_rct":
			found98zgensym_8df0a91a1f250219_99[14] = true
			err = z.Cfg.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "MC_zid15_ptr":
			found98zgensym_8df0a91a1f250219_99[15] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ResponderPeerID_zid16_str":
			found98zgensym_8df0a91a1f250219_99[16] = true
			z.ResponderPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ResponderPeerURL_zid17_str":
			found98zgensym_8df0a91a1f250219_99[17] = true
			z.ResponderPeerURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ResponderName_zid18_str":
			found98zgensym_8df0a91a1f250219_99[18] = true
			z.ResponderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LastLogIndex_zid19_i64":
			found98zgensym_8df0a91a1f250219_99[19] = true
			z.LastLogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LastLogTerm_zid20_i64":
			found98zgensym_8df0a91a1f250219_99[20] = true
			z.LastLogTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ShadowReplicas_zid21_ptr":
			found98zgensym_8df0a91a1f250219_99[21] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ShadowReplicas != nil {
					dc.PushAlwaysNil()
					err = z.ShadowReplicas.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ShadowReplicas == nil {
					z.ShadowReplicas = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.ShadowReplicas)

				err = z.ShadowReplicas.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Known_zid22_map":
			found98zgensym_8df0a91a1f250219_99[22] = true
			var zgensym_8df0a91a1f250219_108 uint32
			zgensym_8df0a91a1f250219_108, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Known == nil && zgensym_8df0a91a1f250219_108 > 0 {
				z.Known = make(map[string]string, zgensym_8df0a91a1f250219_108)
			} else if len(z.Known) > 0 {
				for key, _ := range z.Known {
					delete(z.Known, key)
				}
			}
			for zgensym_8df0a91a1f250219_108 > 0 {
				zgensym_8df0a91a1f250219_108--
				var zgensym_8df0a91a1f250219_96 string
				var zgensym_8df0a91a1f250219_97 string
				zgensym_8df0a91a1f250219_96, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_97, err = dc.ReadString()
				if err != nil {
					return
				}
				z.Known[zgensym_8df0a91a1f250219_96] = zgensym_8df0a91a1f250219_97
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss98zgensym_8df0a91a1f250219_99 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Inspection
var decodeMsgFieldOrder98zgensym_8df0a91a1f250219_99 = []string{"CktReplica_zid00_map", "CktReplicaByName_zid01_map", "CktAll_zid02_map", "CktAllByName_zid03_map", "Peers_zid04_map", "WaitingAtLeader_zid05_map", "WaitingAtFollow_zid06_map", "Role_zid07_rct", "State_zid08_ptr", "CurrentLeaderName_zid09_str", "CurrentLeaderID_zid10_str", "CurrentLeaderURL_zid11_str", "ElectionCount_zid12_int", "LastLeaderActiveStepDown_zid13_tim", "Cfg_zid14_rct", "MC_zid15_ptr", "ResponderPeerID_zid16_str", "ResponderPeerURL_zid17_str", "ResponderName_zid18_str", "LastLogIndex_zid19_i64", "LastLogTerm_zid20_i64", "ShadowReplicas_zid21_ptr", "Known_zid22_map", ""}

var decodeMsgFieldSkip98zgensym_8df0a91a1f250219_99 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *Inspection) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 23
	}
	var fieldsInUse uint32 = 23
	isempty[0] = (len(z.CktReplica) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.CktReplicaByName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.CktAll) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CktAllByName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Peers) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.WaitingAtLeader) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.WaitingAtFollow) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.Role == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.State == nil) // pointer, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.CurrentLeaderName) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.CurrentLeaderID) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.CurrentLeaderURL) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.ElectionCount == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (z.LastLeaderActiveStepDown.IsZero()) // time.Time, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = false
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (z.MC == nil) // pointer, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (len(z.ResponderPeerID) == 0) // string, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (len(z.ResponderPeerURL) == 0) // string, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (len(z.ResponderName) == 0) // string, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (z.LastLogIndex == 0) // number, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (z.LastLogTerm == 0) // number, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = (z.ShadowReplicas == nil) // pointer, omitempty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (len(z.Known) == 0) // string, omitempty
	if isempty[22] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Inspection) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_109 [24]bool
	fieldsInUse_zgensym_8df0a91a1f250219_110 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_109[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_110 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Inspection'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_109[0] {
		// write "CktReplica_zid00_map"
		err = en.Append(0xb4, 0x43, 0x6b, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.CktReplica)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_82, zgensym_8df0a91a1f250219_83 := range z.CktReplica {
			err = en.WriteString(zgensym_8df0a91a1f250219_82)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_83)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[1] {
		// write "CktReplicaByName_zid01_map"
		err = en.Append(0xba, 0x43, 0x6b, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.CktReplicaByName)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_84, zgensym_8df0a91a1f250219_85 := range z.CktReplicaByName {
			err = en.WriteString(zgensym_8df0a91a1f250219_84)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_85)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[2] {
		// write "CktAll_zid02_map"
		err = en.Append(0xb0, 0x43, 0x6b, 0x74, 0x41, 0x6c, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.CktAll)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_86, zgensym_8df0a91a1f250219_87 := range z.CktAll {
			err = en.WriteString(zgensym_8df0a91a1f250219_86)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_87)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[3] {
		// write "CktAllByName_zid03_map"
		err = en.Append(0xb6, 0x43, 0x6b, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.CktAllByName)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_88, zgensym_8df0a91a1f250219_89 := range z.CktAllByName {
			err = en.WriteString(zgensym_8df0a91a1f250219_88)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_89)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[4] {
		// write "Peers_zid04_map"
		err = en.Append(0xaf, 0x50, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Peers)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_90, zgensym_8df0a91a1f250219_91 := range z.Peers {
			err = en.WriteString(zgensym_8df0a91a1f250219_90)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_91 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_91.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[5] {
		// write "WaitingAtLeader_zid05_map"
		err = en.Append(0xb9, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.WaitingAtLeader)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_92, zgensym_8df0a91a1f250219_93 := range z.WaitingAtLeader {
			err = en.WriteString(zgensym_8df0a91a1f250219_92)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_93 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_93.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[6] {
		// write "WaitingAtFollow_zid06_map"
		err = en.Append(0xb9, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.WaitingAtFollow)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_94, zgensym_8df0a91a1f250219_95 := range z.WaitingAtFollow {
			err = en.WriteString(zgensym_8df0a91a1f250219_94)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_95 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_95.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[7] {
		// write "Role_zid07_rct"
		err = en.Append(0xae, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(int(z.Role))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[8] {
		// write "State_zid08_ptr"
		err = en.Append(0xaf, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.State == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.State.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[9] {
		// write "CurrentLeaderName_zid09_str"
		err = en.Append(0xbb, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CurrentLeaderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[10] {
		// write "CurrentLeaderID_zid10_str"
		err = en.Append(0xb9, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CurrentLeaderID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[11] {
		// write "CurrentLeaderURL_zid11_str"
		err = en.Append(0xba, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CurrentLeaderURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[12] {
		// write "ElectionCount_zid12_int"
		err = en.Append(0xb7, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.ElectionCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[13] {
		// write "LastLeaderActiveStepDown_zid13_tim"
		err = en.Append(0xd9, 0x22, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.LastLeaderActiveStepDown)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[14] {
		// write "Cfg_zid14_rct"
		err = en.Append(0xad, 0x43, 0x66, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = z.Cfg.EncodeMsg(en)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[15] {
		// write "MC_zid15_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[16] {
		// write "ResponderPeerID_zid16_str"
		err = en.Append(0xb9, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ResponderPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[17] {
		// write "ResponderPeerURL_zid17_str"
		err = en.Append(0xba, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ResponderPeerURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[18] {
		// write "ResponderName_zid18_str"
		err = en.Append(0xb7, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ResponderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[19] {
		// write "LastLogIndex_zid19_i64"
		err = en.Append(0xb6, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastLogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[20] {
		// write "LastLogTerm_zid20_i64"
		err = en.Append(0xb5, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastLogTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[21] {
		// write "ShadowReplicas_zid21_ptr"
		err = en.Append(0xb8, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ShadowReplicas == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ShadowReplicas.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_109[22] {
		// write "Known_zid22_map"
		err = en.Append(0xaf, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Known)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_96, zgensym_8df0a91a1f250219_97 := range z.Known {
			err = en.WriteString(zgensym_8df0a91a1f250219_96)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_97)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Inspection) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [24]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "CktReplica_zid00_map"
		o = append(o, 0xb4, 0x43, 0x6b, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.CktReplica)))
		for zgensym_8df0a91a1f250219_82, zgensym_8df0a91a1f250219_83 := range z.CktReplica {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_82)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_83)
		}
	}

	if !empty[1] {
		// string "CktReplicaByName_zid01_map"
		o = append(o, 0xba, 0x43, 0x6b, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.CktReplicaByName)))
		for zgensym_8df0a91a1f250219_84, zgensym_8df0a91a1f250219_85 := range z.CktReplicaByName {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_84)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_85)
		}
	}

	if !empty[2] {
		// string "CktAll_zid02_map"
		o = append(o, 0xb0, 0x43, 0x6b, 0x74, 0x41, 0x6c, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.CktAll)))
		for zgensym_8df0a91a1f250219_86, zgensym_8df0a91a1f250219_87 := range z.CktAll {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_86)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_87)
		}
	}

	if !empty[3] {
		// string "CktAllByName_zid03_map"
		o = append(o, 0xb6, 0x43, 0x6b, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.CktAllByName)))
		for zgensym_8df0a91a1f250219_88, zgensym_8df0a91a1f250219_89 := range z.CktAllByName {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_88)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_89)
		}
	}

	if !empty[4] {
		// string "Peers_zid04_map"
		o = append(o, 0xaf, 0x50, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Peers)))
		for zgensym_8df0a91a1f250219_90, zgensym_8df0a91a1f250219_91 := range z.Peers {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_90)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_91 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_91.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[5] {
		// string "WaitingAtLeader_zid05_map"
		o = append(o, 0xb9, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.WaitingAtLeader)))
		for zgensym_8df0a91a1f250219_92, zgensym_8df0a91a1f250219_93 := range z.WaitingAtLeader {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_92)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_93 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_93.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[6] {
		// string "WaitingAtFollow_zid06_map"
		o = append(o, 0xb9, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.WaitingAtFollow)))
		for zgensym_8df0a91a1f250219_94, zgensym_8df0a91a1f250219_95 := range z.WaitingAtFollow {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_94)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_95 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_95.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[7] {
		// string "Role_zid07_rct"
		o = append(o, 0xae, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt(o, int(z.Role))
	}

	if !empty[8] {
		// string "State_zid08_ptr"
		o = append(o, 0xaf, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.State == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.State.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[9] {
		// string "CurrentLeaderName_zid09_str"
		o = append(o, 0xbb, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CurrentLeaderName)
	}

	if !empty[10] {
		// string "CurrentLeaderID_zid10_str"
		o = append(o, 0xb9, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CurrentLeaderID)
	}

	if !empty[11] {
		// string "CurrentLeaderURL_zid11_str"
		o = append(o, 0xba, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CurrentLeaderURL)
	}

	if !empty[12] {
		// string "ElectionCount_zid12_int"
		o = append(o, 0xb7, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.ElectionCount)
	}

	if !empty[13] {
		// string "LastLeaderActiveStepDown_zid13_tim"
		o = append(o, 0xd9, 0x22, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.LastLeaderActiveStepDown)
	}

	if !empty[14] {
		// string "Cfg_zid14_rct"
		o = append(o, 0xad, 0x43, 0x66, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.Cfg.MarshalMsg(o) // not is.iface
		if err != nil {
			return
		}
	}

	if !empty[15] {
		// string "MC_zid15_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[16] {
		// string "ResponderPeerID_zid16_str"
		o = append(o, 0xb9, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ResponderPeerID)
	}

	if !empty[17] {
		// string "ResponderPeerURL_zid17_str"
		o = append(o, 0xba, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ResponderPeerURL)
	}

	if !empty[18] {
		// string "ResponderName_zid18_str"
		o = append(o, 0xb7, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ResponderName)
	}

	if !empty[19] {
		// string "LastLogIndex_zid19_i64"
		o = append(o, 0xb6, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastLogIndex)
	}

	if !empty[20] {
		// string "LastLogTerm_zid20_i64"
		o = append(o, 0xb5, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastLogTerm)
	}

	if !empty[21] {
		// string "ShadowReplicas_zid21_ptr"
		o = append(o, 0xb8, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ShadowReplicas == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ShadowReplicas.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[22] {
		// string "Known_zid22_map"
		o = append(o, 0xaf, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Known)))
		for zgensym_8df0a91a1f250219_96, zgensym_8df0a91a1f250219_97 := range z.Known {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_96)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_97)
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Inspection) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Inspection) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields111zgensym_8df0a91a1f250219_112 = 24

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields111zgensym_8df0a91a1f250219_112 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields111zgensym_8df0a91a1f250219_112, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft111zgensym_8df0a91a1f250219_112 := totalEncodedFields111zgensym_8df0a91a1f250219_112
	missingFieldsLeft111zgensym_8df0a91a1f250219_112 := maxFields111zgensym_8df0a91a1f250219_112 - totalEncodedFields111zgensym_8df0a91a1f250219_112

	var nextMiss111zgensym_8df0a91a1f250219_112 int32 = -1
	var found111zgensym_8df0a91a1f250219_112 [maxFields111zgensym_8df0a91a1f250219_112]bool
	var curField111zgensym_8df0a91a1f250219_112 string

doneWithStruct111zgensym_8df0a91a1f250219_112:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft111zgensym_8df0a91a1f250219_112 > 0 || missingFieldsLeft111zgensym_8df0a91a1f250219_112 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft111zgensym_8df0a91a1f250219_112, missingFieldsLeft111zgensym_8df0a91a1f250219_112, msgp.ShowFound(found111zgensym_8df0a91a1f250219_112[:]), unmarshalMsgFieldOrder111zgensym_8df0a91a1f250219_112)
		if encodedFieldsLeft111zgensym_8df0a91a1f250219_112 > 0 {
			encodedFieldsLeft111zgensym_8df0a91a1f250219_112--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField111zgensym_8df0a91a1f250219_112 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss111zgensym_8df0a91a1f250219_112 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss111zgensym_8df0a91a1f250219_112 = 0
			}
			for nextMiss111zgensym_8df0a91a1f250219_112 < maxFields111zgensym_8df0a91a1f250219_112 && (found111zgensym_8df0a91a1f250219_112[nextMiss111zgensym_8df0a91a1f250219_112] || unmarshalMsgFieldSkip111zgensym_8df0a91a1f250219_112[nextMiss111zgensym_8df0a91a1f250219_112]) {
				nextMiss111zgensym_8df0a91a1f250219_112++
			}
			if nextMiss111zgensym_8df0a91a1f250219_112 == maxFields111zgensym_8df0a91a1f250219_112 {
				// filled all the empty fields!
				break doneWithStruct111zgensym_8df0a91a1f250219_112
			}
			missingFieldsLeft111zgensym_8df0a91a1f250219_112--
			curField111zgensym_8df0a91a1f250219_112 = unmarshalMsgFieldOrder111zgensym_8df0a91a1f250219_112[nextMiss111zgensym_8df0a91a1f250219_112]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField111zgensym_8df0a91a1f250219_112)
		switch curField111zgensym_8df0a91a1f250219_112 {
		// -- templateUnmarshalMsg ends here --

		case "CktReplica_zid00_map":
			found111zgensym_8df0a91a1f250219_112[0] = true
			if nbs.AlwaysNil {
				if len(z.CktReplica) > 0 {
					for key, _ := range z.CktReplica {
						delete(z.CktReplica, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_113 uint32
				zgensym_8df0a91a1f250219_113, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.CktReplica == nil && zgensym_8df0a91a1f250219_113 > 0 {
					z.CktReplica = make(map[string]string, zgensym_8df0a91a1f250219_113)
				} else if len(z.CktReplica) > 0 {
					for key, _ := range z.CktReplica {
						delete(z.CktReplica, key)
					}
				}
				for zgensym_8df0a91a1f250219_113 > 0 {
					var zgensym_8df0a91a1f250219_82 string
					var zgensym_8df0a91a1f250219_83 string
					zgensym_8df0a91a1f250219_113--
					zgensym_8df0a91a1f250219_82, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_83, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.CktReplica[zgensym_8df0a91a1f250219_82] = zgensym_8df0a91a1f250219_83
				}
			}
		case "CktReplicaByName_zid01_map":
			found111zgensym_8df0a91a1f250219_112[1] = true
			if nbs.AlwaysNil {
				if len(z.CktReplicaByName) > 0 {
					for key, _ := range z.CktReplicaByName {
						delete(z.CktReplicaByName, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_114 uint32
				zgensym_8df0a91a1f250219_114, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.CktReplicaByName == nil && zgensym_8df0a91a1f250219_114 > 0 {
					z.CktReplicaByName = make(map[string]string, zgensym_8df0a91a1f250219_114)
				} else if len(z.CktReplicaByName) > 0 {
					for key, _ := range z.CktReplicaByName {
						delete(z.CktReplicaByName, key)
					}
				}
				for zgensym_8df0a91a1f250219_114 > 0 {
					var zgensym_8df0a91a1f250219_84 string
					var zgensym_8df0a91a1f250219_85 string
					zgensym_8df0a91a1f250219_114--
					zgensym_8df0a91a1f250219_84, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_85, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.CktReplicaByName[zgensym_8df0a91a1f250219_84] = zgensym_8df0a91a1f250219_85
				}
			}
		case "CktAll_zid02_map":
			found111zgensym_8df0a91a1f250219_112[2] = true
			if nbs.AlwaysNil {
				if len(z.CktAll) > 0 {
					for key, _ := range z.CktAll {
						delete(z.CktAll, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_115 uint32
				zgensym_8df0a91a1f250219_115, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.CktAll == nil && zgensym_8df0a91a1f250219_115 > 0 {
					z.CktAll = make(map[string]string, zgensym_8df0a91a1f250219_115)
				} else if len(z.CktAll) > 0 {
					for key, _ := range z.CktAll {
						delete(z.CktAll, key)
					}
				}
				for zgensym_8df0a91a1f250219_115 > 0 {
					var zgensym_8df0a91a1f250219_86 string
					var zgensym_8df0a91a1f250219_87 string
					zgensym_8df0a91a1f250219_115--
					zgensym_8df0a91a1f250219_86, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_87, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.CktAll[zgensym_8df0a91a1f250219_86] = zgensym_8df0a91a1f250219_87
				}
			}
		case "CktAllByName_zid03_map":
			found111zgensym_8df0a91a1f250219_112[3] = true
			if nbs.AlwaysNil {
				if len(z.CktAllByName) > 0 {
					for key, _ := range z.CktAllByName {
						delete(z.CktAllByName, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_116 uint32
				zgensym_8df0a91a1f250219_116, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.CktAllByName == nil && zgensym_8df0a91a1f250219_116 > 0 {
					z.CktAllByName = make(map[string]string, zgensym_8df0a91a1f250219_116)
				} else if len(z.CktAllByName) > 0 {
					for key, _ := range z.CktAllByName {
						delete(z.CktAllByName, key)
					}
				}
				for zgensym_8df0a91a1f250219_116 > 0 {
					var zgensym_8df0a91a1f250219_88 string
					var zgensym_8df0a91a1f250219_89 string
					zgensym_8df0a91a1f250219_116--
					zgensym_8df0a91a1f250219_88, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_89, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.CktAllByName[zgensym_8df0a91a1f250219_88] = zgensym_8df0a91a1f250219_89
				}
			}
		case "Peers_zid04_map":
			found111zgensym_8df0a91a1f250219_112[4] = true
			if nbs.AlwaysNil {
				if len(z.Peers) > 0 {
					for key, _ := range z.Peers {
						delete(z.Peers, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_117 uint32
				zgensym_8df0a91a1f250219_117, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Peers == nil && zgensym_8df0a91a1f250219_117 > 0 {
					z.Peers = make(map[string]*RaftNodeInfo, zgensym_8df0a91a1f250219_117)
				} else if len(z.Peers) > 0 {
					for key, _ := range z.Peers {
						delete(z.Peers, key)
					}
				}
				for zgensym_8df0a91a1f250219_117 > 0 {
					var zgensym_8df0a91a1f250219_90 string
					var zgensym_8df0a91a1f250219_91 *RaftNodeInfo
					zgensym_8df0a91a1f250219_117--
					zgensym_8df0a91a1f250219_90, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_91 != nil {
							zgensym_8df0a91a1f250219_91.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_91 {
								zgensym_8df0a91a1f250219_91.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_91 == nil {
								zgensym_8df0a91a1f250219_91 = new(RaftNodeInfo)
							}

							bts, err = zgensym_8df0a91a1f250219_91.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.Peers[zgensym_8df0a91a1f250219_90] = zgensym_8df0a91a1f250219_91
				}
			}
		case "WaitingAtLeader_zid05_map":
			found111zgensym_8df0a91a1f250219_112[5] = true
			if nbs.AlwaysNil {
				if len(z.WaitingAtLeader) > 0 {
					for key, _ := range z.WaitingAtLeader {
						delete(z.WaitingAtLeader, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_118 uint32
				zgensym_8df0a91a1f250219_118, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.WaitingAtLeader == nil && zgensym_8df0a91a1f250219_118 > 0 {
					z.WaitingAtLeader = make(map[string]*Ticket, zgensym_8df0a91a1f250219_118)
				} else if len(z.WaitingAtLeader) > 0 {
					for key, _ := range z.WaitingAtLeader {
						delete(z.WaitingAtLeader, key)
					}
				}
				for zgensym_8df0a91a1f250219_118 > 0 {
					var zgensym_8df0a91a1f250219_92 string
					var zgensym_8df0a91a1f250219_93 *Ticket
					zgensym_8df0a91a1f250219_118--
					zgensym_8df0a91a1f250219_92, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_93 != nil {
							zgensym_8df0a91a1f250219_93.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_93 {
								zgensym_8df0a91a1f250219_93.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_93 == nil {
								zgensym_8df0a91a1f250219_93 = new(Ticket)
							}

							bts, err = zgensym_8df0a91a1f250219_93.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.WaitingAtLeader[zgensym_8df0a91a1f250219_92] = zgensym_8df0a91a1f250219_93
				}
			}
		case "WaitingAtFollow_zid06_map":
			found111zgensym_8df0a91a1f250219_112[6] = true
			if nbs.AlwaysNil {
				if len(z.WaitingAtFollow) > 0 {
					for key, _ := range z.WaitingAtFollow {
						delete(z.WaitingAtFollow, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_119 uint32
				zgensym_8df0a91a1f250219_119, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.WaitingAtFollow == nil && zgensym_8df0a91a1f250219_119 > 0 {
					z.WaitingAtFollow = make(map[string]*Ticket, zgensym_8df0a91a1f250219_119)
				} else if len(z.WaitingAtFollow) > 0 {
					for key, _ := range z.WaitingAtFollow {
						delete(z.WaitingAtFollow, key)
					}
				}
				for zgensym_8df0a91a1f250219_119 > 0 {
					var zgensym_8df0a91a1f250219_94 string
					var zgensym_8df0a91a1f250219_95 *Ticket
					zgensym_8df0a91a1f250219_119--
					zgensym_8df0a91a1f250219_94, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_95 != nil {
							zgensym_8df0a91a1f250219_95.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_95 {
								zgensym_8df0a91a1f250219_95.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_95 == nil {
								zgensym_8df0a91a1f250219_95 = new(Ticket)
							}

							bts, err = zgensym_8df0a91a1f250219_95.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.WaitingAtFollow[zgensym_8df0a91a1f250219_94] = zgensym_8df0a91a1f250219_95
				}
			}
		case "Role_zid07_rct":
			found111zgensym_8df0a91a1f250219_112[7] = true
			{
				var zgensym_8df0a91a1f250219_120 int
				zgensym_8df0a91a1f250219_120, bts, err = nbs.ReadIntBytes(bts)

				if err != nil {
					return
				}
				z.Role = RaftRole(zgensym_8df0a91a1f250219_120)
			}
		case "State_zid08_ptr":
			found111zgensym_8df0a91a1f250219_112[8] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.State != nil {
					z.State.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.State {
						z.State.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.State == nil {
						z.State = new(RaftState)
					}

					bts, err = z.State.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "CurrentLeaderName_zid09_str":
			found111zgensym_8df0a91a1f250219_112[9] = true
			z.CurrentLeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CurrentLeaderID_zid10_str":
			found111zgensym_8df0a91a1f250219_112[10] = true
			z.CurrentLeaderID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CurrentLeaderURL_zid11_str":
			found111zgensym_8df0a91a1f250219_112[11] = true
			z.CurrentLeaderURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ElectionCount_zid12_int":
			found111zgensym_8df0a91a1f250219_112[12] = true
			z.ElectionCount, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "LastLeaderActiveStepDown_zid13_tim":
			found111zgensym_8df0a91a1f250219_112[13] = true
			z.LastLeaderActiveStepDown, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Cfg_zid14_rct":
			found111zgensym_8df0a91a1f250219_112[14] = true
			bts, err = z.Cfg.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "MC_zid15_ptr":
			found111zgensym_8df0a91a1f250219_112[15] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "ResponderPeerID_zid16_str":
			found111zgensym_8df0a91a1f250219_112[16] = true
			z.ResponderPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ResponderPeerURL_zid17_str":
			found111zgensym_8df0a91a1f250219_112[17] = true
			z.ResponderPeerURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ResponderName_zid18_str":
			found111zgensym_8df0a91a1f250219_112[18] = true
			z.ResponderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LastLogIndex_zid19_i64":
			found111zgensym_8df0a91a1f250219_112[19] = true
			z.LastLogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LastLogTerm_zid20_i64":
			found111zgensym_8df0a91a1f250219_112[20] = true
			z.LastLogTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ShadowReplicas_zid21_ptr":
			found111zgensym_8df0a91a1f250219_112[21] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ShadowReplicas != nil {
					z.ShadowReplicas.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ShadowReplicas {
						z.ShadowReplicas.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ShadowReplicas == nil {
						z.ShadowReplicas = new(MemberConfig)
					}

					bts, err = z.ShadowReplicas.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Known_zid22_map":
			found111zgensym_8df0a91a1f250219_112[22] = true
			if nbs.AlwaysNil {
				if len(z.Known) > 0 {
					for key, _ := range z.Known {
						delete(z.Known, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_121 uint32
				zgensym_8df0a91a1f250219_121, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Known == nil && zgensym_8df0a91a1f250219_121 > 0 {
					z.Known = make(map[string]string, zgensym_8df0a91a1f250219_121)
				} else if len(z.Known) > 0 {
					for key, _ := range z.Known {
						delete(z.Known, key)
					}
				}
				for zgensym_8df0a91a1f250219_121 > 0 {
					var zgensym_8df0a91a1f250219_96 string
					var zgensym_8df0a91a1f250219_97 string
					zgensym_8df0a91a1f250219_121--
					zgensym_8df0a91a1f250219_96, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_97, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.Known[zgensym_8df0a91a1f250219_96] = zgensym_8df0a91a1f250219_97
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss111zgensym_8df0a91a1f250219_112 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Inspection
var unmarshalMsgFieldOrder111zgensym_8df0a91a1f250219_112 = []string{"CktReplica_zid00_map", "CktReplicaByName_zid01_map", "CktAll_zid02_map", "CktAllByName_zid03_map", "Peers_zid04_map", "WaitingAtLeader_zid05_map", "WaitingAtFollow_zid06_map", "Role_zid07_rct", "State_zid08_ptr", "CurrentLeaderName_zid09_str", "CurrentLeaderID_zid10_str", "CurrentLeaderURL_zid11_str", "ElectionCount_zid12_int", "LastLeaderActiveStepDown_zid13_tim", "Cfg_zid14_rct", "MC_zid15_ptr", "ResponderPeerID_zid16_str", "ResponderPeerURL_zid17_str", "ResponderName_zid18_str", "LastLogIndex_zid19_i64", "LastLogTerm_zid20_i64", "ShadowReplicas_zid21_ptr", "Known_zid22_map", ""}

var unmarshalMsgFieldSkip111zgensym_8df0a91a1f250219_112 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Inspection) Msgsize() (s int) {
	s = 3 + 21 + msgp.MapHeaderSize
	if z.CktReplica != nil {
		for zgensym_8df0a91a1f250219_82, zgensym_8df0a91a1f250219_83 := range z.CktReplica {
			_ = zgensym_8df0a91a1f250219_83
			_ = zgensym_8df0a91a1f250219_82
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_82) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_83)
		}
	}
	s += 27 + msgp.MapHeaderSize
	if z.CktReplicaByName != nil {
		for zgensym_8df0a91a1f250219_84, zgensym_8df0a91a1f250219_85 := range z.CktReplicaByName {
			_ = zgensym_8df0a91a1f250219_85
			_ = zgensym_8df0a91a1f250219_84
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_84) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_85)
		}
	}
	s += 17 + msgp.MapHeaderSize
	if z.CktAll != nil {
		for zgensym_8df0a91a1f250219_86, zgensym_8df0a91a1f250219_87 := range z.CktAll {
			_ = zgensym_8df0a91a1f250219_87
			_ = zgensym_8df0a91a1f250219_86
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_86) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_87)
		}
	}
	s += 23 + msgp.MapHeaderSize
	if z.CktAllByName != nil {
		for zgensym_8df0a91a1f250219_88, zgensym_8df0a91a1f250219_89 := range z.CktAllByName {
			_ = zgensym_8df0a91a1f250219_89
			_ = zgensym_8df0a91a1f250219_88
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_88) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_89)
		}
	}
	s += 16 + msgp.MapHeaderSize
	if z.Peers != nil {
		for zgensym_8df0a91a1f250219_90, zgensym_8df0a91a1f250219_91 := range z.Peers {
			_ = zgensym_8df0a91a1f250219_91
			_ = zgensym_8df0a91a1f250219_90
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_90)
			if zgensym_8df0a91a1f250219_91 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_91.Msgsize()
			}
		}
	}
	s += 26 + msgp.MapHeaderSize
	if z.WaitingAtLeader != nil {
		for zgensym_8df0a91a1f250219_92, zgensym_8df0a91a1f250219_93 := range z.WaitingAtLeader {
			_ = zgensym_8df0a91a1f250219_93
			_ = zgensym_8df0a91a1f250219_92
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_92)
			if zgensym_8df0a91a1f250219_93 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_93.Msgsize()
			}
		}
	}
	s += 26 + msgp.MapHeaderSize
	if z.WaitingAtFollow != nil {
		for zgensym_8df0a91a1f250219_94, zgensym_8df0a91a1f250219_95 := range z.WaitingAtFollow {
			_ = zgensym_8df0a91a1f250219_95
			_ = zgensym_8df0a91a1f250219_94
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_94)
			if zgensym_8df0a91a1f250219_95 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_95.Msgsize()
			}
		}
	}
	s += 15 + msgp.IntSize + 16
	if z.State == nil {
		s += msgp.NilSize
	} else {
		s += z.State.Msgsize()
	}
	s += 28 + msgp.StringPrefixSize + len(z.CurrentLeaderName) + 26 + msgp.StringPrefixSize + len(z.CurrentLeaderID) + 27 + msgp.StringPrefixSize + len(z.CurrentLeaderURL) + 24 + msgp.IntSize + 36 + msgp.TimeSize + 14 + z.Cfg.Msgsize() + 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	s += 26 + msgp.StringPrefixSize + len(z.ResponderPeerID) + 27 + msgp.StringPrefixSize + len(z.ResponderPeerURL) + 24 + msgp.StringPrefixSize + len(z.ResponderName) + 23 + msgp.Int64Size + 22 + msgp.Int64Size + 25
	if z.ShadowReplicas == nil {
		s += msgp.NilSize
	} else {
		s += z.ShadowReplicas.Msgsize()
	}
	s += 16 + msgp.MapHeaderSize
	if z.Known != nil {
		for zgensym_8df0a91a1f250219_96, zgensym_8df0a91a1f250219_97 := range z.Known {
			_ = zgensym_8df0a91a1f250219_97
			_ = zgensym_8df0a91a1f250219_96
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_96) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_97)
		}
	}
	return
}
func (z *Inspection) Gstring() (r string) {
	r = "&Inspection{\n"
	r += fmt.Sprintf("              CktReplica: %v,\n", z.CktReplica)
	r += fmt.Sprintf("        CktReplicaByName: %v,\n", z.CktReplicaByName)
	r += fmt.Sprintf("                  CktAll: %v,\n", z.CktAll)
	r += fmt.Sprintf("            CktAllByName: %v,\n", z.CktAllByName)
	r += fmt.Sprintf("                   Peers: %v,\n", z.Peers)
	r += fmt.Sprintf("         WaitingAtLeader: %v,\n", z.WaitingAtLeader)
	r += fmt.Sprintf("         WaitingAtFollow: %v,\n", z.WaitingAtFollow)
	r += fmt.Sprintf("                    Role: %v,\n", z.Role)
	r += fmt.Sprintf("                   State: %v,\n", z.State)
	r += fmt.Sprintf("       CurrentLeaderName: \"%v\",\n", z.CurrentLeaderName)
	r += fmt.Sprintf("         CurrentLeaderID: \"%v\",\n", z.CurrentLeaderID)
	r += fmt.Sprintf("        CurrentLeaderURL: \"%v\",\n", z.CurrentLeaderURL)
	r += fmt.Sprintf("           ElectionCount: %v,\n", z.ElectionCount)
	r += fmt.Sprintf("LastLeaderActiveStepDown: %v,\n", z.LastLeaderActiveStepDown)
	r += fmt.Sprintf("                     Cfg: %v,\n", z.Cfg)
	r += fmt.Sprintf("                      MC: %v,\n", z.MC)
	r += fmt.Sprintf("         ResponderPeerID: \"%v\",\n", z.ResponderPeerID)
	r += fmt.Sprintf("        ResponderPeerURL: \"%v\",\n", z.ResponderPeerURL)
	r += fmt.Sprintf("           ResponderName: \"%v\",\n", z.ResponderName)
	r += fmt.Sprintf("            LastLogIndex: %v,\n", z.LastLogIndex)
	r += fmt.Sprintf("             LastLogTerm: %v,\n", z.LastLogTerm)
	r += fmt.Sprintf("          ShadowReplicas: %v,\n", z.ShadowReplicas)
	r += fmt.Sprintf("                   Known: %v,\n", z.Known)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *KVStore) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields124zgensym_8df0a91a1f250219_125 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields124zgensym_8df0a91a1f250219_125 uint32
	totalEncodedFields124zgensym_8df0a91a1f250219_125, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft124zgensym_8df0a91a1f250219_125 := totalEncodedFields124zgensym_8df0a91a1f250219_125
	missingFieldsLeft124zgensym_8df0a91a1f250219_125 := maxFields124zgensym_8df0a91a1f250219_125 - totalEncodedFields124zgensym_8df0a91a1f250219_125

	var nextMiss124zgensym_8df0a91a1f250219_125 int32 = -1
	var found124zgensym_8df0a91a1f250219_125 [maxFields124zgensym_8df0a91a1f250219_125]bool
	var curField124zgensym_8df0a91a1f250219_125 string

doneWithStruct124zgensym_8df0a91a1f250219_125:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft124zgensym_8df0a91a1f250219_125 > 0 || missingFieldsLeft124zgensym_8df0a91a1f250219_125 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft124zgensym_8df0a91a1f250219_125, missingFieldsLeft124zgensym_8df0a91a1f250219_125, msgp.ShowFound(found124zgensym_8df0a91a1f250219_125[:]), decodeMsgFieldOrder124zgensym_8df0a91a1f250219_125)
		if encodedFieldsLeft124zgensym_8df0a91a1f250219_125 > 0 {
			encodedFieldsLeft124zgensym_8df0a91a1f250219_125--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField124zgensym_8df0a91a1f250219_125 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss124zgensym_8df0a91a1f250219_125 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss124zgensym_8df0a91a1f250219_125 = 0
			}
			for nextMiss124zgensym_8df0a91a1f250219_125 < maxFields124zgensym_8df0a91a1f250219_125 && (found124zgensym_8df0a91a1f250219_125[nextMiss124zgensym_8df0a91a1f250219_125] || decodeMsgFieldSkip124zgensym_8df0a91a1f250219_125[nextMiss124zgensym_8df0a91a1f250219_125]) {
				nextMiss124zgensym_8df0a91a1f250219_125++
			}
			if nextMiss124zgensym_8df0a91a1f250219_125 == maxFields124zgensym_8df0a91a1f250219_125 {
				// filled all the empty fields!
				break doneWithStruct124zgensym_8df0a91a1f250219_125
			}
			missingFieldsLeft124zgensym_8df0a91a1f250219_125--
			curField124zgensym_8df0a91a1f250219_125 = decodeMsgFieldOrder124zgensym_8df0a91a1f250219_125[nextMiss124zgensym_8df0a91a1f250219_125]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField124zgensym_8df0a91a1f250219_125)
		switch curField124zgensym_8df0a91a1f250219_125 {
		// -- templateDecodeMsg ends here --

		case "Keys_zid00_slc":
			found124zgensym_8df0a91a1f250219_125[0] = true
			var zgensym_8df0a91a1f250219_126 uint32
			zgensym_8df0a91a1f250219_126, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Keys) >= int(zgensym_8df0a91a1f250219_126) {
				z.Keys = (z.Keys)[:zgensym_8df0a91a1f250219_126]
			} else {
				z.Keys = make([]Key, zgensym_8df0a91a1f250219_126)
			}
			for zgensym_8df0a91a1f250219_122 := range z.Keys {
				{
					var zgensym_8df0a91a1f250219_127 string
					zgensym_8df0a91a1f250219_127, err = dc.ReadString()
					z.Keys[zgensym_8df0a91a1f250219_122] = Key(zgensym_8df0a91a1f250219_127)
				}
				if err != nil {
					return
				}
			}
		case "Vals_zid01_slc":
			found124zgensym_8df0a91a1f250219_125[1] = true
			var zgensym_8df0a91a1f250219_128 uint32
			zgensym_8df0a91a1f250219_128, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Vals) >= int(zgensym_8df0a91a1f250219_128) {
				z.Vals = (z.Vals)[:zgensym_8df0a91a1f250219_128]
			} else {
				z.Vals = make([]*ArtTable, zgensym_8df0a91a1f250219_128)
			}
			for zgensym_8df0a91a1f250219_123 := range z.Vals {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					z.Vals[zgensym_8df0a91a1f250219_123] = nil
				} else {
					if z.Vals[zgensym_8df0a91a1f250219_123] == nil {
						z.Vals[zgensym_8df0a91a1f250219_123] = new(ArtTable)
					}
					dc.DedupIndexEachPtr(z.Vals[zgensym_8df0a91a1f250219_123])

					const maxFields129zgensym_8df0a91a1f250219_130 = 1

					// -- templateDecodeMsg starts here--
					var totalEncodedFields129zgensym_8df0a91a1f250219_130 uint32
					totalEncodedFields129zgensym_8df0a91a1f250219_130, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					encodedFieldsLeft129zgensym_8df0a91a1f250219_130 := totalEncodedFields129zgensym_8df0a91a1f250219_130
					missingFieldsLeft129zgensym_8df0a91a1f250219_130 := maxFields129zgensym_8df0a91a1f250219_130 - totalEncodedFields129zgensym_8df0a91a1f250219_130

					var nextMiss129zgensym_8df0a91a1f250219_130 int32 = -1
					var found129zgensym_8df0a91a1f250219_130 [maxFields129zgensym_8df0a91a1f250219_130]bool
					var curField129zgensym_8df0a91a1f250219_130 string

				doneWithStruct129zgensym_8df0a91a1f250219_130:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft129zgensym_8df0a91a1f250219_130 > 0 || missingFieldsLeft129zgensym_8df0a91a1f250219_130 > 0 {
						//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft129zgensym_8df0a91a1f250219_130, missingFieldsLeft129zgensym_8df0a91a1f250219_130, msgp.ShowFound(found129zgensym_8df0a91a1f250219_130[:]), decodeMsgFieldOrder129zgensym_8df0a91a1f250219_130)
						if encodedFieldsLeft129zgensym_8df0a91a1f250219_130 > 0 {
							encodedFieldsLeft129zgensym_8df0a91a1f250219_130--
							field, err = dc.ReadMapKeyPtr()
							if err != nil {
								return
							}
							curField129zgensym_8df0a91a1f250219_130 = msgp.UnsafeString(field)
						} else {
							//missing fields need handling
							if nextMiss129zgensym_8df0a91a1f250219_130 < 0 {
								// tell the reader to only give us Nils
								// until further notice.
								dc.PushAlwaysNil()
								nextMiss129zgensym_8df0a91a1f250219_130 = 0
							}
							for nextMiss129zgensym_8df0a91a1f250219_130 < maxFields129zgensym_8df0a91a1f250219_130 && (found129zgensym_8df0a91a1f250219_130[nextMiss129zgensym_8df0a91a1f250219_130] || decodeMsgFieldSkip129zgensym_8df0a91a1f250219_130[nextMiss129zgensym_8df0a91a1f250219_130]) {
								nextMiss129zgensym_8df0a91a1f250219_130++
							}
							if nextMiss129zgensym_8df0a91a1f250219_130 == maxFields129zgensym_8df0a91a1f250219_130 {
								// filled all the empty fields!
								break doneWithStruct129zgensym_8df0a91a1f250219_130
							}
							missingFieldsLeft129zgensym_8df0a91a1f250219_130--
							curField129zgensym_8df0a91a1f250219_130 = decodeMsgFieldOrder129zgensym_8df0a91a1f250219_130[nextMiss129zgensym_8df0a91a1f250219_130]
						}
						//fmt.Printf("switching on curField: '%v'\n", curField129zgensym_8df0a91a1f250219_130)
						switch curField129zgensym_8df0a91a1f250219_130 {
						// -- templateDecodeMsg ends here --

						case "Tree_zid00_ptr":
							found129zgensym_8df0a91a1f250219_130[0] = true
							if dc.IsNil() {
								err = dc.ReadNil()
								if err != nil {
									return
								}

								if z.Vals[zgensym_8df0a91a1f250219_123].Tree != nil {
									dc.PushAlwaysNil()
									err = z.Vals[zgensym_8df0a91a1f250219_123].Tree.DecodeMsg(dc)
									if err != nil {
										return
									}
									dc.PopAlwaysNil()
								}
							} else {
								// not Nil, we have something to read

								if z.Vals[zgensym_8df0a91a1f250219_123].Tree == nil {
									z.Vals[zgensym_8df0a91a1f250219_123].Tree = new(art.Tree)
								}
								dc.DedupIndexEachPtr(z.Vals[zgensym_8df0a91a1f250219_123].Tree)

								err = z.Vals[zgensym_8df0a91a1f250219_123].Tree.DecodeMsg(dc)
								if err != nil {
									return
								}
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
					if nextMiss129zgensym_8df0a91a1f250219_130 != -1 {
						dc.PopAlwaysNil()
					}

				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss124zgensym_8df0a91a1f250219_125 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of KVStore
var decodeMsgFieldOrder124zgensym_8df0a91a1f250219_125 = []string{"Keys_zid00_slc", "Vals_zid01_slc"}

var decodeMsgFieldSkip124zgensym_8df0a91a1f250219_125 = []bool{false, false}

// fields of ArtTable
var decodeMsgFieldOrder129zgensym_8df0a91a1f250219_130 = []string{"Tree_zid00_ptr"}

var decodeMsgFieldSkip129zgensym_8df0a91a1f250219_130 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *KVStore) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Keys) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Vals) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *KVStore) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_131 [2]bool
	fieldsInUse_zgensym_8df0a91a1f250219_132 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_131[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_132 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'KVStore'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4b, 0x56, 0x53, 0x74, 0x6f, 0x72, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_131[0] {
		// write "Keys_zid00_slc"
		err = en.Append(0xae, 0x4b, 0x65, 0x79, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Keys)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_122 := range z.Keys {
			err = en.WriteString(string(z.Keys[zgensym_8df0a91a1f250219_122]))
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_131[1] {
		// write "Vals_zid01_slc"
		err = en.Append(0xae, 0x56, 0x61, 0x6c, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Vals)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_123 := range z.Vals {
			// gPtr.encodeGen():

			if z.Vals[zgensym_8df0a91a1f250219_123] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {

				// honor the omitempty tags
				var empty_zgensym_8df0a91a1f250219_133 [1]bool
				fieldsInUse_zgensym_8df0a91a1f250219_134 := z.Vals[zgensym_8df0a91a1f250219_123].fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_133[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_134 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'ArtTable'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x41, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65})
				if err != nil {
					return err
				}

				if !empty_zgensym_8df0a91a1f250219_133[0] {
					// write "Tree_zid00_ptr"
					err = en.Append(0xae, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
					if err != nil {
						return err
					}
					// gPtr.encodeGen():

					if z.Vals[zgensym_8df0a91a1f250219_123].Tree == nil {
						err = en.WriteNil()
						if err != nil {
							return
						}
					} else {
						err = z.Vals[zgensym_8df0a91a1f250219_123].Tree.EncodeMsg(en)
						if err != nil {
							return
						}
					}
				}

			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KVStore) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Keys_zid00_slc"
		o = append(o, 0xae, 0x4b, 0x65, 0x79, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Keys)))
		for zgensym_8df0a91a1f250219_122 := range z.Keys {
			o = msgp.AppendString(o, string(z.Keys[zgensym_8df0a91a1f250219_122]))
		}
	}

	if !empty[1] {
		// string "Vals_zid01_slc"
		o = append(o, 0xae, 0x56, 0x61, 0x6c, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Vals)))
		for zgensym_8df0a91a1f250219_123 := range z.Vals {
			// marshalGen.gPtr()

			if z.Vals[zgensym_8df0a91a1f250219_123] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				// honor the omitempty tags
				var empty [1]bool
				fieldsInUse := z.Vals[zgensym_8df0a91a1f250219_123].fieldsNotEmpty(empty[:])
				o = msgp.AppendMapHeader(o, fieldsInUse)

				if !empty[0] {
					// string "Tree_zid00_ptr"
					o = append(o, 0xae, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x70, 0x74, 0x72)
					// marshalGen.gPtr()

					if z.Vals[zgensym_8df0a91a1f250219_123].Tree == nil {
						o = msgp.AppendNil(o)
					} else {
						// hmm.. no en, no place to check en.DedupWriteIsDup(z)

						o, err = z.Vals[zgensym_8df0a91a1f250219_123].Tree.MarshalMsg(o) // not is.iface
						if err != nil {
							return
						}
					}
				}

			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KVStore) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *KVStore) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields135zgensym_8df0a91a1f250219_136 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields135zgensym_8df0a91a1f250219_136 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields135zgensym_8df0a91a1f250219_136, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft135zgensym_8df0a91a1f250219_136 := totalEncodedFields135zgensym_8df0a91a1f250219_136
	missingFieldsLeft135zgensym_8df0a91a1f250219_136 := maxFields135zgensym_8df0a91a1f250219_136 - totalEncodedFields135zgensym_8df0a91a1f250219_136

	var nextMiss135zgensym_8df0a91a1f250219_136 int32 = -1
	var found135zgensym_8df0a91a1f250219_136 [maxFields135zgensym_8df0a91a1f250219_136]bool
	var curField135zgensym_8df0a91a1f250219_136 string

doneWithStruct135zgensym_8df0a91a1f250219_136:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft135zgensym_8df0a91a1f250219_136 > 0 || missingFieldsLeft135zgensym_8df0a91a1f250219_136 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft135zgensym_8df0a91a1f250219_136, missingFieldsLeft135zgensym_8df0a91a1f250219_136, msgp.ShowFound(found135zgensym_8df0a91a1f250219_136[:]), unmarshalMsgFieldOrder135zgensym_8df0a91a1f250219_136)
		if encodedFieldsLeft135zgensym_8df0a91a1f250219_136 > 0 {
			encodedFieldsLeft135zgensym_8df0a91a1f250219_136--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField135zgensym_8df0a91a1f250219_136 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss135zgensym_8df0a91a1f250219_136 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss135zgensym_8df0a91a1f250219_136 = 0
			}
			for nextMiss135zgensym_8df0a91a1f250219_136 < maxFields135zgensym_8df0a91a1f250219_136 && (found135zgensym_8df0a91a1f250219_136[nextMiss135zgensym_8df0a91a1f250219_136] || unmarshalMsgFieldSkip135zgensym_8df0a91a1f250219_136[nextMiss135zgensym_8df0a91a1f250219_136]) {
				nextMiss135zgensym_8df0a91a1f250219_136++
			}
			if nextMiss135zgensym_8df0a91a1f250219_136 == maxFields135zgensym_8df0a91a1f250219_136 {
				// filled all the empty fields!
				break doneWithStruct135zgensym_8df0a91a1f250219_136
			}
			missingFieldsLeft135zgensym_8df0a91a1f250219_136--
			curField135zgensym_8df0a91a1f250219_136 = unmarshalMsgFieldOrder135zgensym_8df0a91a1f250219_136[nextMiss135zgensym_8df0a91a1f250219_136]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField135zgensym_8df0a91a1f250219_136)
		switch curField135zgensym_8df0a91a1f250219_136 {
		// -- templateUnmarshalMsg ends here --

		case "Keys_zid00_slc":
			found135zgensym_8df0a91a1f250219_136[0] = true
			if nbs.AlwaysNil {
				(z.Keys) = (z.Keys)[:0]
			} else {

				var zgensym_8df0a91a1f250219_137 uint32
				zgensym_8df0a91a1f250219_137, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Keys) >= int(zgensym_8df0a91a1f250219_137) {
					z.Keys = (z.Keys)[:zgensym_8df0a91a1f250219_137]
				} else {
					z.Keys = make([]Key, zgensym_8df0a91a1f250219_137)
				}
				for zgensym_8df0a91a1f250219_122 := range z.Keys {
					{
						var zgensym_8df0a91a1f250219_138 string
						zgensym_8df0a91a1f250219_138, bts, err = nbs.ReadStringBytes(bts)

						if err != nil {
							return
						}
						z.Keys[zgensym_8df0a91a1f250219_122] = Key(zgensym_8df0a91a1f250219_138)
					}
				}
			}
		case "Vals_zid01_slc":
			found135zgensym_8df0a91a1f250219_136[1] = true
			if nbs.AlwaysNil {
				(z.Vals) = (z.Vals)[:0]
			} else {

				var zgensym_8df0a91a1f250219_139 uint32
				zgensym_8df0a91a1f250219_139, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Vals) >= int(zgensym_8df0a91a1f250219_139) {
					z.Vals = (z.Vals)[:zgensym_8df0a91a1f250219_139]
				} else {
					z.Vals = make([]*ArtTable, zgensym_8df0a91a1f250219_139)
				}
				for zgensym_8df0a91a1f250219_123 := range z.Vals {
					// default gPtr logic.
					if nbs.PeekNil(bts) && z.Vals[zgensym_8df0a91a1f250219_123] == nil {
						// consume the nil
						bts, err = nbs.ReadNilBytes(bts)
						if err != nil {
							return
						}
					} else {
						// read as-if the wire has bytes, letting nbs take care of nils.

						if z.Vals[zgensym_8df0a91a1f250219_123] == nil {
							z.Vals[zgensym_8df0a91a1f250219_123] = new(ArtTable)
						}

						const maxFields140zgensym_8df0a91a1f250219_141 = 1

						// -- templateUnmarshalMsg starts here--
						var totalEncodedFields140zgensym_8df0a91a1f250219_141 uint32
						if !nbs.AlwaysNil {
							totalEncodedFields140zgensym_8df0a91a1f250219_141, bts, err = nbs.ReadMapHeaderBytes(bts)
							if err != nil {
								return
							}
						}
						encodedFieldsLeft140zgensym_8df0a91a1f250219_141 := totalEncodedFields140zgensym_8df0a91a1f250219_141
						missingFieldsLeft140zgensym_8df0a91a1f250219_141 := maxFields140zgensym_8df0a91a1f250219_141 - totalEncodedFields140zgensym_8df0a91a1f250219_141

						var nextMiss140zgensym_8df0a91a1f250219_141 int32 = -1
						var found140zgensym_8df0a91a1f250219_141 [maxFields140zgensym_8df0a91a1f250219_141]bool
						var curField140zgensym_8df0a91a1f250219_141 string

					doneWithStruct140zgensym_8df0a91a1f250219_141:
						// First fill all the encoded fields, then
						// treat the remaining, missing fields, as Nil.
						for encodedFieldsLeft140zgensym_8df0a91a1f250219_141 > 0 || missingFieldsLeft140zgensym_8df0a91a1f250219_141 > 0 {
							//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft140zgensym_8df0a91a1f250219_141, missingFieldsLeft140zgensym_8df0a91a1f250219_141, msgp.ShowFound(found140zgensym_8df0a91a1f250219_141[:]), unmarshalMsgFieldOrder140zgensym_8df0a91a1f250219_141)
							if encodedFieldsLeft140zgensym_8df0a91a1f250219_141 > 0 {
								encodedFieldsLeft140zgensym_8df0a91a1f250219_141--
								field, bts, err = nbs.ReadMapKeyZC(bts)
								if err != nil {
									return
								}
								curField140zgensym_8df0a91a1f250219_141 = msgp.UnsafeString(field)
							} else {
								//missing fields need handling
								if nextMiss140zgensym_8df0a91a1f250219_141 < 0 {
									// set bts to contain just mnil (0xc0)
									bts = nbs.PushAlwaysNil(bts)
									nextMiss140zgensym_8df0a91a1f250219_141 = 0
								}
								for nextMiss140zgensym_8df0a91a1f250219_141 < maxFields140zgensym_8df0a91a1f250219_141 && (found140zgensym_8df0a91a1f250219_141[nextMiss140zgensym_8df0a91a1f250219_141] || unmarshalMsgFieldSkip140zgensym_8df0a91a1f250219_141[nextMiss140zgensym_8df0a91a1f250219_141]) {
									nextMiss140zgensym_8df0a91a1f250219_141++
								}
								if nextMiss140zgensym_8df0a91a1f250219_141 == maxFields140zgensym_8df0a91a1f250219_141 {
									// filled all the empty fields!
									break doneWithStruct140zgensym_8df0a91a1f250219_141
								}
								missingFieldsLeft140zgensym_8df0a91a1f250219_141--
								curField140zgensym_8df0a91a1f250219_141 = unmarshalMsgFieldOrder140zgensym_8df0a91a1f250219_141[nextMiss140zgensym_8df0a91a1f250219_141]
							}
							//fmt.Printf("switching on curField: '%v'\n", curField140zgensym_8df0a91a1f250219_141)
							switch curField140zgensym_8df0a91a1f250219_141 {
							// -- templateUnmarshalMsg ends here --

							case "Tree_zid00_ptr":
								found140zgensym_8df0a91a1f250219_141[0] = true
								// unmarshalGen.gPtr(): we have a BaseElem.

								// unmarshalGen.gPtr(): we have an IDENT:

								if nbs.AlwaysNil {
									if z.Vals[zgensym_8df0a91a1f250219_123].Tree != nil {
										z.Vals[zgensym_8df0a91a1f250219_123].Tree.UnmarshalMsg(msgp.OnlyNilSlice)
									}
								} else {
									// not nbs.AlwaysNil
									if msgp.IsNil(bts) {
										bts = bts[1:]
										if nil != z.Vals[zgensym_8df0a91a1f250219_123].Tree {
											z.Vals[zgensym_8df0a91a1f250219_123].Tree.UnmarshalMsg(msgp.OnlyNilSlice)
										}
									} else {
										// not nbs.AlwaysNil and not IsNil(bts): have something to read

										if z.Vals[zgensym_8df0a91a1f250219_123].Tree == nil {
											z.Vals[zgensym_8df0a91a1f250219_123].Tree = new(art.Tree)
										}

										bts, err = z.Vals[zgensym_8df0a91a1f250219_123].Tree.UnmarshalMsg(bts)
										if err != nil {
											return
										}
									}
								}
							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									return
								}
							}
						}
						if nextMiss140zgensym_8df0a91a1f250219_141 != -1 {
							bts = nbs.PopAlwaysNil()
						}

					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss135zgensym_8df0a91a1f250219_136 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of KVStore
var unmarshalMsgFieldOrder135zgensym_8df0a91a1f250219_136 = []string{"Keys_zid00_slc", "Vals_zid01_slc"}

var unmarshalMsgFieldSkip135zgensym_8df0a91a1f250219_136 = []bool{false, false}

// fields of ArtTable
var unmarshalMsgFieldOrder140zgensym_8df0a91a1f250219_141 = []string{"Tree_zid00_ptr"}

var unmarshalMsgFieldSkip140zgensym_8df0a91a1f250219_141 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KVStore) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_122 := range z.Keys {
		s += msgp.StringPrefixSize + len(string(z.Keys[zgensym_8df0a91a1f250219_122]))
	}
	s += 15 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_123 := range z.Vals {
		if z.Vals[zgensym_8df0a91a1f250219_123] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 15
			if z.Vals[zgensym_8df0a91a1f250219_123].Tree == nil {
				s += msgp.NilSize
			} else {
				s += z.Vals[zgensym_8df0a91a1f250219_123].Tree.Msgsize()
			}
		}
	}
	return
}
func (z *KVStore) Gstring() (r string) {
	r = "&KVStore{\n"
	r += fmt.Sprintf("Keys: %v,\n", z.Keys)
	r += fmt.Sprintf("Vals: %v,\n", z.Vals)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Key) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8df0a91a1f250219_142 string
		zgensym_8df0a91a1f250219_142, err = dc.ReadString()
		(*z) = Key(zgensym_8df0a91a1f250219_142)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Key) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteString(string(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Key) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Key) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Key) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8df0a91a1f250219_143 string
		zgensym_8df0a91a1f250219_143, bts, err = nbs.ReadStringBytes(bts)

		if err != nil {
			return
		}
		(*z) = Key(zgensym_8df0a91a1f250219_143)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Key) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *LogEntrySpan) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields144zgensym_8df0a91a1f250219_145 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields144zgensym_8df0a91a1f250219_145 uint32
	totalEncodedFields144zgensym_8df0a91a1f250219_145, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft144zgensym_8df0a91a1f250219_145 := totalEncodedFields144zgensym_8df0a91a1f250219_145
	missingFieldsLeft144zgensym_8df0a91a1f250219_145 := maxFields144zgensym_8df0a91a1f250219_145 - totalEncodedFields144zgensym_8df0a91a1f250219_145

	var nextMiss144zgensym_8df0a91a1f250219_145 int32 = -1
	var found144zgensym_8df0a91a1f250219_145 [maxFields144zgensym_8df0a91a1f250219_145]bool
	var curField144zgensym_8df0a91a1f250219_145 string

doneWithStruct144zgensym_8df0a91a1f250219_145:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft144zgensym_8df0a91a1f250219_145 > 0 || missingFieldsLeft144zgensym_8df0a91a1f250219_145 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft144zgensym_8df0a91a1f250219_145, missingFieldsLeft144zgensym_8df0a91a1f250219_145, msgp.ShowFound(found144zgensym_8df0a91a1f250219_145[:]), decodeMsgFieldOrder144zgensym_8df0a91a1f250219_145)
		if encodedFieldsLeft144zgensym_8df0a91a1f250219_145 > 0 {
			encodedFieldsLeft144zgensym_8df0a91a1f250219_145--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField144zgensym_8df0a91a1f250219_145 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss144zgensym_8df0a91a1f250219_145 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss144zgensym_8df0a91a1f250219_145 = 0
			}
			for nextMiss144zgensym_8df0a91a1f250219_145 < maxFields144zgensym_8df0a91a1f250219_145 && (found144zgensym_8df0a91a1f250219_145[nextMiss144zgensym_8df0a91a1f250219_145] || decodeMsgFieldSkip144zgensym_8df0a91a1f250219_145[nextMiss144zgensym_8df0a91a1f250219_145]) {
				nextMiss144zgensym_8df0a91a1f250219_145++
			}
			if nextMiss144zgensym_8df0a91a1f250219_145 == maxFields144zgensym_8df0a91a1f250219_145 {
				// filled all the empty fields!
				break doneWithStruct144zgensym_8df0a91a1f250219_145
			}
			missingFieldsLeft144zgensym_8df0a91a1f250219_145--
			curField144zgensym_8df0a91a1f250219_145 = decodeMsgFieldOrder144zgensym_8df0a91a1f250219_145[nextMiss144zgensym_8df0a91a1f250219_145]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField144zgensym_8df0a91a1f250219_145)
		switch curField144zgensym_8df0a91a1f250219_145 {
		// -- templateDecodeMsg ends here --

		case "Beg_zid00_i64":
			found144zgensym_8df0a91a1f250219_145[0] = true
			z.Beg, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Endx_zid01_i64":
			found144zgensym_8df0a91a1f250219_145[1] = true
			z.Endx, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss144zgensym_8df0a91a1f250219_145 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of LogEntrySpan
var decodeMsgFieldOrder144zgensym_8df0a91a1f250219_145 = []string{"Beg_zid00_i64", "Endx_zid01_i64"}

var decodeMsgFieldSkip144zgensym_8df0a91a1f250219_145 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *LogEntrySpan) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Beg == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Endx == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *LogEntrySpan) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_146 [2]bool
	fieldsInUse_zgensym_8df0a91a1f250219_147 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_146[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_147 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'LogEntrySpan'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x70, 0x61, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_146[0] {
		// write "Beg_zid00_i64"
		err = en.Append(0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Beg)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_146[1] {
		// write "Endx_zid01_i64"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Endx)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LogEntrySpan) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Beg_zid00_i64"
		o = append(o, 0xad, 0x42, 0x65, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Beg)
	}

	if !empty[1] {
		// string "Endx_zid01_i64"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Endx)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogEntrySpan) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *LogEntrySpan) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields148zgensym_8df0a91a1f250219_149 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields148zgensym_8df0a91a1f250219_149 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields148zgensym_8df0a91a1f250219_149, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft148zgensym_8df0a91a1f250219_149 := totalEncodedFields148zgensym_8df0a91a1f250219_149
	missingFieldsLeft148zgensym_8df0a91a1f250219_149 := maxFields148zgensym_8df0a91a1f250219_149 - totalEncodedFields148zgensym_8df0a91a1f250219_149

	var nextMiss148zgensym_8df0a91a1f250219_149 int32 = -1
	var found148zgensym_8df0a91a1f250219_149 [maxFields148zgensym_8df0a91a1f250219_149]bool
	var curField148zgensym_8df0a91a1f250219_149 string

doneWithStruct148zgensym_8df0a91a1f250219_149:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft148zgensym_8df0a91a1f250219_149 > 0 || missingFieldsLeft148zgensym_8df0a91a1f250219_149 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft148zgensym_8df0a91a1f250219_149, missingFieldsLeft148zgensym_8df0a91a1f250219_149, msgp.ShowFound(found148zgensym_8df0a91a1f250219_149[:]), unmarshalMsgFieldOrder148zgensym_8df0a91a1f250219_149)
		if encodedFieldsLeft148zgensym_8df0a91a1f250219_149 > 0 {
			encodedFieldsLeft148zgensym_8df0a91a1f250219_149--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField148zgensym_8df0a91a1f250219_149 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss148zgensym_8df0a91a1f250219_149 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss148zgensym_8df0a91a1f250219_149 = 0
			}
			for nextMiss148zgensym_8df0a91a1f250219_149 < maxFields148zgensym_8df0a91a1f250219_149 && (found148zgensym_8df0a91a1f250219_149[nextMiss148zgensym_8df0a91a1f250219_149] || unmarshalMsgFieldSkip148zgensym_8df0a91a1f250219_149[nextMiss148zgensym_8df0a91a1f250219_149]) {
				nextMiss148zgensym_8df0a91a1f250219_149++
			}
			if nextMiss148zgensym_8df0a91a1f250219_149 == maxFields148zgensym_8df0a91a1f250219_149 {
				// filled all the empty fields!
				break doneWithStruct148zgensym_8df0a91a1f250219_149
			}
			missingFieldsLeft148zgensym_8df0a91a1f250219_149--
			curField148zgensym_8df0a91a1f250219_149 = unmarshalMsgFieldOrder148zgensym_8df0a91a1f250219_149[nextMiss148zgensym_8df0a91a1f250219_149]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField148zgensym_8df0a91a1f250219_149)
		switch curField148zgensym_8df0a91a1f250219_149 {
		// -- templateUnmarshalMsg ends here --

		case "Beg_zid00_i64":
			found148zgensym_8df0a91a1f250219_149[0] = true
			z.Beg, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Endx_zid01_i64":
			found148zgensym_8df0a91a1f250219_149[1] = true
			z.Endx, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss148zgensym_8df0a91a1f250219_149 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of LogEntrySpan
var unmarshalMsgFieldOrder148zgensym_8df0a91a1f250219_149 = []string{"Beg_zid00_i64", "Endx_zid01_i64"}

var unmarshalMsgFieldSkip148zgensym_8df0a91a1f250219_149 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LogEntrySpan) Msgsize() (s int) {
	s = 1 + 14 + msgp.Int64Size + 15 + msgp.Int64Size
	return
}
func (z *LogEntrySpan) Gstring() (r string) {
	r = "&LogEntrySpan{\n"
	r += fmt.Sprintf(" Beg: %v,\n", z.Beg)
	r += fmt.Sprintf("Endx: %v,\n", z.Endx)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *MemberConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields152zgensym_8df0a91a1f250219_153 = 17

	// -- templateDecodeMsg starts here--
	var totalEncodedFields152zgensym_8df0a91a1f250219_153 uint32
	totalEncodedFields152zgensym_8df0a91a1f250219_153, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft152zgensym_8df0a91a1f250219_153 := totalEncodedFields152zgensym_8df0a91a1f250219_153
	missingFieldsLeft152zgensym_8df0a91a1f250219_153 := maxFields152zgensym_8df0a91a1f250219_153 - totalEncodedFields152zgensym_8df0a91a1f250219_153

	var nextMiss152zgensym_8df0a91a1f250219_153 int32 = -1
	var found152zgensym_8df0a91a1f250219_153 [maxFields152zgensym_8df0a91a1f250219_153]bool
	var curField152zgensym_8df0a91a1f250219_153 string

doneWithStruct152zgensym_8df0a91a1f250219_153:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft152zgensym_8df0a91a1f250219_153 > 0 || missingFieldsLeft152zgensym_8df0a91a1f250219_153 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft152zgensym_8df0a91a1f250219_153, missingFieldsLeft152zgensym_8df0a91a1f250219_153, msgp.ShowFound(found152zgensym_8df0a91a1f250219_153[:]), decodeMsgFieldOrder152zgensym_8df0a91a1f250219_153)
		if encodedFieldsLeft152zgensym_8df0a91a1f250219_153 > 0 {
			encodedFieldsLeft152zgensym_8df0a91a1f250219_153--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField152zgensym_8df0a91a1f250219_153 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss152zgensym_8df0a91a1f250219_153 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss152zgensym_8df0a91a1f250219_153 = 0
			}
			for nextMiss152zgensym_8df0a91a1f250219_153 < maxFields152zgensym_8df0a91a1f250219_153 && (found152zgensym_8df0a91a1f250219_153[nextMiss152zgensym_8df0a91a1f250219_153] || decodeMsgFieldSkip152zgensym_8df0a91a1f250219_153[nextMiss152zgensym_8df0a91a1f250219_153]) {
				nextMiss152zgensym_8df0a91a1f250219_153++
			}
			if nextMiss152zgensym_8df0a91a1f250219_153 == maxFields152zgensym_8df0a91a1f250219_153 {
				// filled all the empty fields!
				break doneWithStruct152zgensym_8df0a91a1f250219_153
			}
			missingFieldsLeft152zgensym_8df0a91a1f250219_153--
			curField152zgensym_8df0a91a1f250219_153 = decodeMsgFieldOrder152zgensym_8df0a91a1f250219_153[nextMiss152zgensym_8df0a91a1f250219_153]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField152zgensym_8df0a91a1f250219_153)
		switch curField152zgensym_8df0a91a1f250219_153 {
		// -- templateDecodeMsg ends here --

		case "SerzPeerDetails_zid00_slc":
			found152zgensym_8df0a91a1f250219_153[0] = true
			var zgensym_8df0a91a1f250219_154 uint32
			zgensym_8df0a91a1f250219_154, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.SerzPeerDetails) >= int(zgensym_8df0a91a1f250219_154) {
				z.SerzPeerDetails = (z.SerzPeerDetails)[:zgensym_8df0a91a1f250219_154]
			} else {
				z.SerzPeerDetails = make([]*PeerDetail, zgensym_8df0a91a1f250219_154)
			}
			for zgensym_8df0a91a1f250219_150 := range z.SerzPeerDetails {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] != nil {
						dc.PushAlwaysNil()
						err = z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] == nil {
						z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] = new(PeerDetail)
					}
					dc.DedupIndexEachPtr(z.SerzPeerDetails[zgensym_8df0a91a1f250219_150])

					err = z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "RaftLogIndex_zid01_i64":
			found152zgensym_8df0a91a1f250219_153[1] = true
			z.RaftLogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "BootCount_zid02_int":
			found152zgensym_8df0a91a1f250219_153[2] = true
			z.BootCount, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "OriginPeerID_zid03_str":
			found152zgensym_8df0a91a1f250219_153[3] = true
			z.OriginPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "OriginPeerName_zid04_str":
			found152zgensym_8df0a91a1f250219_153[4] = true
			z.OriginPeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "OriginPeerServiceName_zid05_str":
			found152zgensym_8df0a91a1f250219_153[5] = true
			z.OriginPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "OriginPeerServiceNameVersion_zid06_str":
			found152zgensym_8df0a91a1f250219_153[6] = true
			z.OriginPeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CreateTm_zid07_tim":
			found152zgensym_8df0a91a1f250219_153[7] = true
			z.CreateTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "CreateWho_zid08_str":
			found152zgensym_8df0a91a1f250219_153[8] = true
			z.CreateWho, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Prov_zid09_slc":
			found152zgensym_8df0a91a1f250219_153[9] = true
			var zgensym_8df0a91a1f250219_155 uint32
			zgensym_8df0a91a1f250219_155, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Prov) >= int(zgensym_8df0a91a1f250219_155) {
				z.Prov = (z.Prov)[:zgensym_8df0a91a1f250219_155]
			} else {
				z.Prov = make([]string, zgensym_8df0a91a1f250219_155)
			}
			for zgensym_8df0a91a1f250219_151 := range z.Prov {
				z.Prov[zgensym_8df0a91a1f250219_151], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "ConfigVersion_zid10_i64":
			found152zgensym_8df0a91a1f250219_153[10] = true
			z.ConfigVersion, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "ConfigTerm_zid11_i64":
			found152zgensym_8df0a91a1f250219_153[11] = true
			z.ConfigTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Shim_zid12_i64":
			found152zgensym_8df0a91a1f250219_153[12] = true
			z.Shim, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "IsCommitted_zid13_boo":
			found152zgensym_8df0a91a1f250219_153[13] = true
			z.IsCommitted, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "CommitIndex_zid14_i64":
			found152zgensym_8df0a91a1f250219_153[14] = true
			z.CommitIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CommitIndexEntryTerm_zid15_i64":
			found152zgensym_8df0a91a1f250219_153[15] = true
			z.CommitIndexEntryTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss152zgensym_8df0a91a1f250219_153 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MemberConfig
var decodeMsgFieldOrder152zgensym_8df0a91a1f250219_153 = []string{"SerzPeerDetails_zid00_slc", "RaftLogIndex_zid01_i64", "BootCount_zid02_int", "OriginPeerID_zid03_str", "OriginPeerName_zid04_str", "OriginPeerServiceName_zid05_str", "OriginPeerServiceNameVersion_zid06_str", "CreateTm_zid07_tim", "CreateWho_zid08_str", "Prov_zid09_slc", "ConfigVersion_zid10_i64", "ConfigTerm_zid11_i64", "Shim_zid12_i64", "IsCommitted_zid13_boo", "CommitIndex_zid14_i64", "CommitIndexEntryTerm_zid15_i64", ""}

var decodeMsgFieldSkip152zgensym_8df0a91a1f250219_153 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *MemberConfig) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 16
	}
	var fieldsInUse uint32 = 16
	isempty[0] = (len(z.SerzPeerDetails) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.RaftLogIndex == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.BootCount == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.OriginPeerID) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.OriginPeerName) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.OriginPeerServiceName) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.OriginPeerServiceNameVersion) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.CreateTm.IsZero()) // time.Time, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.CreateWho) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.Prov) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.ConfigVersion == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.ConfigTerm == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.Shim == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (!z.IsCommitted) // bool, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.CommitIndex == 0) // number, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (z.CommitIndexEntryTerm == 0) // number, omitempty
	if isempty[15] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *MemberConfig) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_156 [17]bool
	fieldsInUse_zgensym_8df0a91a1f250219_157 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_156[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_157 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'MemberConfig'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_156[0] {
		// write "SerzPeerDetails_zid00_slc"
		err = en.Append(0xb9, 0x53, 0x65, 0x72, 0x7a, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.SerzPeerDetails)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_150 := range z.SerzPeerDetails {
			// gPtr.encodeGen():

			if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[1] {
		// write "RaftLogIndex_zid01_i64"
		err = en.Append(0xb6, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.RaftLogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[2] {
		// write "BootCount_zid02_int"
		err = en.Append(0xb3, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.BootCount)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[3] {
		// write "OriginPeerID_zid03_str"
		err = en.Append(0xb6, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.OriginPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[4] {
		// write "OriginPeerName_zid04_str"
		err = en.Append(0xb8, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.OriginPeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[5] {
		// write "OriginPeerServiceName_zid05_str"
		err = en.Append(0xbf, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.OriginPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[6] {
		// write "OriginPeerServiceNameVersion_zid06_str"
		err = en.Append(0xd9, 0x26, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.OriginPeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[7] {
		// write "CreateTm_zid07_tim"
		err = en.Append(0xb2, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.CreateTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[8] {
		// write "CreateWho_zid08_str"
		err = en.Append(0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CreateWho)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[9] {
		// write "Prov_zid09_slc"
		err = en.Append(0xae, 0x50, 0x72, 0x6f, 0x76, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Prov)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_151 := range z.Prov {
			err = en.WriteString(z.Prov[zgensym_8df0a91a1f250219_151])
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[10] {
		// write "ConfigVersion_zid10_i64"
		err = en.Append(0xb7, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ConfigVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[11] {
		// write "ConfigTerm_zid11_i64"
		err = en.Append(0xb4, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ConfigTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[12] {
		// write "Shim_zid12_i64"
		err = en.Append(0xae, 0x53, 0x68, 0x69, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Shim)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[13] {
		// write "IsCommitted_zid13_boo"
		err = en.Append(0xb5, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsCommitted)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[14] {
		// write "CommitIndex_zid14_i64"
		err = en.Append(0xb5, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CommitIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_156[15] {
		// write "CommitIndexEntryTerm_zid15_i64"
		err = en.Append(0xbe, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CommitIndexEntryTerm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MemberConfig) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [17]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SerzPeerDetails_zid00_slc"
		o = append(o, 0xb9, 0x53, 0x65, 0x72, 0x7a, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.SerzPeerDetails)))
		for zgensym_8df0a91a1f250219_150 := range z.SerzPeerDetails {
			// marshalGen.gPtr()

			if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[1] {
		// string "RaftLogIndex_zid01_i64"
		o = append(o, 0xb6, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.RaftLogIndex)
	}

	if !empty[2] {
		// string "BootCount_zid02_int"
		o = append(o, 0xb3, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.BootCount)
	}

	if !empty[3] {
		// string "OriginPeerID_zid03_str"
		o = append(o, 0xb6, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.OriginPeerID)
	}

	if !empty[4] {
		// string "OriginPeerName_zid04_str"
		o = append(o, 0xb8, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.OriginPeerName)
	}

	if !empty[5] {
		// string "OriginPeerServiceName_zid05_str"
		o = append(o, 0xbf, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.OriginPeerServiceName)
	}

	if !empty[6] {
		// string "OriginPeerServiceNameVersion_zid06_str"
		o = append(o, 0xd9, 0x26, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.OriginPeerServiceNameVersion)
	}

	if !empty[7] {
		// string "CreateTm_zid07_tim"
		o = append(o, 0xb2, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.CreateTm)
	}

	if !empty[8] {
		// string "CreateWho_zid08_str"
		o = append(o, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CreateWho)
	}

	if !empty[9] {
		// string "Prov_zid09_slc"
		o = append(o, 0xae, 0x50, 0x72, 0x6f, 0x76, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Prov)))
		for zgensym_8df0a91a1f250219_151 := range z.Prov {
			o = msgp.AppendString(o, z.Prov[zgensym_8df0a91a1f250219_151])
		}
	}

	if !empty[10] {
		// string "ConfigVersion_zid10_i64"
		o = append(o, 0xb7, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ConfigVersion)
	}

	if !empty[11] {
		// string "ConfigTerm_zid11_i64"
		o = append(o, 0xb4, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ConfigTerm)
	}

	if !empty[12] {
		// string "Shim_zid12_i64"
		o = append(o, 0xae, 0x53, 0x68, 0x69, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Shim)
	}

	if !empty[13] {
		// string "IsCommitted_zid13_boo"
		o = append(o, 0xb5, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsCommitted)
	}

	if !empty[14] {
		// string "CommitIndex_zid14_i64"
		o = append(o, 0xb5, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CommitIndex)
	}

	if !empty[15] {
		// string "CommitIndexEntryTerm_zid15_i64"
		o = append(o, 0xbe, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CommitIndexEntryTerm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MemberConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *MemberConfig) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields158zgensym_8df0a91a1f250219_159 = 17

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields158zgensym_8df0a91a1f250219_159 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields158zgensym_8df0a91a1f250219_159, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft158zgensym_8df0a91a1f250219_159 := totalEncodedFields158zgensym_8df0a91a1f250219_159
	missingFieldsLeft158zgensym_8df0a91a1f250219_159 := maxFields158zgensym_8df0a91a1f250219_159 - totalEncodedFields158zgensym_8df0a91a1f250219_159

	var nextMiss158zgensym_8df0a91a1f250219_159 int32 = -1
	var found158zgensym_8df0a91a1f250219_159 [maxFields158zgensym_8df0a91a1f250219_159]bool
	var curField158zgensym_8df0a91a1f250219_159 string

doneWithStruct158zgensym_8df0a91a1f250219_159:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft158zgensym_8df0a91a1f250219_159 > 0 || missingFieldsLeft158zgensym_8df0a91a1f250219_159 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft158zgensym_8df0a91a1f250219_159, missingFieldsLeft158zgensym_8df0a91a1f250219_159, msgp.ShowFound(found158zgensym_8df0a91a1f250219_159[:]), unmarshalMsgFieldOrder158zgensym_8df0a91a1f250219_159)
		if encodedFieldsLeft158zgensym_8df0a91a1f250219_159 > 0 {
			encodedFieldsLeft158zgensym_8df0a91a1f250219_159--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField158zgensym_8df0a91a1f250219_159 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss158zgensym_8df0a91a1f250219_159 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss158zgensym_8df0a91a1f250219_159 = 0
			}
			for nextMiss158zgensym_8df0a91a1f250219_159 < maxFields158zgensym_8df0a91a1f250219_159 && (found158zgensym_8df0a91a1f250219_159[nextMiss158zgensym_8df0a91a1f250219_159] || unmarshalMsgFieldSkip158zgensym_8df0a91a1f250219_159[nextMiss158zgensym_8df0a91a1f250219_159]) {
				nextMiss158zgensym_8df0a91a1f250219_159++
			}
			if nextMiss158zgensym_8df0a91a1f250219_159 == maxFields158zgensym_8df0a91a1f250219_159 {
				// filled all the empty fields!
				break doneWithStruct158zgensym_8df0a91a1f250219_159
			}
			missingFieldsLeft158zgensym_8df0a91a1f250219_159--
			curField158zgensym_8df0a91a1f250219_159 = unmarshalMsgFieldOrder158zgensym_8df0a91a1f250219_159[nextMiss158zgensym_8df0a91a1f250219_159]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField158zgensym_8df0a91a1f250219_159)
		switch curField158zgensym_8df0a91a1f250219_159 {
		// -- templateUnmarshalMsg ends here --

		case "SerzPeerDetails_zid00_slc":
			found158zgensym_8df0a91a1f250219_159[0] = true
			if nbs.AlwaysNil {
				(z.SerzPeerDetails) = (z.SerzPeerDetails)[:0]
			} else {

				var zgensym_8df0a91a1f250219_160 uint32
				zgensym_8df0a91a1f250219_160, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.SerzPeerDetails) >= int(zgensym_8df0a91a1f250219_160) {
					z.SerzPeerDetails = (z.SerzPeerDetails)[:zgensym_8df0a91a1f250219_160]
				} else {
					z.SerzPeerDetails = make([]*PeerDetail, zgensym_8df0a91a1f250219_160)
				}
				for zgensym_8df0a91a1f250219_150 := range z.SerzPeerDetails {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] != nil {
							z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] {
								z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] == nil {
								z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] = new(PeerDetail)
							}

							bts, err = z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "RaftLogIndex_zid01_i64":
			found158zgensym_8df0a91a1f250219_159[1] = true
			z.RaftLogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "BootCount_zid02_int":
			found158zgensym_8df0a91a1f250219_159[2] = true
			z.BootCount, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "OriginPeerID_zid03_str":
			found158zgensym_8df0a91a1f250219_159[3] = true
			z.OriginPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "OriginPeerName_zid04_str":
			found158zgensym_8df0a91a1f250219_159[4] = true
			z.OriginPeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "OriginPeerServiceName_zid05_str":
			found158zgensym_8df0a91a1f250219_159[5] = true
			z.OriginPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "OriginPeerServiceNameVersion_zid06_str":
			found158zgensym_8df0a91a1f250219_159[6] = true
			z.OriginPeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CreateTm_zid07_tim":
			found158zgensym_8df0a91a1f250219_159[7] = true
			z.CreateTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "CreateWho_zid08_str":
			found158zgensym_8df0a91a1f250219_159[8] = true
			z.CreateWho, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Prov_zid09_slc":
			found158zgensym_8df0a91a1f250219_159[9] = true
			if nbs.AlwaysNil {
				(z.Prov) = (z.Prov)[:0]
			} else {

				var zgensym_8df0a91a1f250219_161 uint32
				zgensym_8df0a91a1f250219_161, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Prov) >= int(zgensym_8df0a91a1f250219_161) {
					z.Prov = (z.Prov)[:zgensym_8df0a91a1f250219_161]
				} else {
					z.Prov = make([]string, zgensym_8df0a91a1f250219_161)
				}
				for zgensym_8df0a91a1f250219_151 := range z.Prov {
					z.Prov[zgensym_8df0a91a1f250219_151], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		case "ConfigVersion_zid10_i64":
			found158zgensym_8df0a91a1f250219_159[10] = true
			z.ConfigVersion, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "ConfigTerm_zid11_i64":
			found158zgensym_8df0a91a1f250219_159[11] = true
			z.ConfigTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Shim_zid12_i64":
			found158zgensym_8df0a91a1f250219_159[12] = true
			z.Shim, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "IsCommitted_zid13_boo":
			found158zgensym_8df0a91a1f250219_159[13] = true
			z.IsCommitted, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "CommitIndex_zid14_i64":
			found158zgensym_8df0a91a1f250219_159[14] = true
			z.CommitIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CommitIndexEntryTerm_zid15_i64":
			found158zgensym_8df0a91a1f250219_159[15] = true
			z.CommitIndexEntryTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss158zgensym_8df0a91a1f250219_159 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MemberConfig
var unmarshalMsgFieldOrder158zgensym_8df0a91a1f250219_159 = []string{"SerzPeerDetails_zid00_slc", "RaftLogIndex_zid01_i64", "BootCount_zid02_int", "OriginPeerID_zid03_str", "OriginPeerName_zid04_str", "OriginPeerServiceName_zid05_str", "OriginPeerServiceNameVersion_zid06_str", "CreateTm_zid07_tim", "CreateWho_zid08_str", "Prov_zid09_slc", "ConfigVersion_zid10_i64", "ConfigTerm_zid11_i64", "Shim_zid12_i64", "IsCommitted_zid13_boo", "CommitIndex_zid14_i64", "CommitIndexEntryTerm_zid15_i64", ""}

var unmarshalMsgFieldSkip158zgensym_8df0a91a1f250219_159 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MemberConfig) Msgsize() (s int) {
	s = 3 + 26 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_150 := range z.SerzPeerDetails {
		if z.SerzPeerDetails[zgensym_8df0a91a1f250219_150] == nil {
			s += msgp.NilSize
		} else {
			s += z.SerzPeerDetails[zgensym_8df0a91a1f250219_150].Msgsize()
		}
	}
	s += 23 + msgp.Int64Size + 20 + msgp.IntSize + 23 + msgp.StringPrefixSize + len(z.OriginPeerID) + 25 + msgp.StringPrefixSize + len(z.OriginPeerName) + 32 + msgp.StringPrefixSize + len(z.OriginPeerServiceName) + 40 + msgp.StringPrefixSize + len(z.OriginPeerServiceNameVersion) + 19 + msgp.TimeSize + 20 + msgp.StringPrefixSize + len(z.CreateWho) + 15 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_151 := range z.Prov {
		s += msgp.StringPrefixSize + len(z.Prov[zgensym_8df0a91a1f250219_151])
	}
	s += 24 + msgp.Int64Size + 21 + msgp.Int64Size + 15 + msgp.Int64Size + 22 + msgp.BoolSize + 22 + msgp.Int64Size + 31 + msgp.Int64Size
	return
}
func (z *MemberConfig) Gstring() (r string) {
	r = "&MemberConfig{\n"
	r += fmt.Sprintf("             SerzPeerDetails: %v,\n", z.SerzPeerDetails)
	r += fmt.Sprintf("                RaftLogIndex: %v,\n", z.RaftLogIndex)
	r += fmt.Sprintf("                   BootCount: %v,\n", z.BootCount)
	r += fmt.Sprintf("                OriginPeerID: \"%v\",\n", z.OriginPeerID)
	r += fmt.Sprintf("              OriginPeerName: \"%v\",\n", z.OriginPeerName)
	r += fmt.Sprintf("       OriginPeerServiceName: \"%v\",\n", z.OriginPeerServiceName)
	r += fmt.Sprintf("OriginPeerServiceNameVersion: \"%v\",\n", z.OriginPeerServiceNameVersion)
	r += fmt.Sprintf("                    CreateTm: %v,\n", z.CreateTm)
	r += fmt.Sprintf("                   CreateWho: \"%v\",\n", z.CreateWho)
	r += fmt.Sprintf("                        Prov: %v,\n", z.Prov)
	r += fmt.Sprintf("               ConfigVersion: %v,\n", z.ConfigVersion)
	r += fmt.Sprintf("                  ConfigTerm: %v,\n", z.ConfigTerm)
	r += fmt.Sprintf("                        Shim: %v,\n", z.Shim)
	r += fmt.Sprintf("                 IsCommitted: %v,\n", z.IsCommitted)
	r += fmt.Sprintf("                 CommitIndex: %v,\n", z.CommitIndex)
	r += fmt.Sprintf("        CommitIndexEntryTerm: %v,\n", z.CommitIndexEntryTerm)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *PeerDetail) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields162zgensym_8df0a91a1f250219_163 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields162zgensym_8df0a91a1f250219_163 uint32
	totalEncodedFields162zgensym_8df0a91a1f250219_163, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft162zgensym_8df0a91a1f250219_163 := totalEncodedFields162zgensym_8df0a91a1f250219_163
	missingFieldsLeft162zgensym_8df0a91a1f250219_163 := maxFields162zgensym_8df0a91a1f250219_163 - totalEncodedFields162zgensym_8df0a91a1f250219_163

	var nextMiss162zgensym_8df0a91a1f250219_163 int32 = -1
	var found162zgensym_8df0a91a1f250219_163 [maxFields162zgensym_8df0a91a1f250219_163]bool
	var curField162zgensym_8df0a91a1f250219_163 string

doneWithStruct162zgensym_8df0a91a1f250219_163:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft162zgensym_8df0a91a1f250219_163 > 0 || missingFieldsLeft162zgensym_8df0a91a1f250219_163 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft162zgensym_8df0a91a1f250219_163, missingFieldsLeft162zgensym_8df0a91a1f250219_163, msgp.ShowFound(found162zgensym_8df0a91a1f250219_163[:]), decodeMsgFieldOrder162zgensym_8df0a91a1f250219_163)
		if encodedFieldsLeft162zgensym_8df0a91a1f250219_163 > 0 {
			encodedFieldsLeft162zgensym_8df0a91a1f250219_163--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField162zgensym_8df0a91a1f250219_163 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss162zgensym_8df0a91a1f250219_163 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss162zgensym_8df0a91a1f250219_163 = 0
			}
			for nextMiss162zgensym_8df0a91a1f250219_163 < maxFields162zgensym_8df0a91a1f250219_163 && (found162zgensym_8df0a91a1f250219_163[nextMiss162zgensym_8df0a91a1f250219_163] || decodeMsgFieldSkip162zgensym_8df0a91a1f250219_163[nextMiss162zgensym_8df0a91a1f250219_163]) {
				nextMiss162zgensym_8df0a91a1f250219_163++
			}
			if nextMiss162zgensym_8df0a91a1f250219_163 == maxFields162zgensym_8df0a91a1f250219_163 {
				// filled all the empty fields!
				break doneWithStruct162zgensym_8df0a91a1f250219_163
			}
			missingFieldsLeft162zgensym_8df0a91a1f250219_163--
			curField162zgensym_8df0a91a1f250219_163 = decodeMsgFieldOrder162zgensym_8df0a91a1f250219_163[nextMiss162zgensym_8df0a91a1f250219_163]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField162zgensym_8df0a91a1f250219_163)
		switch curField162zgensym_8df0a91a1f250219_163 {
		// -- templateDecodeMsg ends here --

		case "Name_zid00_str":
			found162zgensym_8df0a91a1f250219_163[0] = true
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "URL_zid01_str":
			found162zgensym_8df0a91a1f250219_163[1] = true
			z.URL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerID_zid02_str":
			found162zgensym_8df0a91a1f250219_163[2] = true
			z.PeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Addr_zid03_str":
			found162zgensym_8df0a91a1f250219_163[3] = true
			z.Addr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceName_zid04_str":
			found162zgensym_8df0a91a1f250219_163[4] = true
			z.PeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid05_str":
			found162zgensym_8df0a91a1f250219_163[5] = true
			z.PeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "NonVoting_zid06_boo":
			found162zgensym_8df0a91a1f250219_163[6] = true
			z.NonVoting, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss162zgensym_8df0a91a1f250219_163 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PeerDetail
var decodeMsgFieldOrder162zgensym_8df0a91a1f250219_163 = []string{"Name_zid00_str", "URL_zid01_str", "PeerID_zid02_str", "Addr_zid03_str", "PeerServiceName_zid04_str", "PeerServiceNameVersion_zid05_str", "NonVoting_zid06_boo"}

var decodeMsgFieldSkip162zgensym_8df0a91a1f250219_163 = []bool{false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *PeerDetail) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (len(z.Name) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.URL) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.PeerID) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Addr) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.PeerServiceName) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.PeerServiceNameVersion) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (!z.NonVoting) // bool, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *PeerDetail) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_164 [7]bool
	fieldsInUse_zgensym_8df0a91a1f250219_165 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_164[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_165 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'PeerDetail'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_164[0] {
		// write "Name_zid00_str"
		err = en.Append(0xae, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Name)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_164[1] {
		// write "URL_zid01_str"
		err = en.Append(0xad, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.URL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_164[2] {
		// write "PeerID_zid02_str"
		err = en.Append(0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_164[3] {
		// write "Addr_zid03_str"
		err = en.Append(0xae, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Addr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_164[4] {
		// write "PeerServiceName_zid04_str"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_164[5] {
		// write "PeerServiceNameVersion_zid05_str"
		err = en.Append(0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_164[6] {
		// write "NonVoting_zid06_boo"
		err = en.Append(0xb3, 0x4e, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.NonVoting)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PeerDetail) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Name_zid00_str"
		o = append(o, 0xae, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Name)
	}

	if !empty[1] {
		// string "URL_zid01_str"
		o = append(o, 0xad, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.URL)
	}

	if !empty[2] {
		// string "PeerID_zid02_str"
		o = append(o, 0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerID)
	}

	if !empty[3] {
		// string "Addr_zid03_str"
		o = append(o, 0xae, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Addr)
	}

	if !empty[4] {
		// string "PeerServiceName_zid04_str"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceName)
	}

	if !empty[5] {
		// string "PeerServiceNameVersion_zid05_str"
		o = append(o, 0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceNameVersion)
	}

	if !empty[6] {
		// string "NonVoting_zid06_boo"
		o = append(o, 0xb3, 0x4e, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.NonVoting)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PeerDetail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *PeerDetail) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields166zgensym_8df0a91a1f250219_167 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields166zgensym_8df0a91a1f250219_167 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields166zgensym_8df0a91a1f250219_167, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft166zgensym_8df0a91a1f250219_167 := totalEncodedFields166zgensym_8df0a91a1f250219_167
	missingFieldsLeft166zgensym_8df0a91a1f250219_167 := maxFields166zgensym_8df0a91a1f250219_167 - totalEncodedFields166zgensym_8df0a91a1f250219_167

	var nextMiss166zgensym_8df0a91a1f250219_167 int32 = -1
	var found166zgensym_8df0a91a1f250219_167 [maxFields166zgensym_8df0a91a1f250219_167]bool
	var curField166zgensym_8df0a91a1f250219_167 string

doneWithStruct166zgensym_8df0a91a1f250219_167:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft166zgensym_8df0a91a1f250219_167 > 0 || missingFieldsLeft166zgensym_8df0a91a1f250219_167 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft166zgensym_8df0a91a1f250219_167, missingFieldsLeft166zgensym_8df0a91a1f250219_167, msgp.ShowFound(found166zgensym_8df0a91a1f250219_167[:]), unmarshalMsgFieldOrder166zgensym_8df0a91a1f250219_167)
		if encodedFieldsLeft166zgensym_8df0a91a1f250219_167 > 0 {
			encodedFieldsLeft166zgensym_8df0a91a1f250219_167--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField166zgensym_8df0a91a1f250219_167 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss166zgensym_8df0a91a1f250219_167 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss166zgensym_8df0a91a1f250219_167 = 0
			}
			for nextMiss166zgensym_8df0a91a1f250219_167 < maxFields166zgensym_8df0a91a1f250219_167 && (found166zgensym_8df0a91a1f250219_167[nextMiss166zgensym_8df0a91a1f250219_167] || unmarshalMsgFieldSkip166zgensym_8df0a91a1f250219_167[nextMiss166zgensym_8df0a91a1f250219_167]) {
				nextMiss166zgensym_8df0a91a1f250219_167++
			}
			if nextMiss166zgensym_8df0a91a1f250219_167 == maxFields166zgensym_8df0a91a1f250219_167 {
				// filled all the empty fields!
				break doneWithStruct166zgensym_8df0a91a1f250219_167
			}
			missingFieldsLeft166zgensym_8df0a91a1f250219_167--
			curField166zgensym_8df0a91a1f250219_167 = unmarshalMsgFieldOrder166zgensym_8df0a91a1f250219_167[nextMiss166zgensym_8df0a91a1f250219_167]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField166zgensym_8df0a91a1f250219_167)
		switch curField166zgensym_8df0a91a1f250219_167 {
		// -- templateUnmarshalMsg ends here --

		case "Name_zid00_str":
			found166zgensym_8df0a91a1f250219_167[0] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "URL_zid01_str":
			found166zgensym_8df0a91a1f250219_167[1] = true
			z.URL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerID_zid02_str":
			found166zgensym_8df0a91a1f250219_167[2] = true
			z.PeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Addr_zid03_str":
			found166zgensym_8df0a91a1f250219_167[3] = true
			z.Addr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceName_zid04_str":
			found166zgensym_8df0a91a1f250219_167[4] = true
			z.PeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid05_str":
			found166zgensym_8df0a91a1f250219_167[5] = true
			z.PeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "NonVoting_zid06_boo":
			found166zgensym_8df0a91a1f250219_167[6] = true
			z.NonVoting, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss166zgensym_8df0a91a1f250219_167 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of PeerDetail
var unmarshalMsgFieldOrder166zgensym_8df0a91a1f250219_167 = []string{"Name_zid00_str", "URL_zid01_str", "PeerID_zid02_str", "Addr_zid03_str", "PeerServiceName_zid04_str", "PeerServiceNameVersion_zid05_str", "NonVoting_zid06_boo"}

var unmarshalMsgFieldSkip166zgensym_8df0a91a1f250219_167 = []bool{false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PeerDetail) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Name) + 14 + msgp.StringPrefixSize + len(z.URL) + 17 + msgp.StringPrefixSize + len(z.PeerID) + 15 + msgp.StringPrefixSize + len(z.Addr) + 26 + msgp.StringPrefixSize + len(z.PeerServiceName) + 34 + msgp.StringPrefixSize + len(z.PeerServiceNameVersion) + 20 + msgp.BoolSize
	return
}
func (z *PeerDetail) Gstring() (r string) {
	r = "&PeerDetail{\n"
	r += fmt.Sprintf("                  Name: \"%v\",\n", z.Name)
	r += fmt.Sprintf("                   URL: \"%v\",\n", z.URL)
	r += fmt.Sprintf("                PeerID: \"%v\",\n", z.PeerID)
	r += fmt.Sprintf("                  Addr: \"%v\",\n", z.Addr)
	r += fmt.Sprintf("       PeerServiceName: \"%v\",\n", z.PeerServiceName)
	r += fmt.Sprintf("PeerServiceNameVersion: \"%v\",\n", z.PeerServiceNameVersion)
	r += fmt.Sprintf("             NonVoting: %v,\n", z.NonVoting)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Ping) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields168zgensym_8df0a91a1f250219_169 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields168zgensym_8df0a91a1f250219_169 uint32
	totalEncodedFields168zgensym_8df0a91a1f250219_169, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft168zgensym_8df0a91a1f250219_169 := totalEncodedFields168zgensym_8df0a91a1f250219_169
	missingFieldsLeft168zgensym_8df0a91a1f250219_169 := maxFields168zgensym_8df0a91a1f250219_169 - totalEncodedFields168zgensym_8df0a91a1f250219_169

	var nextMiss168zgensym_8df0a91a1f250219_169 int32 = -1
	var found168zgensym_8df0a91a1f250219_169 [maxFields168zgensym_8df0a91a1f250219_169]bool
	var curField168zgensym_8df0a91a1f250219_169 string

doneWithStruct168zgensym_8df0a91a1f250219_169:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft168zgensym_8df0a91a1f250219_169 > 0 || missingFieldsLeft168zgensym_8df0a91a1f250219_169 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft168zgensym_8df0a91a1f250219_169, missingFieldsLeft168zgensym_8df0a91a1f250219_169, msgp.ShowFound(found168zgensym_8df0a91a1f250219_169[:]), decodeMsgFieldOrder168zgensym_8df0a91a1f250219_169)
		if encodedFieldsLeft168zgensym_8df0a91a1f250219_169 > 0 {
			encodedFieldsLeft168zgensym_8df0a91a1f250219_169--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField168zgensym_8df0a91a1f250219_169 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss168zgensym_8df0a91a1f250219_169 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss168zgensym_8df0a91a1f250219_169 = 0
			}
			for nextMiss168zgensym_8df0a91a1f250219_169 < maxFields168zgensym_8df0a91a1f250219_169 && (found168zgensym_8df0a91a1f250219_169[nextMiss168zgensym_8df0a91a1f250219_169] || decodeMsgFieldSkip168zgensym_8df0a91a1f250219_169[nextMiss168zgensym_8df0a91a1f250219_169]) {
				nextMiss168zgensym_8df0a91a1f250219_169++
			}
			if nextMiss168zgensym_8df0a91a1f250219_169 == maxFields168zgensym_8df0a91a1f250219_169 {
				// filled all the empty fields!
				break doneWithStruct168zgensym_8df0a91a1f250219_169
			}
			missingFieldsLeft168zgensym_8df0a91a1f250219_169--
			curField168zgensym_8df0a91a1f250219_169 = decodeMsgFieldOrder168zgensym_8df0a91a1f250219_169[nextMiss168zgensym_8df0a91a1f250219_169]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField168zgensym_8df0a91a1f250219_169)
		switch curField168zgensym_8df0a91a1f250219_169 {
		// -- templateDecodeMsg ends here --

		case "Sent_zid00_tim":
			found168zgensym_8df0a91a1f250219_169[0] = true
			z.Sent, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Term_zid01_i64":
			found168zgensym_8df0a91a1f250219_169[1] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "AEID_zid02_str":
			found168zgensym_8df0a91a1f250219_169[2] = true
			z.AEID, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss168zgensym_8df0a91a1f250219_169 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ping
var decodeMsgFieldOrder168zgensym_8df0a91a1f250219_169 = []string{"Sent_zid00_tim", "Term_zid01_i64", "AEID_zid02_str"}

var decodeMsgFieldSkip168zgensym_8df0a91a1f250219_169 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Ping) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.Sent.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Term == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.AEID) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Ping) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_170 [3]bool
	fieldsInUse_zgensym_8df0a91a1f250219_171 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_170[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_171 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Ping'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x69, 0x6e, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_170[0] {
		// write "Sent_zid00_tim"
		err = en.Append(0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Sent)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_170[1] {
		// write "Term_zid01_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_170[2] {
		// write "AEID_zid02_str"
		err = en.Append(0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AEID)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Ping) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Sent_zid00_tim"
		o = append(o, 0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Sent)
	}

	if !empty[1] {
		// string "Term_zid01_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[2] {
		// string "AEID_zid02_str"
		o = append(o, 0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AEID)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ping) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Ping) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields172zgensym_8df0a91a1f250219_173 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields172zgensym_8df0a91a1f250219_173 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields172zgensym_8df0a91a1f250219_173, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft172zgensym_8df0a91a1f250219_173 := totalEncodedFields172zgensym_8df0a91a1f250219_173
	missingFieldsLeft172zgensym_8df0a91a1f250219_173 := maxFields172zgensym_8df0a91a1f250219_173 - totalEncodedFields172zgensym_8df0a91a1f250219_173

	var nextMiss172zgensym_8df0a91a1f250219_173 int32 = -1
	var found172zgensym_8df0a91a1f250219_173 [maxFields172zgensym_8df0a91a1f250219_173]bool
	var curField172zgensym_8df0a91a1f250219_173 string

doneWithStruct172zgensym_8df0a91a1f250219_173:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft172zgensym_8df0a91a1f250219_173 > 0 || missingFieldsLeft172zgensym_8df0a91a1f250219_173 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft172zgensym_8df0a91a1f250219_173, missingFieldsLeft172zgensym_8df0a91a1f250219_173, msgp.ShowFound(found172zgensym_8df0a91a1f250219_173[:]), unmarshalMsgFieldOrder172zgensym_8df0a91a1f250219_173)
		if encodedFieldsLeft172zgensym_8df0a91a1f250219_173 > 0 {
			encodedFieldsLeft172zgensym_8df0a91a1f250219_173--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField172zgensym_8df0a91a1f250219_173 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss172zgensym_8df0a91a1f250219_173 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss172zgensym_8df0a91a1f250219_173 = 0
			}
			for nextMiss172zgensym_8df0a91a1f250219_173 < maxFields172zgensym_8df0a91a1f250219_173 && (found172zgensym_8df0a91a1f250219_173[nextMiss172zgensym_8df0a91a1f250219_173] || unmarshalMsgFieldSkip172zgensym_8df0a91a1f250219_173[nextMiss172zgensym_8df0a91a1f250219_173]) {
				nextMiss172zgensym_8df0a91a1f250219_173++
			}
			if nextMiss172zgensym_8df0a91a1f250219_173 == maxFields172zgensym_8df0a91a1f250219_173 {
				// filled all the empty fields!
				break doneWithStruct172zgensym_8df0a91a1f250219_173
			}
			missingFieldsLeft172zgensym_8df0a91a1f250219_173--
			curField172zgensym_8df0a91a1f250219_173 = unmarshalMsgFieldOrder172zgensym_8df0a91a1f250219_173[nextMiss172zgensym_8df0a91a1f250219_173]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField172zgensym_8df0a91a1f250219_173)
		switch curField172zgensym_8df0a91a1f250219_173 {
		// -- templateUnmarshalMsg ends here --

		case "Sent_zid00_tim":
			found172zgensym_8df0a91a1f250219_173[0] = true
			z.Sent, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Term_zid01_i64":
			found172zgensym_8df0a91a1f250219_173[1] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "AEID_zid02_str":
			found172zgensym_8df0a91a1f250219_173[2] = true
			z.AEID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss172zgensym_8df0a91a1f250219_173 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ping
var unmarshalMsgFieldOrder172zgensym_8df0a91a1f250219_173 = []string{"Sent_zid00_tim", "Term_zid01_i64", "AEID_zid02_str"}

var unmarshalMsgFieldSkip172zgensym_8df0a91a1f250219_173 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ping) Msgsize() (s int) {
	s = 1 + 15 + msgp.TimeSize + 15 + msgp.Int64Size + 15 + msgp.StringPrefixSize + len(z.AEID)
	return
}
func (z *Ping) Gstring() (r string) {
	r = "&Ping{\n"
	r += fmt.Sprintf("Sent: %v,\n", z.Sent)
	r += fmt.Sprintf("Term: %v,\n", z.Term)
	r += fmt.Sprintf("AEID: \"%v\",\n", z.AEID)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Pong) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields174zgensym_8df0a91a1f250219_175 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields174zgensym_8df0a91a1f250219_175 uint32
	totalEncodedFields174zgensym_8df0a91a1f250219_175, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft174zgensym_8df0a91a1f250219_175 := totalEncodedFields174zgensym_8df0a91a1f250219_175
	missingFieldsLeft174zgensym_8df0a91a1f250219_175 := maxFields174zgensym_8df0a91a1f250219_175 - totalEncodedFields174zgensym_8df0a91a1f250219_175

	var nextMiss174zgensym_8df0a91a1f250219_175 int32 = -1
	var found174zgensym_8df0a91a1f250219_175 [maxFields174zgensym_8df0a91a1f250219_175]bool
	var curField174zgensym_8df0a91a1f250219_175 string

doneWithStruct174zgensym_8df0a91a1f250219_175:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft174zgensym_8df0a91a1f250219_175 > 0 || missingFieldsLeft174zgensym_8df0a91a1f250219_175 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft174zgensym_8df0a91a1f250219_175, missingFieldsLeft174zgensym_8df0a91a1f250219_175, msgp.ShowFound(found174zgensym_8df0a91a1f250219_175[:]), decodeMsgFieldOrder174zgensym_8df0a91a1f250219_175)
		if encodedFieldsLeft174zgensym_8df0a91a1f250219_175 > 0 {
			encodedFieldsLeft174zgensym_8df0a91a1f250219_175--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField174zgensym_8df0a91a1f250219_175 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss174zgensym_8df0a91a1f250219_175 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss174zgensym_8df0a91a1f250219_175 = 0
			}
			for nextMiss174zgensym_8df0a91a1f250219_175 < maxFields174zgensym_8df0a91a1f250219_175 && (found174zgensym_8df0a91a1f250219_175[nextMiss174zgensym_8df0a91a1f250219_175] || decodeMsgFieldSkip174zgensym_8df0a91a1f250219_175[nextMiss174zgensym_8df0a91a1f250219_175]) {
				nextMiss174zgensym_8df0a91a1f250219_175++
			}
			if nextMiss174zgensym_8df0a91a1f250219_175 == maxFields174zgensym_8df0a91a1f250219_175 {
				// filled all the empty fields!
				break doneWithStruct174zgensym_8df0a91a1f250219_175
			}
			missingFieldsLeft174zgensym_8df0a91a1f250219_175--
			curField174zgensym_8df0a91a1f250219_175 = decodeMsgFieldOrder174zgensym_8df0a91a1f250219_175[nextMiss174zgensym_8df0a91a1f250219_175]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField174zgensym_8df0a91a1f250219_175)
		switch curField174zgensym_8df0a91a1f250219_175 {
		// -- templateDecodeMsg ends here --

		case "Sent_zid00_tim":
			found174zgensym_8df0a91a1f250219_175[0] = true
			z.Sent, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "RecvTm_zid01_tim":
			found174zgensym_8df0a91a1f250219_175[1] = true
			z.RecvTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Term_zid02_i64":
			found174zgensym_8df0a91a1f250219_175[2] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "AEID_zid03_str":
			found174zgensym_8df0a91a1f250219_175[3] = true
			z.AEID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LogLastIndex_zid04_i64":
			found174zgensym_8df0a91a1f250219_175[4] = true
			z.LogLastIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LogLastTerm_zid05_i64":
			found174zgensym_8df0a91a1f250219_175[5] = true
			z.LogLastTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerID_zid06_str":
			found174zgensym_8df0a91a1f250219_175[6] = true
			z.PeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerName_zid07_str":
			found174zgensym_8df0a91a1f250219_175[7] = true
			z.PeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceName_zid08_str":
			found174zgensym_8df0a91a1f250219_175[8] = true
			z.PeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss174zgensym_8df0a91a1f250219_175 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Pong
var decodeMsgFieldOrder174zgensym_8df0a91a1f250219_175 = []string{"Sent_zid00_tim", "RecvTm_zid01_tim", "Term_zid02_i64", "AEID_zid03_str", "LogLastIndex_zid04_i64", "LogLastTerm_zid05_i64", "PeerID_zid06_str", "PeerName_zid07_str", "PeerServiceName_zid08_str"}

var decodeMsgFieldSkip174zgensym_8df0a91a1f250219_175 = []bool{false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Pong) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 9
	}
	var fieldsInUse uint32 = 9
	isempty[0] = (z.Sent.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.RecvTm.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Term == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.AEID) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.LogLastIndex == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.LogLastTerm == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.PeerID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.PeerName) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.PeerServiceName) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Pong) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_176 [9]bool
	fieldsInUse_zgensym_8df0a91a1f250219_177 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_176[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_177 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Pong'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x6f, 0x6e, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_176[0] {
		// write "Sent_zid00_tim"
		err = en.Append(0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Sent)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[1] {
		// write "RecvTm_zid01_tim"
		err = en.Append(0xb0, 0x52, 0x65, 0x63, 0x76, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.RecvTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[2] {
		// write "Term_zid02_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[3] {
		// write "AEID_zid03_str"
		err = en.Append(0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AEID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[4] {
		// write "LogLastIndex_zid04_i64"
		err = en.Append(0xb6, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LogLastIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[5] {
		// write "LogLastTerm_zid05_i64"
		err = en.Append(0xb5, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LogLastTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[6] {
		// write "PeerID_zid06_str"
		err = en.Append(0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[7] {
		// write "PeerName_zid07_str"
		err = en.Append(0xb2, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_176[8] {
		// write "PeerServiceName_zid08_str"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceName)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pong) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Sent_zid00_tim"
		o = append(o, 0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Sent)
	}

	if !empty[1] {
		// string "RecvTm_zid01_tim"
		o = append(o, 0xb0, 0x52, 0x65, 0x63, 0x76, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.RecvTm)
	}

	if !empty[2] {
		// string "Term_zid02_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[3] {
		// string "AEID_zid03_str"
		o = append(o, 0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AEID)
	}

	if !empty[4] {
		// string "LogLastIndex_zid04_i64"
		o = append(o, 0xb6, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LogLastIndex)
	}

	if !empty[5] {
		// string "LogLastTerm_zid05_i64"
		o = append(o, 0xb5, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LogLastTerm)
	}

	if !empty[6] {
		// string "PeerID_zid06_str"
		o = append(o, 0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerID)
	}

	if !empty[7] {
		// string "PeerName_zid07_str"
		o = append(o, 0xb2, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerName)
	}

	if !empty[8] {
		// string "PeerServiceName_zid08_str"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceName)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pong) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Pong) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields178zgensym_8df0a91a1f250219_179 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields178zgensym_8df0a91a1f250219_179 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields178zgensym_8df0a91a1f250219_179, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft178zgensym_8df0a91a1f250219_179 := totalEncodedFields178zgensym_8df0a91a1f250219_179
	missingFieldsLeft178zgensym_8df0a91a1f250219_179 := maxFields178zgensym_8df0a91a1f250219_179 - totalEncodedFields178zgensym_8df0a91a1f250219_179

	var nextMiss178zgensym_8df0a91a1f250219_179 int32 = -1
	var found178zgensym_8df0a91a1f250219_179 [maxFields178zgensym_8df0a91a1f250219_179]bool
	var curField178zgensym_8df0a91a1f250219_179 string

doneWithStruct178zgensym_8df0a91a1f250219_179:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft178zgensym_8df0a91a1f250219_179 > 0 || missingFieldsLeft178zgensym_8df0a91a1f250219_179 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft178zgensym_8df0a91a1f250219_179, missingFieldsLeft178zgensym_8df0a91a1f250219_179, msgp.ShowFound(found178zgensym_8df0a91a1f250219_179[:]), unmarshalMsgFieldOrder178zgensym_8df0a91a1f250219_179)
		if encodedFieldsLeft178zgensym_8df0a91a1f250219_179 > 0 {
			encodedFieldsLeft178zgensym_8df0a91a1f250219_179--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField178zgensym_8df0a91a1f250219_179 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss178zgensym_8df0a91a1f250219_179 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss178zgensym_8df0a91a1f250219_179 = 0
			}
			for nextMiss178zgensym_8df0a91a1f250219_179 < maxFields178zgensym_8df0a91a1f250219_179 && (found178zgensym_8df0a91a1f250219_179[nextMiss178zgensym_8df0a91a1f250219_179] || unmarshalMsgFieldSkip178zgensym_8df0a91a1f250219_179[nextMiss178zgensym_8df0a91a1f250219_179]) {
				nextMiss178zgensym_8df0a91a1f250219_179++
			}
			if nextMiss178zgensym_8df0a91a1f250219_179 == maxFields178zgensym_8df0a91a1f250219_179 {
				// filled all the empty fields!
				break doneWithStruct178zgensym_8df0a91a1f250219_179
			}
			missingFieldsLeft178zgensym_8df0a91a1f250219_179--
			curField178zgensym_8df0a91a1f250219_179 = unmarshalMsgFieldOrder178zgensym_8df0a91a1f250219_179[nextMiss178zgensym_8df0a91a1f250219_179]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField178zgensym_8df0a91a1f250219_179)
		switch curField178zgensym_8df0a91a1f250219_179 {
		// -- templateUnmarshalMsg ends here --

		case "Sent_zid00_tim":
			found178zgensym_8df0a91a1f250219_179[0] = true
			z.Sent, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "RecvTm_zid01_tim":
			found178zgensym_8df0a91a1f250219_179[1] = true
			z.RecvTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Term_zid02_i64":
			found178zgensym_8df0a91a1f250219_179[2] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "AEID_zid03_str":
			found178zgensym_8df0a91a1f250219_179[3] = true
			z.AEID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LogLastIndex_zid04_i64":
			found178zgensym_8df0a91a1f250219_179[4] = true
			z.LogLastIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LogLastTerm_zid05_i64":
			found178zgensym_8df0a91a1f250219_179[5] = true
			z.LogLastTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerID_zid06_str":
			found178zgensym_8df0a91a1f250219_179[6] = true
			z.PeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerName_zid07_str":
			found178zgensym_8df0a91a1f250219_179[7] = true
			z.PeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceName_zid08_str":
			found178zgensym_8df0a91a1f250219_179[8] = true
			z.PeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss178zgensym_8df0a91a1f250219_179 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Pong
var unmarshalMsgFieldOrder178zgensym_8df0a91a1f250219_179 = []string{"Sent_zid00_tim", "RecvTm_zid01_tim", "Term_zid02_i64", "AEID_zid03_str", "LogLastIndex_zid04_i64", "LogLastTerm_zid05_i64", "PeerID_zid06_str", "PeerName_zid07_str", "PeerServiceName_zid08_str"}

var unmarshalMsgFieldSkip178zgensym_8df0a91a1f250219_179 = []bool{false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pong) Msgsize() (s int) {
	s = 1 + 15 + msgp.TimeSize + 17 + msgp.TimeSize + 15 + msgp.Int64Size + 15 + msgp.StringPrefixSize + len(z.AEID) + 23 + msgp.Int64Size + 22 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.PeerID) + 19 + msgp.StringPrefixSize + len(z.PeerName) + 26 + msgp.StringPrefixSize + len(z.PeerServiceName)
	return
}
func (z *Pong) Gstring() (r string) {
	r = "&Pong{\n"
	r += fmt.Sprintf("           Sent: %v,\n", z.Sent)
	r += fmt.Sprintf("         RecvTm: %v,\n", z.RecvTm)
	r += fmt.Sprintf("           Term: %v,\n", z.Term)
	r += fmt.Sprintf("           AEID: \"%v\",\n", z.AEID)
	r += fmt.Sprintf("   LogLastIndex: %v,\n", z.LogLastIndex)
	r += fmt.Sprintf("    LogLastTerm: %v,\n", z.LogLastTerm)
	r += fmt.Sprintf("         PeerID: \"%v\",\n", z.PeerID)
	r += fmt.Sprintf("       PeerName: \"%v\",\n", z.PeerName)
	r += fmt.Sprintf("PeerServiceName: \"%v\",\n", z.PeerServiceName)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RaftLogEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields180zgensym_8df0a91a1f250219_181 = 8

	// -- templateDecodeMsg starts here--
	var totalEncodedFields180zgensym_8df0a91a1f250219_181 uint32
	totalEncodedFields180zgensym_8df0a91a1f250219_181, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft180zgensym_8df0a91a1f250219_181 := totalEncodedFields180zgensym_8df0a91a1f250219_181
	missingFieldsLeft180zgensym_8df0a91a1f250219_181 := maxFields180zgensym_8df0a91a1f250219_181 - totalEncodedFields180zgensym_8df0a91a1f250219_181

	var nextMiss180zgensym_8df0a91a1f250219_181 int32 = -1
	var found180zgensym_8df0a91a1f250219_181 [maxFields180zgensym_8df0a91a1f250219_181]bool
	var curField180zgensym_8df0a91a1f250219_181 string

doneWithStruct180zgensym_8df0a91a1f250219_181:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft180zgensym_8df0a91a1f250219_181 > 0 || missingFieldsLeft180zgensym_8df0a91a1f250219_181 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft180zgensym_8df0a91a1f250219_181, missingFieldsLeft180zgensym_8df0a91a1f250219_181, msgp.ShowFound(found180zgensym_8df0a91a1f250219_181[:]), decodeMsgFieldOrder180zgensym_8df0a91a1f250219_181)
		if encodedFieldsLeft180zgensym_8df0a91a1f250219_181 > 0 {
			encodedFieldsLeft180zgensym_8df0a91a1f250219_181--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField180zgensym_8df0a91a1f250219_181 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss180zgensym_8df0a91a1f250219_181 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss180zgensym_8df0a91a1f250219_181 = 0
			}
			for nextMiss180zgensym_8df0a91a1f250219_181 < maxFields180zgensym_8df0a91a1f250219_181 && (found180zgensym_8df0a91a1f250219_181[nextMiss180zgensym_8df0a91a1f250219_181] || decodeMsgFieldSkip180zgensym_8df0a91a1f250219_181[nextMiss180zgensym_8df0a91a1f250219_181]) {
				nextMiss180zgensym_8df0a91a1f250219_181++
			}
			if nextMiss180zgensym_8df0a91a1f250219_181 == maxFields180zgensym_8df0a91a1f250219_181 {
				// filled all the empty fields!
				break doneWithStruct180zgensym_8df0a91a1f250219_181
			}
			missingFieldsLeft180zgensym_8df0a91a1f250219_181--
			curField180zgensym_8df0a91a1f250219_181 = decodeMsgFieldOrder180zgensym_8df0a91a1f250219_181[nextMiss180zgensym_8df0a91a1f250219_181]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField180zgensym_8df0a91a1f250219_181)
		switch curField180zgensym_8df0a91a1f250219_181 {
		// -- templateDecodeMsg ends here --

		case "Term_zid00_i64":
			found180zgensym_8df0a91a1f250219_181[0] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Index_zid01_i64":
			found180zgensym_8df0a91a1f250219_181[1] = true
			z.Index, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Ticket_zid02_ptr":
			found180zgensym_8df0a91a1f250219_181[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Ticket != nil {
					dc.PushAlwaysNil()
					err = z.Ticket.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Ticket == nil {
					z.Ticket = new(Ticket)
				}
				dc.DedupIndexEachPtr(z.Ticket)

				err = z.Ticket.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "CurrentCommitIndex_zid03_i64":
			found180zgensym_8df0a91a1f250219_181[3] = true
			z.CurrentCommitIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PrevIndex_zid04_i64":
			found180zgensym_8df0a91a1f250219_181[4] = true
			z.PrevIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PrevTerm_zid05_i64":
			found180zgensym_8df0a91a1f250219_181[5] = true
			z.PrevTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Tm_zid06_tim":
			found180zgensym_8df0a91a1f250219_181[6] = true
			z.Tm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "LeaderName_zid07_str":
			found180zgensym_8df0a91a1f250219_181[7] = true
			z.LeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss180zgensym_8df0a91a1f250219_181 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RaftLogEntry
var decodeMsgFieldOrder180zgensym_8df0a91a1f250219_181 = []string{"Term_zid00_i64", "Index_zid01_i64", "Ticket_zid02_ptr", "CurrentCommitIndex_zid03_i64", "PrevIndex_zid04_i64", "PrevTerm_zid05_i64", "Tm_zid06_tim", "LeaderName_zid07_str"}

var decodeMsgFieldSkip180zgensym_8df0a91a1f250219_181 = []bool{false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RaftLogEntry) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 8
	}
	var fieldsInUse uint32 = 8
	isempty[0] = (z.Term == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Index == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Ticket == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.CurrentCommitIndex == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.PrevIndex == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.PrevTerm == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.Tm.IsZero()) // time.Time, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.LeaderName) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RaftLogEntry) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_182 [8]bool
	fieldsInUse_zgensym_8df0a91a1f250219_183 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_182[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_183 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RaftLogEntry'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_182[0] {
		// write "Term_zid00_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[1] {
		// write "Index_zid01_i64"
		err = en.Append(0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Index)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[2] {
		// write "Ticket_zid02_ptr"
		err = en.Append(0xb0, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Ticket == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Ticket.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[3] {
		// write "CurrentCommitIndex_zid03_i64"
		err = en.Append(0xbc, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CurrentCommitIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[4] {
		// write "PrevIndex_zid04_i64"
		err = en.Append(0xb3, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PrevIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[5] {
		// write "PrevTerm_zid05_i64"
		err = en.Append(0xb2, 0x50, 0x72, 0x65, 0x76, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PrevTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[6] {
		// write "Tm_zid06_tim"
		err = en.Append(0xac, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Tm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_182[7] {
		// write "LeaderName_zid07_str"
		err = en.Append(0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderName)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RaftLogEntry) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [8]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Term_zid00_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[1] {
		// string "Index_zid01_i64"
		o = append(o, 0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Index)
	}

	if !empty[2] {
		// string "Ticket_zid02_ptr"
		o = append(o, 0xb0, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Ticket == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Ticket.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// string "CurrentCommitIndex_zid03_i64"
		o = append(o, 0xbc, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CurrentCommitIndex)
	}

	if !empty[4] {
		// string "PrevIndex_zid04_i64"
		o = append(o, 0xb3, 0x50, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PrevIndex)
	}

	if !empty[5] {
		// string "PrevTerm_zid05_i64"
		o = append(o, 0xb2, 0x50, 0x72, 0x65, 0x76, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PrevTerm)
	}

	if !empty[6] {
		// string "Tm_zid06_tim"
		o = append(o, 0xac, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Tm)
	}

	if !empty[7] {
		// string "LeaderName_zid07_str"
		o = append(o, 0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderName)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RaftLogEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RaftLogEntry) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields184zgensym_8df0a91a1f250219_185 = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields184zgensym_8df0a91a1f250219_185 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields184zgensym_8df0a91a1f250219_185, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft184zgensym_8df0a91a1f250219_185 := totalEncodedFields184zgensym_8df0a91a1f250219_185
	missingFieldsLeft184zgensym_8df0a91a1f250219_185 := maxFields184zgensym_8df0a91a1f250219_185 - totalEncodedFields184zgensym_8df0a91a1f250219_185

	var nextMiss184zgensym_8df0a91a1f250219_185 int32 = -1
	var found184zgensym_8df0a91a1f250219_185 [maxFields184zgensym_8df0a91a1f250219_185]bool
	var curField184zgensym_8df0a91a1f250219_185 string

doneWithStruct184zgensym_8df0a91a1f250219_185:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft184zgensym_8df0a91a1f250219_185 > 0 || missingFieldsLeft184zgensym_8df0a91a1f250219_185 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft184zgensym_8df0a91a1f250219_185, missingFieldsLeft184zgensym_8df0a91a1f250219_185, msgp.ShowFound(found184zgensym_8df0a91a1f250219_185[:]), unmarshalMsgFieldOrder184zgensym_8df0a91a1f250219_185)
		if encodedFieldsLeft184zgensym_8df0a91a1f250219_185 > 0 {
			encodedFieldsLeft184zgensym_8df0a91a1f250219_185--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField184zgensym_8df0a91a1f250219_185 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss184zgensym_8df0a91a1f250219_185 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss184zgensym_8df0a91a1f250219_185 = 0
			}
			for nextMiss184zgensym_8df0a91a1f250219_185 < maxFields184zgensym_8df0a91a1f250219_185 && (found184zgensym_8df0a91a1f250219_185[nextMiss184zgensym_8df0a91a1f250219_185] || unmarshalMsgFieldSkip184zgensym_8df0a91a1f250219_185[nextMiss184zgensym_8df0a91a1f250219_185]) {
				nextMiss184zgensym_8df0a91a1f250219_185++
			}
			if nextMiss184zgensym_8df0a91a1f250219_185 == maxFields184zgensym_8df0a91a1f250219_185 {
				// filled all the empty fields!
				break doneWithStruct184zgensym_8df0a91a1f250219_185
			}
			missingFieldsLeft184zgensym_8df0a91a1f250219_185--
			curField184zgensym_8df0a91a1f250219_185 = unmarshalMsgFieldOrder184zgensym_8df0a91a1f250219_185[nextMiss184zgensym_8df0a91a1f250219_185]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField184zgensym_8df0a91a1f250219_185)
		switch curField184zgensym_8df0a91a1f250219_185 {
		// -- templateUnmarshalMsg ends here --

		case "Term_zid00_i64":
			found184zgensym_8df0a91a1f250219_185[0] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Index_zid01_i64":
			found184zgensym_8df0a91a1f250219_185[1] = true
			z.Index, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Ticket_zid02_ptr":
			found184zgensym_8df0a91a1f250219_185[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Ticket != nil {
					z.Ticket.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Ticket {
						z.Ticket.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Ticket == nil {
						z.Ticket = new(Ticket)
					}

					bts, err = z.Ticket.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "CurrentCommitIndex_zid03_i64":
			found184zgensym_8df0a91a1f250219_185[3] = true
			z.CurrentCommitIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PrevIndex_zid04_i64":
			found184zgensym_8df0a91a1f250219_185[4] = true
			z.PrevIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PrevTerm_zid05_i64":
			found184zgensym_8df0a91a1f250219_185[5] = true
			z.PrevTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Tm_zid06_tim":
			found184zgensym_8df0a91a1f250219_185[6] = true
			z.Tm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "LeaderName_zid07_str":
			found184zgensym_8df0a91a1f250219_185[7] = true
			z.LeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss184zgensym_8df0a91a1f250219_185 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RaftLogEntry
var unmarshalMsgFieldOrder184zgensym_8df0a91a1f250219_185 = []string{"Term_zid00_i64", "Index_zid01_i64", "Ticket_zid02_ptr", "CurrentCommitIndex_zid03_i64", "PrevIndex_zid04_i64", "PrevTerm_zid05_i64", "Tm_zid06_tim", "LeaderName_zid07_str"}

var unmarshalMsgFieldSkip184zgensym_8df0a91a1f250219_185 = []bool{false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RaftLogEntry) Msgsize() (s int) {
	s = 1 + 15 + msgp.Int64Size + 16 + msgp.Int64Size + 17
	if z.Ticket == nil {
		s += msgp.NilSize
	} else {
		s += z.Ticket.Msgsize()
	}
	s += 29 + msgp.Int64Size + 20 + msgp.Int64Size + 19 + msgp.Int64Size + 13 + msgp.TimeSize + 21 + msgp.StringPrefixSize + len(z.LeaderName)
	return
}
func (z *RaftLogEntry) Gstring() (r string) {
	r = "&RaftLogEntry{\n"
	r += fmt.Sprintf("              Term: %v,\n", z.Term)
	r += fmt.Sprintf("             Index: %v,\n", z.Index)
	r += fmt.Sprintf("            Ticket: %v,\n", z.Ticket)
	r += fmt.Sprintf("CurrentCommitIndex: %v,\n", z.CurrentCommitIndex)
	r += fmt.Sprintf("         PrevIndex: %v,\n", z.PrevIndex)
	r += fmt.Sprintf("          PrevTerm: %v,\n", z.PrevTerm)
	r += fmt.Sprintf("                Tm: %v,\n", z.Tm)
	r += fmt.Sprintf("        LeaderName: \"%v\",\n", z.LeaderName)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RaftNodeInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields186zgensym_8df0a91a1f250219_187 = 16

	// -- templateDecodeMsg starts here--
	var totalEncodedFields186zgensym_8df0a91a1f250219_187 uint32
	totalEncodedFields186zgensym_8df0a91a1f250219_187, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft186zgensym_8df0a91a1f250219_187 := totalEncodedFields186zgensym_8df0a91a1f250219_187
	missingFieldsLeft186zgensym_8df0a91a1f250219_187 := maxFields186zgensym_8df0a91a1f250219_187 - totalEncodedFields186zgensym_8df0a91a1f250219_187

	var nextMiss186zgensym_8df0a91a1f250219_187 int32 = -1
	var found186zgensym_8df0a91a1f250219_187 [maxFields186zgensym_8df0a91a1f250219_187]bool
	var curField186zgensym_8df0a91a1f250219_187 string

doneWithStruct186zgensym_8df0a91a1f250219_187:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft186zgensym_8df0a91a1f250219_187 > 0 || missingFieldsLeft186zgensym_8df0a91a1f250219_187 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft186zgensym_8df0a91a1f250219_187, missingFieldsLeft186zgensym_8df0a91a1f250219_187, msgp.ShowFound(found186zgensym_8df0a91a1f250219_187[:]), decodeMsgFieldOrder186zgensym_8df0a91a1f250219_187)
		if encodedFieldsLeft186zgensym_8df0a91a1f250219_187 > 0 {
			encodedFieldsLeft186zgensym_8df0a91a1f250219_187--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField186zgensym_8df0a91a1f250219_187 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss186zgensym_8df0a91a1f250219_187 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss186zgensym_8df0a91a1f250219_187 = 0
			}
			for nextMiss186zgensym_8df0a91a1f250219_187 < maxFields186zgensym_8df0a91a1f250219_187 && (found186zgensym_8df0a91a1f250219_187[nextMiss186zgensym_8df0a91a1f250219_187] || decodeMsgFieldSkip186zgensym_8df0a91a1f250219_187[nextMiss186zgensym_8df0a91a1f250219_187]) {
				nextMiss186zgensym_8df0a91a1f250219_187++
			}
			if nextMiss186zgensym_8df0a91a1f250219_187 == maxFields186zgensym_8df0a91a1f250219_187 {
				// filled all the empty fields!
				break doneWithStruct186zgensym_8df0a91a1f250219_187
			}
			missingFieldsLeft186zgensym_8df0a91a1f250219_187--
			curField186zgensym_8df0a91a1f250219_187 = decodeMsgFieldOrder186zgensym_8df0a91a1f250219_187[nextMiss186zgensym_8df0a91a1f250219_187]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField186zgensym_8df0a91a1f250219_187)
		switch curField186zgensym_8df0a91a1f250219_187 {
		// -- templateDecodeMsg ends here --

		case "PeerID_zid00_str":
			found186zgensym_8df0a91a1f250219_187[0] = true
			z.PeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerName_zid01_str":
			found186zgensym_8df0a91a1f250219_187[1] = true
			z.PeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceName_zid02_str":
			found186zgensym_8df0a91a1f250219_187[2] = true
			z.PeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid03_str":
			found186zgensym_8df0a91a1f250219_187[3] = true
			z.PeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerURL_zid04_str":
			found186zgensym_8df0a91a1f250219_187[4] = true
			z.PeerURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemoteBaseServerAddr_zid05_str":
			found186zgensym_8df0a91a1f250219_187[5] = true
			z.RemoteBaseServerAddr, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsInspectResponder_zid06_boo":
			found186zgensym_8df0a91a1f250219_187[6] = true
			z.IsInspectResponder, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "MatchIndex_zid07_i64":
			found186zgensym_8df0a91a1f250219_187[7] = true
			z.MatchIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "UnackedPing_zid08_rct":
			found186zgensym_8df0a91a1f250219_187[8] = true
			const maxFields188zgensym_8df0a91a1f250219_189 = 3

			// -- templateDecodeMsg starts here--
			var totalEncodedFields188zgensym_8df0a91a1f250219_189 uint32
			totalEncodedFields188zgensym_8df0a91a1f250219_189, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			encodedFieldsLeft188zgensym_8df0a91a1f250219_189 := totalEncodedFields188zgensym_8df0a91a1f250219_189
			missingFieldsLeft188zgensym_8df0a91a1f250219_189 := maxFields188zgensym_8df0a91a1f250219_189 - totalEncodedFields188zgensym_8df0a91a1f250219_189

			var nextMiss188zgensym_8df0a91a1f250219_189 int32 = -1
			var found188zgensym_8df0a91a1f250219_189 [maxFields188zgensym_8df0a91a1f250219_189]bool
			var curField188zgensym_8df0a91a1f250219_189 string

		doneWithStruct188zgensym_8df0a91a1f250219_189:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft188zgensym_8df0a91a1f250219_189 > 0 || missingFieldsLeft188zgensym_8df0a91a1f250219_189 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft188zgensym_8df0a91a1f250219_189, missingFieldsLeft188zgensym_8df0a91a1f250219_189, msgp.ShowFound(found188zgensym_8df0a91a1f250219_189[:]), decodeMsgFieldOrder188zgensym_8df0a91a1f250219_189)
				if encodedFieldsLeft188zgensym_8df0a91a1f250219_189 > 0 {
					encodedFieldsLeft188zgensym_8df0a91a1f250219_189--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					curField188zgensym_8df0a91a1f250219_189 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss188zgensym_8df0a91a1f250219_189 < 0 {
						// tell the reader to only give us Nils
						// until further notice.
						dc.PushAlwaysNil()
						nextMiss188zgensym_8df0a91a1f250219_189 = 0
					}
					for nextMiss188zgensym_8df0a91a1f250219_189 < maxFields188zgensym_8df0a91a1f250219_189 && (found188zgensym_8df0a91a1f250219_189[nextMiss188zgensym_8df0a91a1f250219_189] || decodeMsgFieldSkip188zgensym_8df0a91a1f250219_189[nextMiss188zgensym_8df0a91a1f250219_189]) {
						nextMiss188zgensym_8df0a91a1f250219_189++
					}
					if nextMiss188zgensym_8df0a91a1f250219_189 == maxFields188zgensym_8df0a91a1f250219_189 {
						// filled all the empty fields!
						break doneWithStruct188zgensym_8df0a91a1f250219_189
					}
					missingFieldsLeft188zgensym_8df0a91a1f250219_189--
					curField188zgensym_8df0a91a1f250219_189 = decodeMsgFieldOrder188zgensym_8df0a91a1f250219_189[nextMiss188zgensym_8df0a91a1f250219_189]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField188zgensym_8df0a91a1f250219_189)
				switch curField188zgensym_8df0a91a1f250219_189 {
				// -- templateDecodeMsg ends here --

				case "Sent_zid00_tim":
					found188zgensym_8df0a91a1f250219_189[0] = true
					z.UnackedPing.Sent, err = dc.ReadTime()
					if err != nil {
						return
					}
				case "Term_zid01_i64":
					found188zgensym_8df0a91a1f250219_189[1] = true
					z.UnackedPing.Term, err = dc.ReadInt64()
					if err != nil {
						return
					}
				case "AEID_zid02_str":
					found188zgensym_8df0a91a1f250219_189[2] = true
					z.UnackedPing.AEID, err = dc.ReadString()
					if err != nil {
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						return
					}
				}
			}
			if nextMiss188zgensym_8df0a91a1f250219_189 != -1 {
				dc.PopAlwaysNil()
			}

		case "LastFullPing_zid09_rct":
			found186zgensym_8df0a91a1f250219_187[9] = true
			const maxFields190zgensym_8df0a91a1f250219_191 = 3

			// -- templateDecodeMsg starts here--
			var totalEncodedFields190zgensym_8df0a91a1f250219_191 uint32
			totalEncodedFields190zgensym_8df0a91a1f250219_191, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			encodedFieldsLeft190zgensym_8df0a91a1f250219_191 := totalEncodedFields190zgensym_8df0a91a1f250219_191
			missingFieldsLeft190zgensym_8df0a91a1f250219_191 := maxFields190zgensym_8df0a91a1f250219_191 - totalEncodedFields190zgensym_8df0a91a1f250219_191

			var nextMiss190zgensym_8df0a91a1f250219_191 int32 = -1
			var found190zgensym_8df0a91a1f250219_191 [maxFields190zgensym_8df0a91a1f250219_191]bool
			var curField190zgensym_8df0a91a1f250219_191 string

		doneWithStruct190zgensym_8df0a91a1f250219_191:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft190zgensym_8df0a91a1f250219_191 > 0 || missingFieldsLeft190zgensym_8df0a91a1f250219_191 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft190zgensym_8df0a91a1f250219_191, missingFieldsLeft190zgensym_8df0a91a1f250219_191, msgp.ShowFound(found190zgensym_8df0a91a1f250219_191[:]), decodeMsgFieldOrder190zgensym_8df0a91a1f250219_191)
				if encodedFieldsLeft190zgensym_8df0a91a1f250219_191 > 0 {
					encodedFieldsLeft190zgensym_8df0a91a1f250219_191--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					curField190zgensym_8df0a91a1f250219_191 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss190zgensym_8df0a91a1f250219_191 < 0 {
						// tell the reader to only give us Nils
						// until further notice.
						dc.PushAlwaysNil()
						nextMiss190zgensym_8df0a91a1f250219_191 = 0
					}
					for nextMiss190zgensym_8df0a91a1f250219_191 < maxFields190zgensym_8df0a91a1f250219_191 && (found190zgensym_8df0a91a1f250219_191[nextMiss190zgensym_8df0a91a1f250219_191] || decodeMsgFieldSkip190zgensym_8df0a91a1f250219_191[nextMiss190zgensym_8df0a91a1f250219_191]) {
						nextMiss190zgensym_8df0a91a1f250219_191++
					}
					if nextMiss190zgensym_8df0a91a1f250219_191 == maxFields190zgensym_8df0a91a1f250219_191 {
						// filled all the empty fields!
						break doneWithStruct190zgensym_8df0a91a1f250219_191
					}
					missingFieldsLeft190zgensym_8df0a91a1f250219_191--
					curField190zgensym_8df0a91a1f250219_191 = decodeMsgFieldOrder190zgensym_8df0a91a1f250219_191[nextMiss190zgensym_8df0a91a1f250219_191]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField190zgensym_8df0a91a1f250219_191)
				switch curField190zgensym_8df0a91a1f250219_191 {
				// -- templateDecodeMsg ends here --

				case "Sent_zid00_tim":
					found190zgensym_8df0a91a1f250219_191[0] = true
					z.LastFullPing.Sent, err = dc.ReadTime()
					if err != nil {
						return
					}
				case "Term_zid01_i64":
					found190zgensym_8df0a91a1f250219_191[1] = true
					z.LastFullPing.Term, err = dc.ReadInt64()
					if err != nil {
						return
					}
				case "AEID_zid02_str":
					found190zgensym_8df0a91a1f250219_191[2] = true
					z.LastFullPing.AEID, err = dc.ReadString()
					if err != nil {
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						return
					}
				}
			}
			if nextMiss190zgensym_8df0a91a1f250219_191 != -1 {
				dc.PopAlwaysNil()
			}

		case "LastFullPong_zid10_rct":
			found186zgensym_8df0a91a1f250219_187[10] = true
			err = z.LastFullPong.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "LastHeardAnything_zid11_tim":
			found186zgensym_8df0a91a1f250219_187[11] = true
			z.LastHeardAnything, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "LargestCommonRaftIndex_zid12_i64":
			found186zgensym_8df0a91a1f250219_187[12] = true
			z.LargestCommonRaftIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "MinElectionTimeoutDur_zid13_dur":
			found186zgensym_8df0a91a1f250219_187[13] = true
			z.MinElectionTimeoutDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "PreVoteOn_zid14_boo":
			found186zgensym_8df0a91a1f250219_187[14] = true
			z.PreVoteOn, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "MC_zid15_ptr":
			found186zgensym_8df0a91a1f250219_187[15] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss186zgensym_8df0a91a1f250219_187 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RaftNodeInfo
var decodeMsgFieldOrder186zgensym_8df0a91a1f250219_187 = []string{"PeerID_zid00_str", "PeerName_zid01_str", "PeerServiceName_zid02_str", "PeerServiceNameVersion_zid03_str", "PeerURL_zid04_str", "RemoteBaseServerAddr_zid05_str", "IsInspectResponder_zid06_boo", "MatchIndex_zid07_i64", "UnackedPing_zid08_rct", "LastFullPing_zid09_rct", "LastFullPong_zid10_rct", "LastHeardAnything_zid11_tim", "LargestCommonRaftIndex_zid12_i64", "MinElectionTimeoutDur_zid13_dur", "PreVoteOn_zid14_boo", "MC_zid15_ptr"}

var decodeMsgFieldSkip186zgensym_8df0a91a1f250219_187 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fields of Ping
var decodeMsgFieldOrder188zgensym_8df0a91a1f250219_189 = []string{"Sent_zid00_tim", "Term_zid01_i64", "AEID_zid02_str"}

var decodeMsgFieldSkip188zgensym_8df0a91a1f250219_189 = []bool{false, false, false}

// fields of Ping
var decodeMsgFieldOrder190zgensym_8df0a91a1f250219_191 = []string{"Sent_zid00_tim", "Term_zid01_i64", "AEID_zid02_str"}

var decodeMsgFieldSkip190zgensym_8df0a91a1f250219_191 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RaftNodeInfo) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 16
	}
	var fieldsInUse uint32 = 16
	isempty[0] = (len(z.PeerID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.PeerName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.PeerServiceName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.PeerServiceNameVersion) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.PeerURL) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.RemoteBaseServerAddr) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (!z.IsInspectResponder) // bool, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.MatchIndex == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = false // struct values are never empty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = false // struct values are never empty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = false
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.LastHeardAnything.IsZero()) // time.Time, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.LargestCommonRaftIndex == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = false
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (!z.PreVoteOn) // bool, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (z.MC == nil) // pointer, omitempty
	if isempty[15] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RaftNodeInfo) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_192 [16]bool
	fieldsInUse_zgensym_8df0a91a1f250219_193 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_192[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_193 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RaftNodeInfo'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_192[0] {
		// write "PeerID_zid00_str"
		err = en.Append(0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[1] {
		// write "PeerName_zid01_str"
		err = en.Append(0xb2, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[2] {
		// write "PeerServiceName_zid02_str"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[3] {
		// write "PeerServiceNameVersion_zid03_str"
		err = en.Append(0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[4] {
		// write "PeerURL_zid04_str"
		err = en.Append(0xb1, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[5] {
		// write "RemoteBaseServerAddr_zid05_str"
		err = en.Append(0xbe, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RemoteBaseServerAddr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[6] {
		// write "IsInspectResponder_zid06_boo"
		err = en.Append(0xbc, 0x49, 0x73, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsInspectResponder)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[7] {
		// write "MatchIndex_zid07_i64"
		err = en.Append(0xb4, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.MatchIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[8] {
		// write "UnackedPing_zid08_rct"
		err = en.Append(0xb5, 0x55, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}

		// honor the omitempty tags
		var empty_zgensym_8df0a91a1f250219_194 [3]bool
		fieldsInUse_zgensym_8df0a91a1f250219_195 := z.UnackedPing.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_194[:])

		// map header
		err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_195 + 1)
		if err != nil {
			return err
		}

		// runtime struct type identification for 'Ping'
		err = en.Append(0xa1, 0x40)
		if err != nil {
			return err
		}
		err = en.WriteStringFromBytes([]byte{0x50, 0x69, 0x6e, 0x67})
		if err != nil {
			return err
		}

		if !empty_zgensym_8df0a91a1f250219_194[0] {
			// write "Sent_zid00_tim"
			err = en.Append(0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
			if err != nil {
				return err
			}
			err = en.WriteTime(z.UnackedPing.Sent)
			if err != nil {
				return
			}
		}

		if !empty_zgensym_8df0a91a1f250219_194[1] {
			// write "Term_zid01_i64"
			err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			if err != nil {
				return err
			}
			err = en.WriteInt64(z.UnackedPing.Term)
			if err != nil {
				return
			}
		}

		if !empty_zgensym_8df0a91a1f250219_194[2] {
			// write "AEID_zid02_str"
			err = en.Append(0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
			if err != nil {
				return err
			}
			err = en.WriteString(z.UnackedPing.AEID)
			if err != nil {
				return
			}
		}

	}

	if !empty_zgensym_8df0a91a1f250219_192[9] {
		// write "LastFullPing_zid09_rct"
		err = en.Append(0xb6, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}

		// honor the omitempty tags
		var empty_zgensym_8df0a91a1f250219_196 [3]bool
		fieldsInUse_zgensym_8df0a91a1f250219_197 := z.LastFullPing.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_196[:])

		// map header
		err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_197 + 1)
		if err != nil {
			return err
		}

		// runtime struct type identification for 'Ping'
		err = en.Append(0xa1, 0x40)
		if err != nil {
			return err
		}
		err = en.WriteStringFromBytes([]byte{0x50, 0x69, 0x6e, 0x67})
		if err != nil {
			return err
		}

		if !empty_zgensym_8df0a91a1f250219_196[0] {
			// write "Sent_zid00_tim"
			err = en.Append(0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
			if err != nil {
				return err
			}
			err = en.WriteTime(z.LastFullPing.Sent)
			if err != nil {
				return
			}
		}

		if !empty_zgensym_8df0a91a1f250219_196[1] {
			// write "Term_zid01_i64"
			err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			if err != nil {
				return err
			}
			err = en.WriteInt64(z.LastFullPing.Term)
			if err != nil {
				return
			}
		}

		if !empty_zgensym_8df0a91a1f250219_196[2] {
			// write "AEID_zid02_str"
			err = en.Append(0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
			if err != nil {
				return err
			}
			err = en.WriteString(z.LastFullPing.AEID)
			if err != nil {
				return
			}
		}

	}

	if !empty_zgensym_8df0a91a1f250219_192[10] {
		// write "LastFullPong_zid10_rct"
		err = en.Append(0xb6, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = z.LastFullPong.EncodeMsg(en)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[11] {
		// write "LastHeardAnything_zid11_tim"
		err = en.Append(0xbb, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.LastHeardAnything)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[12] {
		// write "LargestCommonRaftIndex_zid12_i64"
		err = en.Append(0xd9, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LargestCommonRaftIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[13] {
		// write "MinElectionTimeoutDur_zid13_dur"
		err = en.Append(0xbf, 0x4d, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.MinElectionTimeoutDur)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[14] {
		// write "PreVoteOn_zid14_boo"
		err = en.Append(0xb3, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.PreVoteOn)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_192[15] {
		// write "MC_zid15_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RaftNodeInfo) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [16]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "PeerID_zid00_str"
		o = append(o, 0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerID)
	}

	if !empty[1] {
		// string "PeerName_zid01_str"
		o = append(o, 0xb2, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerName)
	}

	if !empty[2] {
		// string "PeerServiceName_zid02_str"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceName)
	}

	if !empty[3] {
		// string "PeerServiceNameVersion_zid03_str"
		o = append(o, 0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceNameVersion)
	}

	if !empty[4] {
		// string "PeerURL_zid04_str"
		o = append(o, 0xb1, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerURL)
	}

	if !empty[5] {
		// string "RemoteBaseServerAddr_zid05_str"
		o = append(o, 0xbe, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RemoteBaseServerAddr)
	}

	if !empty[6] {
		// string "IsInspectResponder_zid06_boo"
		o = append(o, 0xbc, 0x49, 0x73, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsInspectResponder)
	}

	if !empty[7] {
		// string "MatchIndex_zid07_i64"
		o = append(o, 0xb4, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.MatchIndex)
	}

	if !empty[8] {
		// string "UnackedPing_zid08_rct"
		o = append(o, 0xb5, 0x55, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x72, 0x63, 0x74)

		// honor the omitempty tags
		var empty [3]bool
		fieldsInUse := z.UnackedPing.fieldsNotEmpty(empty[:])
		o = msgp.AppendMapHeader(o, fieldsInUse)

		if !empty[0] {
			// string "Sent_zid00_tim"
			o = append(o, 0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
			o = msgp.AppendTime(o, z.UnackedPing.Sent)
		}

		if !empty[1] {
			// string "Term_zid01_i64"
			o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			o = msgp.AppendInt64(o, z.UnackedPing.Term)
		}

		if !empty[2] {
			// string "AEID_zid02_str"
			o = append(o, 0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
			o = msgp.AppendString(o, z.UnackedPing.AEID)
		}

	}

	if !empty[9] {
		// string "LastFullPing_zid09_rct"
		o = append(o, 0xb6, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x72, 0x63, 0x74)

		// honor the omitempty tags
		var empty [3]bool
		fieldsInUse := z.LastFullPing.fieldsNotEmpty(empty[:])
		o = msgp.AppendMapHeader(o, fieldsInUse)

		if !empty[0] {
			// string "Sent_zid00_tim"
			o = append(o, 0xae, 0x53, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
			o = msgp.AppendTime(o, z.LastFullPing.Sent)
		}

		if !empty[1] {
			// string "Term_zid01_i64"
			o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			o = msgp.AppendInt64(o, z.LastFullPing.Term)
		}

		if !empty[2] {
			// string "AEID_zid02_str"
			o = append(o, 0xae, 0x41, 0x45, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
			o = msgp.AppendString(o, z.LastFullPing.AEID)
		}

	}

	if !empty[10] {
		// string "LastFullPong_zid10_rct"
		o = append(o, 0xb6, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.LastFullPong.MarshalMsg(o) // not is.iface
		if err != nil {
			return
		}
	}

	if !empty[11] {
		// string "LastHeardAnything_zid11_tim"
		o = append(o, 0xbb, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.LastHeardAnything)
	}

	if !empty[12] {
		// string "LargestCommonRaftIndex_zid12_i64"
		o = append(o, 0xd9, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LargestCommonRaftIndex)
	}

	if !empty[13] {
		// string "MinElectionTimeoutDur_zid13_dur"
		o = append(o, 0xbf, 0x4d, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.MinElectionTimeoutDur)
	}

	if !empty[14] {
		// string "PreVoteOn_zid14_boo"
		o = append(o, 0xb3, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.PreVoteOn)
	}

	if !empty[15] {
		// string "MC_zid15_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RaftNodeInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RaftNodeInfo) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields198zgensym_8df0a91a1f250219_199 = 16

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields198zgensym_8df0a91a1f250219_199 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields198zgensym_8df0a91a1f250219_199, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft198zgensym_8df0a91a1f250219_199 := totalEncodedFields198zgensym_8df0a91a1f250219_199
	missingFieldsLeft198zgensym_8df0a91a1f250219_199 := maxFields198zgensym_8df0a91a1f250219_199 - totalEncodedFields198zgensym_8df0a91a1f250219_199

	var nextMiss198zgensym_8df0a91a1f250219_199 int32 = -1
	var found198zgensym_8df0a91a1f250219_199 [maxFields198zgensym_8df0a91a1f250219_199]bool
	var curField198zgensym_8df0a91a1f250219_199 string

doneWithStruct198zgensym_8df0a91a1f250219_199:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft198zgensym_8df0a91a1f250219_199 > 0 || missingFieldsLeft198zgensym_8df0a91a1f250219_199 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft198zgensym_8df0a91a1f250219_199, missingFieldsLeft198zgensym_8df0a91a1f250219_199, msgp.ShowFound(found198zgensym_8df0a91a1f250219_199[:]), unmarshalMsgFieldOrder198zgensym_8df0a91a1f250219_199)
		if encodedFieldsLeft198zgensym_8df0a91a1f250219_199 > 0 {
			encodedFieldsLeft198zgensym_8df0a91a1f250219_199--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField198zgensym_8df0a91a1f250219_199 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss198zgensym_8df0a91a1f250219_199 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss198zgensym_8df0a91a1f250219_199 = 0
			}
			for nextMiss198zgensym_8df0a91a1f250219_199 < maxFields198zgensym_8df0a91a1f250219_199 && (found198zgensym_8df0a91a1f250219_199[nextMiss198zgensym_8df0a91a1f250219_199] || unmarshalMsgFieldSkip198zgensym_8df0a91a1f250219_199[nextMiss198zgensym_8df0a91a1f250219_199]) {
				nextMiss198zgensym_8df0a91a1f250219_199++
			}
			if nextMiss198zgensym_8df0a91a1f250219_199 == maxFields198zgensym_8df0a91a1f250219_199 {
				// filled all the empty fields!
				break doneWithStruct198zgensym_8df0a91a1f250219_199
			}
			missingFieldsLeft198zgensym_8df0a91a1f250219_199--
			curField198zgensym_8df0a91a1f250219_199 = unmarshalMsgFieldOrder198zgensym_8df0a91a1f250219_199[nextMiss198zgensym_8df0a91a1f250219_199]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField198zgensym_8df0a91a1f250219_199)
		switch curField198zgensym_8df0a91a1f250219_199 {
		// -- templateUnmarshalMsg ends here --

		case "PeerID_zid00_str":
			found198zgensym_8df0a91a1f250219_199[0] = true
			z.PeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerName_zid01_str":
			found198zgensym_8df0a91a1f250219_199[1] = true
			z.PeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceName_zid02_str":
			found198zgensym_8df0a91a1f250219_199[2] = true
			z.PeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid03_str":
			found198zgensym_8df0a91a1f250219_199[3] = true
			z.PeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerURL_zid04_str":
			found198zgensym_8df0a91a1f250219_199[4] = true
			z.PeerURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemoteBaseServerAddr_zid05_str":
			found198zgensym_8df0a91a1f250219_199[5] = true
			z.RemoteBaseServerAddr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsInspectResponder_zid06_boo":
			found198zgensym_8df0a91a1f250219_199[6] = true
			z.IsInspectResponder, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "MatchIndex_zid07_i64":
			found198zgensym_8df0a91a1f250219_199[7] = true
			z.MatchIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "UnackedPing_zid08_rct":
			found198zgensym_8df0a91a1f250219_199[8] = true
			const maxFields200zgensym_8df0a91a1f250219_201 = 3

			// -- templateUnmarshalMsg starts here--
			var totalEncodedFields200zgensym_8df0a91a1f250219_201 uint32
			if !nbs.AlwaysNil {
				totalEncodedFields200zgensym_8df0a91a1f250219_201, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
			}
			encodedFieldsLeft200zgensym_8df0a91a1f250219_201 := totalEncodedFields200zgensym_8df0a91a1f250219_201
			missingFieldsLeft200zgensym_8df0a91a1f250219_201 := maxFields200zgensym_8df0a91a1f250219_201 - totalEncodedFields200zgensym_8df0a91a1f250219_201

			var nextMiss200zgensym_8df0a91a1f250219_201 int32 = -1
			var found200zgensym_8df0a91a1f250219_201 [maxFields200zgensym_8df0a91a1f250219_201]bool
			var curField200zgensym_8df0a91a1f250219_201 string

		doneWithStruct200zgensym_8df0a91a1f250219_201:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft200zgensym_8df0a91a1f250219_201 > 0 || missingFieldsLeft200zgensym_8df0a91a1f250219_201 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft200zgensym_8df0a91a1f250219_201, missingFieldsLeft200zgensym_8df0a91a1f250219_201, msgp.ShowFound(found200zgensym_8df0a91a1f250219_201[:]), unmarshalMsgFieldOrder200zgensym_8df0a91a1f250219_201)
				if encodedFieldsLeft200zgensym_8df0a91a1f250219_201 > 0 {
					encodedFieldsLeft200zgensym_8df0a91a1f250219_201--
					field, bts, err = nbs.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					curField200zgensym_8df0a91a1f250219_201 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss200zgensym_8df0a91a1f250219_201 < 0 {
						// set bts to contain just mnil (0xc0)
						bts = nbs.PushAlwaysNil(bts)
						nextMiss200zgensym_8df0a91a1f250219_201 = 0
					}
					for nextMiss200zgensym_8df0a91a1f250219_201 < maxFields200zgensym_8df0a91a1f250219_201 && (found200zgensym_8df0a91a1f250219_201[nextMiss200zgensym_8df0a91a1f250219_201] || unmarshalMsgFieldSkip200zgensym_8df0a91a1f250219_201[nextMiss200zgensym_8df0a91a1f250219_201]) {
						nextMiss200zgensym_8df0a91a1f250219_201++
					}
					if nextMiss200zgensym_8df0a91a1f250219_201 == maxFields200zgensym_8df0a91a1f250219_201 {
						// filled all the empty fields!
						break doneWithStruct200zgensym_8df0a91a1f250219_201
					}
					missingFieldsLeft200zgensym_8df0a91a1f250219_201--
					curField200zgensym_8df0a91a1f250219_201 = unmarshalMsgFieldOrder200zgensym_8df0a91a1f250219_201[nextMiss200zgensym_8df0a91a1f250219_201]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField200zgensym_8df0a91a1f250219_201)
				switch curField200zgensym_8df0a91a1f250219_201 {
				// -- templateUnmarshalMsg ends here --

				case "Sent_zid00_tim":
					found200zgensym_8df0a91a1f250219_201[0] = true
					z.UnackedPing.Sent, bts, err = nbs.ReadTimeBytes(bts)

					if err != nil {
						return
					}
				case "Term_zid01_i64":
					found200zgensym_8df0a91a1f250219_201[1] = true
					z.UnackedPing.Term, bts, err = nbs.ReadInt64Bytes(bts)

					if err != nil {
						return
					}
				case "AEID_zid02_str":
					found200zgensym_8df0a91a1f250219_201[2] = true
					z.UnackedPing.AEID, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						return
					}
				}
			}
			if nextMiss200zgensym_8df0a91a1f250219_201 != -1 {
				bts = nbs.PopAlwaysNil()
			}

		case "LastFullPing_zid09_rct":
			found198zgensym_8df0a91a1f250219_199[9] = true
			const maxFields202zgensym_8df0a91a1f250219_203 = 3

			// -- templateUnmarshalMsg starts here--
			var totalEncodedFields202zgensym_8df0a91a1f250219_203 uint32
			if !nbs.AlwaysNil {
				totalEncodedFields202zgensym_8df0a91a1f250219_203, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
			}
			encodedFieldsLeft202zgensym_8df0a91a1f250219_203 := totalEncodedFields202zgensym_8df0a91a1f250219_203
			missingFieldsLeft202zgensym_8df0a91a1f250219_203 := maxFields202zgensym_8df0a91a1f250219_203 - totalEncodedFields202zgensym_8df0a91a1f250219_203

			var nextMiss202zgensym_8df0a91a1f250219_203 int32 = -1
			var found202zgensym_8df0a91a1f250219_203 [maxFields202zgensym_8df0a91a1f250219_203]bool
			var curField202zgensym_8df0a91a1f250219_203 string

		doneWithStruct202zgensym_8df0a91a1f250219_203:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft202zgensym_8df0a91a1f250219_203 > 0 || missingFieldsLeft202zgensym_8df0a91a1f250219_203 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft202zgensym_8df0a91a1f250219_203, missingFieldsLeft202zgensym_8df0a91a1f250219_203, msgp.ShowFound(found202zgensym_8df0a91a1f250219_203[:]), unmarshalMsgFieldOrder202zgensym_8df0a91a1f250219_203)
				if encodedFieldsLeft202zgensym_8df0a91a1f250219_203 > 0 {
					encodedFieldsLeft202zgensym_8df0a91a1f250219_203--
					field, bts, err = nbs.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					curField202zgensym_8df0a91a1f250219_203 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss202zgensym_8df0a91a1f250219_203 < 0 {
						// set bts to contain just mnil (0xc0)
						bts = nbs.PushAlwaysNil(bts)
						nextMiss202zgensym_8df0a91a1f250219_203 = 0
					}
					for nextMiss202zgensym_8df0a91a1f250219_203 < maxFields202zgensym_8df0a91a1f250219_203 && (found202zgensym_8df0a91a1f250219_203[nextMiss202zgensym_8df0a91a1f250219_203] || unmarshalMsgFieldSkip202zgensym_8df0a91a1f250219_203[nextMiss202zgensym_8df0a91a1f250219_203]) {
						nextMiss202zgensym_8df0a91a1f250219_203++
					}
					if nextMiss202zgensym_8df0a91a1f250219_203 == maxFields202zgensym_8df0a91a1f250219_203 {
						// filled all the empty fields!
						break doneWithStruct202zgensym_8df0a91a1f250219_203
					}
					missingFieldsLeft202zgensym_8df0a91a1f250219_203--
					curField202zgensym_8df0a91a1f250219_203 = unmarshalMsgFieldOrder202zgensym_8df0a91a1f250219_203[nextMiss202zgensym_8df0a91a1f250219_203]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField202zgensym_8df0a91a1f250219_203)
				switch curField202zgensym_8df0a91a1f250219_203 {
				// -- templateUnmarshalMsg ends here --

				case "Sent_zid00_tim":
					found202zgensym_8df0a91a1f250219_203[0] = true
					z.LastFullPing.Sent, bts, err = nbs.ReadTimeBytes(bts)

					if err != nil {
						return
					}
				case "Term_zid01_i64":
					found202zgensym_8df0a91a1f250219_203[1] = true
					z.LastFullPing.Term, bts, err = nbs.ReadInt64Bytes(bts)

					if err != nil {
						return
					}
				case "AEID_zid02_str":
					found202zgensym_8df0a91a1f250219_203[2] = true
					z.LastFullPing.AEID, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						return
					}
				}
			}
			if nextMiss202zgensym_8df0a91a1f250219_203 != -1 {
				bts = nbs.PopAlwaysNil()
			}

		case "LastFullPong_zid10_rct":
			found198zgensym_8df0a91a1f250219_199[10] = true
			bts, err = z.LastFullPong.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "LastHeardAnything_zid11_tim":
			found198zgensym_8df0a91a1f250219_199[11] = true
			z.LastHeardAnything, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "LargestCommonRaftIndex_zid12_i64":
			found198zgensym_8df0a91a1f250219_199[12] = true
			z.LargestCommonRaftIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "MinElectionTimeoutDur_zid13_dur":
			found198zgensym_8df0a91a1f250219_199[13] = true
			z.MinElectionTimeoutDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "PreVoteOn_zid14_boo":
			found198zgensym_8df0a91a1f250219_199[14] = true
			z.PreVoteOn, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "MC_zid15_ptr":
			found198zgensym_8df0a91a1f250219_199[15] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss198zgensym_8df0a91a1f250219_199 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RaftNodeInfo
var unmarshalMsgFieldOrder198zgensym_8df0a91a1f250219_199 = []string{"PeerID_zid00_str", "PeerName_zid01_str", "PeerServiceName_zid02_str", "PeerServiceNameVersion_zid03_str", "PeerURL_zid04_str", "RemoteBaseServerAddr_zid05_str", "IsInspectResponder_zid06_boo", "MatchIndex_zid07_i64", "UnackedPing_zid08_rct", "LastFullPing_zid09_rct", "LastFullPong_zid10_rct", "LastHeardAnything_zid11_tim", "LargestCommonRaftIndex_zid12_i64", "MinElectionTimeoutDur_zid13_dur", "PreVoteOn_zid14_boo", "MC_zid15_ptr"}

var unmarshalMsgFieldSkip198zgensym_8df0a91a1f250219_199 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fields of Ping
var unmarshalMsgFieldOrder200zgensym_8df0a91a1f250219_201 = []string{"Sent_zid00_tim", "Term_zid01_i64", "AEID_zid02_str"}

var unmarshalMsgFieldSkip200zgensym_8df0a91a1f250219_201 = []bool{false, false, false}

// fields of Ping
var unmarshalMsgFieldOrder202zgensym_8df0a91a1f250219_203 = []string{"Sent_zid00_tim", "Term_zid01_i64", "AEID_zid02_str"}

var unmarshalMsgFieldSkip202zgensym_8df0a91a1f250219_203 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RaftNodeInfo) Msgsize() (s int) {
	s = 3 + 17 + msgp.StringPrefixSize + len(z.PeerID) + 19 + msgp.StringPrefixSize + len(z.PeerName) + 26 + msgp.StringPrefixSize + len(z.PeerServiceName) + 34 + msgp.StringPrefixSize + len(z.PeerServiceNameVersion) + 18 + msgp.StringPrefixSize + len(z.PeerURL) + 31 + msgp.StringPrefixSize + len(z.RemoteBaseServerAddr) + 29 + msgp.BoolSize + 21 + msgp.Int64Size + 22 + 1 + 15 + msgp.TimeSize + 15 + msgp.Int64Size + 15 + msgp.StringPrefixSize + len(z.UnackedPing.AEID) + 23 + 1 + 15 + msgp.TimeSize + 15 + msgp.Int64Size + 15 + msgp.StringPrefixSize + len(z.LastFullPing.AEID) + 23 + z.LastFullPong.Msgsize() + 28 + msgp.TimeSize + 34 + msgp.Int64Size + 32 + msgp.DurationSize + 20 + msgp.BoolSize + 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	return
}
func (z *RaftNodeInfo) Gstring() (r string) {
	r = "&RaftNodeInfo{\n"
	r += fmt.Sprintf("                PeerID: \"%v\",\n", z.PeerID)
	r += fmt.Sprintf("              PeerName: \"%v\",\n", z.PeerName)
	r += fmt.Sprintf("       PeerServiceName: \"%v\",\n", z.PeerServiceName)
	r += fmt.Sprintf("PeerServiceNameVersion: \"%v\",\n", z.PeerServiceNameVersion)
	r += fmt.Sprintf("               PeerURL: \"%v\",\n", z.PeerURL)
	r += fmt.Sprintf("  RemoteBaseServerAddr: \"%v\",\n", z.RemoteBaseServerAddr)
	r += fmt.Sprintf("    IsInspectResponder: %v,\n", z.IsInspectResponder)
	r += fmt.Sprintf("            MatchIndex: %v,\n", z.MatchIndex)
	r += fmt.Sprintf("           UnackedPing: %v,\n", z.UnackedPing)
	r += fmt.Sprintf("          LastFullPing: %v,\n", z.LastFullPing)
	r += fmt.Sprintf("          LastFullPong: %v,\n", z.LastFullPong)
	r += fmt.Sprintf("     LastHeardAnything: %v,\n", z.LastHeardAnything)
	r += fmt.Sprintf("LargestCommonRaftIndex: %v,\n", z.LargestCommonRaftIndex)
	r += fmt.Sprintf(" MinElectionTimeoutDur: %v,\n", z.MinElectionTimeoutDur)
	r += fmt.Sprintf("             PreVoteOn: %v,\n", z.PreVoteOn)
	r += fmt.Sprintf("                    MC: %v,\n", z.MC)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RaftRole) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8df0a91a1f250219_204 int
		zgensym_8df0a91a1f250219_204, err = dc.ReadInt()
		(*z) = RaftRole(zgensym_8df0a91a1f250219_204)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z RaftRole) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RaftRole) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RaftRole) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RaftRole) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8df0a91a1f250219_205 int
		zgensym_8df0a91a1f250219_205, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = RaftRole(zgensym_8df0a91a1f250219_205)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RaftRole) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RaftState) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields208zgensym_8df0a91a1f250219_209 = 23

	// -- templateDecodeMsg starts here--
	var totalEncodedFields208zgensym_8df0a91a1f250219_209 uint32
	totalEncodedFields208zgensym_8df0a91a1f250219_209, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft208zgensym_8df0a91a1f250219_209 := totalEncodedFields208zgensym_8df0a91a1f250219_209
	missingFieldsLeft208zgensym_8df0a91a1f250219_209 := maxFields208zgensym_8df0a91a1f250219_209 - totalEncodedFields208zgensym_8df0a91a1f250219_209

	var nextMiss208zgensym_8df0a91a1f250219_209 int32 = -1
	var found208zgensym_8df0a91a1f250219_209 [maxFields208zgensym_8df0a91a1f250219_209]bool
	var curField208zgensym_8df0a91a1f250219_209 string

doneWithStruct208zgensym_8df0a91a1f250219_209:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft208zgensym_8df0a91a1f250219_209 > 0 || missingFieldsLeft208zgensym_8df0a91a1f250219_209 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft208zgensym_8df0a91a1f250219_209, missingFieldsLeft208zgensym_8df0a91a1f250219_209, msgp.ShowFound(found208zgensym_8df0a91a1f250219_209[:]), decodeMsgFieldOrder208zgensym_8df0a91a1f250219_209)
		if encodedFieldsLeft208zgensym_8df0a91a1f250219_209 > 0 {
			encodedFieldsLeft208zgensym_8df0a91a1f250219_209--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField208zgensym_8df0a91a1f250219_209 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss208zgensym_8df0a91a1f250219_209 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss208zgensym_8df0a91a1f250219_209 = 0
			}
			for nextMiss208zgensym_8df0a91a1f250219_209 < maxFields208zgensym_8df0a91a1f250219_209 && (found208zgensym_8df0a91a1f250219_209[nextMiss208zgensym_8df0a91a1f250219_209] || decodeMsgFieldSkip208zgensym_8df0a91a1f250219_209[nextMiss208zgensym_8df0a91a1f250219_209]) {
				nextMiss208zgensym_8df0a91a1f250219_209++
			}
			if nextMiss208zgensym_8df0a91a1f250219_209 == maxFields208zgensym_8df0a91a1f250219_209 {
				// filled all the empty fields!
				break doneWithStruct208zgensym_8df0a91a1f250219_209
			}
			missingFieldsLeft208zgensym_8df0a91a1f250219_209--
			curField208zgensym_8df0a91a1f250219_209 = decodeMsgFieldOrder208zgensym_8df0a91a1f250219_209[nextMiss208zgensym_8df0a91a1f250219_209]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField208zgensym_8df0a91a1f250219_209)
		switch curField208zgensym_8df0a91a1f250219_209 {
		// -- templateDecodeMsg ends here --

		case "Serial_zid00_i64":
			found208zgensym_8df0a91a1f250219_209[0] = true
			z.Serial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "PeerName_zid01_str":
			found208zgensym_8df0a91a1f250219_209[1] = true
			z.PeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceName_zid02_str":
			found208zgensym_8df0a91a1f250219_209[2] = true
			z.PeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid03_str":
			found208zgensym_8df0a91a1f250219_209[3] = true
			z.PeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerID_zid04_str":
			found208zgensym_8df0a91a1f250219_209[4] = true
			z.PeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ClusterID_zid05_str":
			found208zgensym_8df0a91a1f250219_209[5] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CurrentTerm_zid06_i64":
			found208zgensym_8df0a91a1f250219_209[6] = true
			z.CurrentTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "VotedFor_zid07_str":
			found208zgensym_8df0a91a1f250219_209[7] = true
			z.VotedFor, err = dc.ReadString()
			if err != nil {
				return
			}
		case "VotedForName_zid08_str":
			found208zgensym_8df0a91a1f250219_209[8] = true
			z.VotedForName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HaveVoted_zid09_boo":
			found208zgensym_8df0a91a1f250219_209[9] = true
			z.HaveVoted, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "HaveVotedTerm_zid10_i64":
			found208zgensym_8df0a91a1f250219_209[10] = true
			z.HaveVotedTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CommitIndex_zid11_i64":
			found208zgensym_8df0a91a1f250219_209[11] = true
			z.CommitIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CommitIndexEntryTerm_zid12_i64":
			found208zgensym_8df0a91a1f250219_209[12] = true
			z.CommitIndexEntryTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LastApplied_zid13_i64":
			found208zgensym_8df0a91a1f250219_209[13] = true
			z.LastApplied, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LastAppliedTerm_zid14_i64":
			found208zgensym_8df0a91a1f250219_209[14] = true
			z.LastAppliedTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "KVstore_zid15_ptr":
			found208zgensym_8df0a91a1f250219_209[15] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.KVstore != nil {
					dc.PushAlwaysNil()
					err = z.KVstore.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.KVstore == nil {
					z.KVstore = new(KVStore)
				}
				dc.DedupIndexEachPtr(z.KVstore)

				err = z.KVstore.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "MC_zid16_ptr":
			found208zgensym_8df0a91a1f250219_209[16] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Known_zid17_ptr":
			found208zgensym_8df0a91a1f250219_209[17] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Known != nil {
					dc.PushAlwaysNil()
					err = z.Known.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Known == nil {
					z.Known = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.Known)

				err = z.Known.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Observers_zid18_ptr":
			found208zgensym_8df0a91a1f250219_209[18] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Observers != nil {
					dc.PushAlwaysNil()
					err = z.Observers.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Observers == nil {
					z.Observers = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.Observers)

				err = z.Observers.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ShadowReplicas_zid19_ptr":
			found208zgensym_8df0a91a1f250219_209[19] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.ShadowReplicas != nil {
					dc.PushAlwaysNil()
					err = z.ShadowReplicas.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.ShadowReplicas == nil {
					z.ShadowReplicas = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.ShadowReplicas)

				err = z.ShadowReplicas.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "LastSaveTimestamp_zid20_tim":
			found208zgensym_8df0a91a1f250219_209[20] = true
			z.LastSaveTimestamp, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "CompactionDiscardedLast_zid21_rct":
			found208zgensym_8df0a91a1f250219_209[21] = true
			const maxFields210zgensym_8df0a91a1f250219_211 = 2

			// -- templateDecodeMsg starts here--
			var totalEncodedFields210zgensym_8df0a91a1f250219_211 uint32
			totalEncodedFields210zgensym_8df0a91a1f250219_211, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			encodedFieldsLeft210zgensym_8df0a91a1f250219_211 := totalEncodedFields210zgensym_8df0a91a1f250219_211
			missingFieldsLeft210zgensym_8df0a91a1f250219_211 := maxFields210zgensym_8df0a91a1f250219_211 - totalEncodedFields210zgensym_8df0a91a1f250219_211

			var nextMiss210zgensym_8df0a91a1f250219_211 int32 = -1
			var found210zgensym_8df0a91a1f250219_211 [maxFields210zgensym_8df0a91a1f250219_211]bool
			var curField210zgensym_8df0a91a1f250219_211 string

		doneWithStruct210zgensym_8df0a91a1f250219_211:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft210zgensym_8df0a91a1f250219_211 > 0 || missingFieldsLeft210zgensym_8df0a91a1f250219_211 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft210zgensym_8df0a91a1f250219_211, missingFieldsLeft210zgensym_8df0a91a1f250219_211, msgp.ShowFound(found210zgensym_8df0a91a1f250219_211[:]), decodeMsgFieldOrder210zgensym_8df0a91a1f250219_211)
				if encodedFieldsLeft210zgensym_8df0a91a1f250219_211 > 0 {
					encodedFieldsLeft210zgensym_8df0a91a1f250219_211--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					curField210zgensym_8df0a91a1f250219_211 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss210zgensym_8df0a91a1f250219_211 < 0 {
						// tell the reader to only give us Nils
						// until further notice.
						dc.PushAlwaysNil()
						nextMiss210zgensym_8df0a91a1f250219_211 = 0
					}
					for nextMiss210zgensym_8df0a91a1f250219_211 < maxFields210zgensym_8df0a91a1f250219_211 && (found210zgensym_8df0a91a1f250219_211[nextMiss210zgensym_8df0a91a1f250219_211] || decodeMsgFieldSkip210zgensym_8df0a91a1f250219_211[nextMiss210zgensym_8df0a91a1f250219_211]) {
						nextMiss210zgensym_8df0a91a1f250219_211++
					}
					if nextMiss210zgensym_8df0a91a1f250219_211 == maxFields210zgensym_8df0a91a1f250219_211 {
						// filled all the empty fields!
						break doneWithStruct210zgensym_8df0a91a1f250219_211
					}
					missingFieldsLeft210zgensym_8df0a91a1f250219_211--
					curField210zgensym_8df0a91a1f250219_211 = decodeMsgFieldOrder210zgensym_8df0a91a1f250219_211[nextMiss210zgensym_8df0a91a1f250219_211]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField210zgensym_8df0a91a1f250219_211)
				switch curField210zgensym_8df0a91a1f250219_211 {
				// -- templateDecodeMsg ends here --

				case "Index_zid00_i64":
					found210zgensym_8df0a91a1f250219_211[0] = true
					z.CompactionDiscardedLast.Index, err = dc.ReadInt64()
					if err != nil {
						return
					}
				case "Term_zid01_i64":
					found210zgensym_8df0a91a1f250219_211[1] = true
					z.CompactionDiscardedLast.Term, err = dc.ReadInt64()
					if err != nil {
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						return
					}
				}
			}
			if nextMiss210zgensym_8df0a91a1f250219_211 != -1 {
				dc.PopAlwaysNil()
			}

		case "SessTable_zid22_map":
			found208zgensym_8df0a91a1f250219_209[22] = true
			var zgensym_8df0a91a1f250219_212 uint32
			zgensym_8df0a91a1f250219_212, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.SessTable == nil && zgensym_8df0a91a1f250219_212 > 0 {
				z.SessTable = make(map[string]*SessionTableEntry, zgensym_8df0a91a1f250219_212)
			} else if len(z.SessTable) > 0 {
				for key, _ := range z.SessTable {
					delete(z.SessTable, key)
				}
			}
			for zgensym_8df0a91a1f250219_212 > 0 {
				zgensym_8df0a91a1f250219_212--
				var zgensym_8df0a91a1f250219_206 string
				var zgensym_8df0a91a1f250219_207 *SessionTableEntry
				zgensym_8df0a91a1f250219_206, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_207 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_207.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_207 == nil {
						zgensym_8df0a91a1f250219_207 = new(SessionTableEntry)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_207)

					err = zgensym_8df0a91a1f250219_207.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.SessTable[zgensym_8df0a91a1f250219_206] = zgensym_8df0a91a1f250219_207
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss208zgensym_8df0a91a1f250219_209 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RaftState
var decodeMsgFieldOrder208zgensym_8df0a91a1f250219_209 = []string{"Serial_zid00_i64", "PeerName_zid01_str", "PeerServiceName_zid02_str", "PeerServiceNameVersion_zid03_str", "PeerID_zid04_str", "ClusterID_zid05_str", "CurrentTerm_zid06_i64", "VotedFor_zid07_str", "VotedForName_zid08_str", "HaveVoted_zid09_boo", "HaveVotedTerm_zid10_i64", "CommitIndex_zid11_i64", "CommitIndexEntryTerm_zid12_i64", "LastApplied_zid13_i64", "LastAppliedTerm_zid14_i64", "KVstore_zid15_ptr", "MC_zid16_ptr", "Known_zid17_ptr", "Observers_zid18_ptr", "ShadowReplicas_zid19_ptr", "LastSaveTimestamp_zid20_tim", "CompactionDiscardedLast_zid21_rct", "SessTable_zid22_map"}

var decodeMsgFieldSkip208zgensym_8df0a91a1f250219_209 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fields of IndexTerm
var decodeMsgFieldOrder210zgensym_8df0a91a1f250219_211 = []string{"Index_zid00_i64", "Term_zid01_i64"}

var decodeMsgFieldSkip210zgensym_8df0a91a1f250219_211 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RaftState) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 23
	}
	var fieldsInUse uint32 = 23
	isempty[0] = (z.Serial == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.PeerName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.PeerServiceName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.PeerServiceNameVersion) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.PeerID) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.CurrentTerm == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.VotedFor) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.VotedForName) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (!z.HaveVoted) // bool, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.HaveVotedTerm == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.CommitIndex == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.CommitIndexEntryTerm == 0) // number, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (z.LastApplied == 0) // number, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.LastAppliedTerm == 0) // number, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (z.KVstore == nil) // pointer, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.MC == nil) // pointer, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (z.Known == nil) // pointer, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (z.Observers == nil) // pointer, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (z.ShadowReplicas == nil) // pointer, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (z.LastSaveTimestamp.IsZero()) // time.Time, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = false // struct values are never empty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (len(z.SessTable) == 0) // string, omitempty
	if isempty[22] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RaftState) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_213 [23]bool
	fieldsInUse_zgensym_8df0a91a1f250219_214 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_213[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_214 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RaftState'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_213[0] {
		// write "Serial_zid00_i64"
		err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Serial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[1] {
		// write "PeerName_zid01_str"
		err = en.Append(0xb2, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[2] {
		// write "PeerServiceName_zid02_str"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[3] {
		// write "PeerServiceNameVersion_zid03_str"
		err = en.Append(0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[4] {
		// write "PeerID_zid04_str"
		err = en.Append(0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[5] {
		// write "ClusterID_zid05_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[6] {
		// write "CurrentTerm_zid06_i64"
		err = en.Append(0xb5, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CurrentTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[7] {
		// write "VotedFor_zid07_str"
		err = en.Append(0xb2, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.VotedFor)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[8] {
		// write "VotedForName_zid08_str"
		err = en.Append(0xb6, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.VotedForName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[9] {
		// write "HaveVoted_zid09_boo"
		err = en.Append(0xb3, 0x48, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.HaveVoted)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[10] {
		// write "HaveVotedTerm_zid10_i64"
		err = en.Append(0xb7, 0x48, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.HaveVotedTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[11] {
		// write "CommitIndex_zid11_i64"
		err = en.Append(0xb5, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CommitIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[12] {
		// write "CommitIndexEntryTerm_zid12_i64"
		err = en.Append(0xbe, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CommitIndexEntryTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[13] {
		// write "LastApplied_zid13_i64"
		err = en.Append(0xb5, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastApplied)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[14] {
		// write "LastAppliedTerm_zid14_i64"
		err = en.Append(0xb9, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastAppliedTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[15] {
		// write "KVstore_zid15_ptr"
		err = en.Append(0xb1, 0x4b, 0x56, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.KVstore == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.KVstore.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[16] {
		// write "MC_zid16_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[17] {
		// write "Known_zid17_ptr"
		err = en.Append(0xaf, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Known == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Known.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[18] {
		// write "Observers_zid18_ptr"
		err = en.Append(0xb3, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Observers == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Observers.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[19] {
		// write "ShadowReplicas_zid19_ptr"
		err = en.Append(0xb8, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.ShadowReplicas == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ShadowReplicas.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[20] {
		// write "LastSaveTimestamp_zid20_tim"
		err = en.Append(0xbb, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.LastSaveTimestamp)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_213[21] {
		// write "CompactionDiscardedLast_zid21_rct"
		err = en.Append(0xd9, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}

		// honor the omitempty tags
		var empty_zgensym_8df0a91a1f250219_215 [2]bool
		fieldsInUse_zgensym_8df0a91a1f250219_216 := z.CompactionDiscardedLast.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_215[:])

		// map header
		err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_216 + 1)
		if err != nil {
			return err
		}

		// runtime struct type identification for 'IndexTerm'
		err = en.Append(0xa1, 0x40)
		if err != nil {
			return err
		}
		err = en.WriteStringFromBytes([]byte{0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x65, 0x72, 0x6d})
		if err != nil {
			return err
		}

		if !empty_zgensym_8df0a91a1f250219_215[0] {
			// write "Index_zid00_i64"
			err = en.Append(0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
			if err != nil {
				return err
			}
			err = en.WriteInt64(z.CompactionDiscardedLast.Index)
			if err != nil {
				return
			}
		}

		if !empty_zgensym_8df0a91a1f250219_215[1] {
			// write "Term_zid01_i64"
			err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			if err != nil {
				return err
			}
			err = en.WriteInt64(z.CompactionDiscardedLast.Term)
			if err != nil {
				return
			}
		}

	}

	if !empty_zgensym_8df0a91a1f250219_213[22] {
		// write "SessTable_zid22_map"
		err = en.Append(0xb3, 0x53, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.SessTable)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_206, zgensym_8df0a91a1f250219_207 := range z.SessTable {
			err = en.WriteString(zgensym_8df0a91a1f250219_206)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_207 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_207.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RaftState) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [23]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Serial_zid00_i64"
		o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Serial)
	}

	if !empty[1] {
		// string "PeerName_zid01_str"
		o = append(o, 0xb2, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerName)
	}

	if !empty[2] {
		// string "PeerServiceName_zid02_str"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceName)
	}

	if !empty[3] {
		// string "PeerServiceNameVersion_zid03_str"
		o = append(o, 0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceNameVersion)
	}

	if !empty[4] {
		// string "PeerID_zid04_str"
		o = append(o, 0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerID)
	}

	if !empty[5] {
		// string "ClusterID_zid05_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[6] {
		// string "CurrentTerm_zid06_i64"
		o = append(o, 0xb5, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CurrentTerm)
	}

	if !empty[7] {
		// string "VotedFor_zid07_str"
		o = append(o, 0xb2, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.VotedFor)
	}

	if !empty[8] {
		// string "VotedForName_zid08_str"
		o = append(o, 0xb6, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.VotedForName)
	}

	if !empty[9] {
		// string "HaveVoted_zid09_boo"
		o = append(o, 0xb3, 0x48, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.HaveVoted)
	}

	if !empty[10] {
		// string "HaveVotedTerm_zid10_i64"
		o = append(o, 0xb7, 0x48, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.HaveVotedTerm)
	}

	if !empty[11] {
		// string "CommitIndex_zid11_i64"
		o = append(o, 0xb5, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CommitIndex)
	}

	if !empty[12] {
		// string "CommitIndexEntryTerm_zid12_i64"
		o = append(o, 0xbe, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CommitIndexEntryTerm)
	}

	if !empty[13] {
		// string "LastApplied_zid13_i64"
		o = append(o, 0xb5, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastApplied)
	}

	if !empty[14] {
		// string "LastAppliedTerm_zid14_i64"
		o = append(o, 0xb9, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastAppliedTerm)
	}

	if !empty[15] {
		// string "KVstore_zid15_ptr"
		o = append(o, 0xb1, 0x4b, 0x56, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.KVstore == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.KVstore.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[16] {
		// string "MC_zid16_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[17] {
		// string "Known_zid17_ptr"
		o = append(o, 0xaf, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Known == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Known.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[18] {
		// string "Observers_zid18_ptr"
		o = append(o, 0xb3, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Observers == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Observers.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[19] {
		// string "ShadowReplicas_zid19_ptr"
		o = append(o, 0xb8, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.ShadowReplicas == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.ShadowReplicas.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[20] {
		// string "LastSaveTimestamp_zid20_tim"
		o = append(o, 0xbb, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.LastSaveTimestamp)
	}

	if !empty[21] {
		// string "CompactionDiscardedLast_zid21_rct"
		o = append(o, 0xd9, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x72, 0x63, 0x74)

		// honor the omitempty tags
		var empty [2]bool
		fieldsInUse := z.CompactionDiscardedLast.fieldsNotEmpty(empty[:])
		o = msgp.AppendMapHeader(o, fieldsInUse)

		if !empty[0] {
			// string "Index_zid00_i64"
			o = append(o, 0xaf, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
			o = msgp.AppendInt64(o, z.CompactionDiscardedLast.Index)
		}

		if !empty[1] {
			// string "Term_zid01_i64"
			o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
			o = msgp.AppendInt64(o, z.CompactionDiscardedLast.Term)
		}

	}

	if !empty[22] {
		// string "SessTable_zid22_map"
		o = append(o, 0xb3, 0x53, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.SessTable)))
		for zgensym_8df0a91a1f250219_206, zgensym_8df0a91a1f250219_207 := range z.SessTable {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_206)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_207 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_207.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RaftState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RaftState) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields217zgensym_8df0a91a1f250219_218 = 23

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields217zgensym_8df0a91a1f250219_218 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields217zgensym_8df0a91a1f250219_218, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft217zgensym_8df0a91a1f250219_218 := totalEncodedFields217zgensym_8df0a91a1f250219_218
	missingFieldsLeft217zgensym_8df0a91a1f250219_218 := maxFields217zgensym_8df0a91a1f250219_218 - totalEncodedFields217zgensym_8df0a91a1f250219_218

	var nextMiss217zgensym_8df0a91a1f250219_218 int32 = -1
	var found217zgensym_8df0a91a1f250219_218 [maxFields217zgensym_8df0a91a1f250219_218]bool
	var curField217zgensym_8df0a91a1f250219_218 string

doneWithStruct217zgensym_8df0a91a1f250219_218:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft217zgensym_8df0a91a1f250219_218 > 0 || missingFieldsLeft217zgensym_8df0a91a1f250219_218 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft217zgensym_8df0a91a1f250219_218, missingFieldsLeft217zgensym_8df0a91a1f250219_218, msgp.ShowFound(found217zgensym_8df0a91a1f250219_218[:]), unmarshalMsgFieldOrder217zgensym_8df0a91a1f250219_218)
		if encodedFieldsLeft217zgensym_8df0a91a1f250219_218 > 0 {
			encodedFieldsLeft217zgensym_8df0a91a1f250219_218--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField217zgensym_8df0a91a1f250219_218 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss217zgensym_8df0a91a1f250219_218 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss217zgensym_8df0a91a1f250219_218 = 0
			}
			for nextMiss217zgensym_8df0a91a1f250219_218 < maxFields217zgensym_8df0a91a1f250219_218 && (found217zgensym_8df0a91a1f250219_218[nextMiss217zgensym_8df0a91a1f250219_218] || unmarshalMsgFieldSkip217zgensym_8df0a91a1f250219_218[nextMiss217zgensym_8df0a91a1f250219_218]) {
				nextMiss217zgensym_8df0a91a1f250219_218++
			}
			if nextMiss217zgensym_8df0a91a1f250219_218 == maxFields217zgensym_8df0a91a1f250219_218 {
				// filled all the empty fields!
				break doneWithStruct217zgensym_8df0a91a1f250219_218
			}
			missingFieldsLeft217zgensym_8df0a91a1f250219_218--
			curField217zgensym_8df0a91a1f250219_218 = unmarshalMsgFieldOrder217zgensym_8df0a91a1f250219_218[nextMiss217zgensym_8df0a91a1f250219_218]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField217zgensym_8df0a91a1f250219_218)
		switch curField217zgensym_8df0a91a1f250219_218 {
		// -- templateUnmarshalMsg ends here --

		case "Serial_zid00_i64":
			found217zgensym_8df0a91a1f250219_218[0] = true
			z.Serial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "PeerName_zid01_str":
			found217zgensym_8df0a91a1f250219_218[1] = true
			z.PeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceName_zid02_str":
			found217zgensym_8df0a91a1f250219_218[2] = true
			z.PeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid03_str":
			found217zgensym_8df0a91a1f250219_218[3] = true
			z.PeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerID_zid04_str":
			found217zgensym_8df0a91a1f250219_218[4] = true
			z.PeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ClusterID_zid05_str":
			found217zgensym_8df0a91a1f250219_218[5] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CurrentTerm_zid06_i64":
			found217zgensym_8df0a91a1f250219_218[6] = true
			z.CurrentTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "VotedFor_zid07_str":
			found217zgensym_8df0a91a1f250219_218[7] = true
			z.VotedFor, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "VotedForName_zid08_str":
			found217zgensym_8df0a91a1f250219_218[8] = true
			z.VotedForName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "HaveVoted_zid09_boo":
			found217zgensym_8df0a91a1f250219_218[9] = true
			z.HaveVoted, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "HaveVotedTerm_zid10_i64":
			found217zgensym_8df0a91a1f250219_218[10] = true
			z.HaveVotedTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CommitIndex_zid11_i64":
			found217zgensym_8df0a91a1f250219_218[11] = true
			z.CommitIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CommitIndexEntryTerm_zid12_i64":
			found217zgensym_8df0a91a1f250219_218[12] = true
			z.CommitIndexEntryTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LastApplied_zid13_i64":
			found217zgensym_8df0a91a1f250219_218[13] = true
			z.LastApplied, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LastAppliedTerm_zid14_i64":
			found217zgensym_8df0a91a1f250219_218[14] = true
			z.LastAppliedTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "KVstore_zid15_ptr":
			found217zgensym_8df0a91a1f250219_218[15] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.KVstore != nil {
					z.KVstore.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.KVstore {
						z.KVstore.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.KVstore == nil {
						z.KVstore = new(KVStore)
					}

					bts, err = z.KVstore.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MC_zid16_ptr":
			found217zgensym_8df0a91a1f250219_218[16] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Known_zid17_ptr":
			found217zgensym_8df0a91a1f250219_218[17] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Known != nil {
					z.Known.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Known {
						z.Known.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Known == nil {
						z.Known = new(MemberConfig)
					}

					bts, err = z.Known.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Observers_zid18_ptr":
			found217zgensym_8df0a91a1f250219_218[18] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Observers != nil {
					z.Observers.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Observers {
						z.Observers.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Observers == nil {
						z.Observers = new(MemberConfig)
					}

					bts, err = z.Observers.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "ShadowReplicas_zid19_ptr":
			found217zgensym_8df0a91a1f250219_218[19] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.ShadowReplicas != nil {
					z.ShadowReplicas.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.ShadowReplicas {
						z.ShadowReplicas.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.ShadowReplicas == nil {
						z.ShadowReplicas = new(MemberConfig)
					}

					bts, err = z.ShadowReplicas.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "LastSaveTimestamp_zid20_tim":
			found217zgensym_8df0a91a1f250219_218[20] = true
			z.LastSaveTimestamp, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "CompactionDiscardedLast_zid21_rct":
			found217zgensym_8df0a91a1f250219_218[21] = true
			const maxFields219zgensym_8df0a91a1f250219_220 = 2

			// -- templateUnmarshalMsg starts here--
			var totalEncodedFields219zgensym_8df0a91a1f250219_220 uint32
			if !nbs.AlwaysNil {
				totalEncodedFields219zgensym_8df0a91a1f250219_220, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
			}
			encodedFieldsLeft219zgensym_8df0a91a1f250219_220 := totalEncodedFields219zgensym_8df0a91a1f250219_220
			missingFieldsLeft219zgensym_8df0a91a1f250219_220 := maxFields219zgensym_8df0a91a1f250219_220 - totalEncodedFields219zgensym_8df0a91a1f250219_220

			var nextMiss219zgensym_8df0a91a1f250219_220 int32 = -1
			var found219zgensym_8df0a91a1f250219_220 [maxFields219zgensym_8df0a91a1f250219_220]bool
			var curField219zgensym_8df0a91a1f250219_220 string

		doneWithStruct219zgensym_8df0a91a1f250219_220:
			// First fill all the encoded fields, then
			// treat the remaining, missing fields, as Nil.
			for encodedFieldsLeft219zgensym_8df0a91a1f250219_220 > 0 || missingFieldsLeft219zgensym_8df0a91a1f250219_220 > 0 {
				//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft219zgensym_8df0a91a1f250219_220, missingFieldsLeft219zgensym_8df0a91a1f250219_220, msgp.ShowFound(found219zgensym_8df0a91a1f250219_220[:]), unmarshalMsgFieldOrder219zgensym_8df0a91a1f250219_220)
				if encodedFieldsLeft219zgensym_8df0a91a1f250219_220 > 0 {
					encodedFieldsLeft219zgensym_8df0a91a1f250219_220--
					field, bts, err = nbs.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					curField219zgensym_8df0a91a1f250219_220 = msgp.UnsafeString(field)
				} else {
					//missing fields need handling
					if nextMiss219zgensym_8df0a91a1f250219_220 < 0 {
						// set bts to contain just mnil (0xc0)
						bts = nbs.PushAlwaysNil(bts)
						nextMiss219zgensym_8df0a91a1f250219_220 = 0
					}
					for nextMiss219zgensym_8df0a91a1f250219_220 < maxFields219zgensym_8df0a91a1f250219_220 && (found219zgensym_8df0a91a1f250219_220[nextMiss219zgensym_8df0a91a1f250219_220] || unmarshalMsgFieldSkip219zgensym_8df0a91a1f250219_220[nextMiss219zgensym_8df0a91a1f250219_220]) {
						nextMiss219zgensym_8df0a91a1f250219_220++
					}
					if nextMiss219zgensym_8df0a91a1f250219_220 == maxFields219zgensym_8df0a91a1f250219_220 {
						// filled all the empty fields!
						break doneWithStruct219zgensym_8df0a91a1f250219_220
					}
					missingFieldsLeft219zgensym_8df0a91a1f250219_220--
					curField219zgensym_8df0a91a1f250219_220 = unmarshalMsgFieldOrder219zgensym_8df0a91a1f250219_220[nextMiss219zgensym_8df0a91a1f250219_220]
				}
				//fmt.Printf("switching on curField: '%v'\n", curField219zgensym_8df0a91a1f250219_220)
				switch curField219zgensym_8df0a91a1f250219_220 {
				// -- templateUnmarshalMsg ends here --

				case "Index_zid00_i64":
					found219zgensym_8df0a91a1f250219_220[0] = true
					z.CompactionDiscardedLast.Index, bts, err = nbs.ReadInt64Bytes(bts)

					if err != nil {
						return
					}
				case "Term_zid01_i64":
					found219zgensym_8df0a91a1f250219_220[1] = true
					z.CompactionDiscardedLast.Term, bts, err = nbs.ReadInt64Bytes(bts)

					if err != nil {
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						return
					}
				}
			}
			if nextMiss219zgensym_8df0a91a1f250219_220 != -1 {
				bts = nbs.PopAlwaysNil()
			}

		case "SessTable_zid22_map":
			found217zgensym_8df0a91a1f250219_218[22] = true
			if nbs.AlwaysNil {
				if len(z.SessTable) > 0 {
					for key, _ := range z.SessTable {
						delete(z.SessTable, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_221 uint32
				zgensym_8df0a91a1f250219_221, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.SessTable == nil && zgensym_8df0a91a1f250219_221 > 0 {
					z.SessTable = make(map[string]*SessionTableEntry, zgensym_8df0a91a1f250219_221)
				} else if len(z.SessTable) > 0 {
					for key, _ := range z.SessTable {
						delete(z.SessTable, key)
					}
				}
				for zgensym_8df0a91a1f250219_221 > 0 {
					var zgensym_8df0a91a1f250219_206 string
					var zgensym_8df0a91a1f250219_207 *SessionTableEntry
					zgensym_8df0a91a1f250219_221--
					zgensym_8df0a91a1f250219_206, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_207 != nil {
							zgensym_8df0a91a1f250219_207.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_207 {
								zgensym_8df0a91a1f250219_207.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_207 == nil {
								zgensym_8df0a91a1f250219_207 = new(SessionTableEntry)
							}

							bts, err = zgensym_8df0a91a1f250219_207.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.SessTable[zgensym_8df0a91a1f250219_206] = zgensym_8df0a91a1f250219_207
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss217zgensym_8df0a91a1f250219_218 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RaftState
var unmarshalMsgFieldOrder217zgensym_8df0a91a1f250219_218 = []string{"Serial_zid00_i64", "PeerName_zid01_str", "PeerServiceName_zid02_str", "PeerServiceNameVersion_zid03_str", "PeerID_zid04_str", "ClusterID_zid05_str", "CurrentTerm_zid06_i64", "VotedFor_zid07_str", "VotedForName_zid08_str", "HaveVoted_zid09_boo", "HaveVotedTerm_zid10_i64", "CommitIndex_zid11_i64", "CommitIndexEntryTerm_zid12_i64", "LastApplied_zid13_i64", "LastAppliedTerm_zid14_i64", "KVstore_zid15_ptr", "MC_zid16_ptr", "Known_zid17_ptr", "Observers_zid18_ptr", "ShadowReplicas_zid19_ptr", "LastSaveTimestamp_zid20_tim", "CompactionDiscardedLast_zid21_rct", "SessTable_zid22_map"}

var unmarshalMsgFieldSkip217zgensym_8df0a91a1f250219_218 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fields of IndexTerm
var unmarshalMsgFieldOrder219zgensym_8df0a91a1f250219_220 = []string{"Index_zid00_i64", "Term_zid01_i64"}

var unmarshalMsgFieldSkip219zgensym_8df0a91a1f250219_220 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RaftState) Msgsize() (s int) {
	s = 3 + 17 + msgp.Int64Size + 19 + msgp.StringPrefixSize + len(z.PeerName) + 26 + msgp.StringPrefixSize + len(z.PeerServiceName) + 34 + msgp.StringPrefixSize + len(z.PeerServiceNameVersion) + 17 + msgp.StringPrefixSize + len(z.PeerID) + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 22 + msgp.Int64Size + 19 + msgp.StringPrefixSize + len(z.VotedFor) + 23 + msgp.StringPrefixSize + len(z.VotedForName) + 20 + msgp.BoolSize + 24 + msgp.Int64Size + 22 + msgp.Int64Size + 31 + msgp.Int64Size + 22 + msgp.Int64Size + 26 + msgp.Int64Size + 18
	if z.KVstore == nil {
		s += msgp.NilSize
	} else {
		s += z.KVstore.Msgsize()
	}
	s += 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	s += 16
	if z.Known == nil {
		s += msgp.NilSize
	} else {
		s += z.Known.Msgsize()
	}
	s += 20
	if z.Observers == nil {
		s += msgp.NilSize
	} else {
		s += z.Observers.Msgsize()
	}
	s += 25
	if z.ShadowReplicas == nil {
		s += msgp.NilSize
	} else {
		s += z.ShadowReplicas.Msgsize()
	}
	s += 28 + msgp.TimeSize + 35 + 1 + 16 + msgp.Int64Size + 15 + msgp.Int64Size + 20 + msgp.MapHeaderSize
	if z.SessTable != nil {
		for zgensym_8df0a91a1f250219_206, zgensym_8df0a91a1f250219_207 := range z.SessTable {
			_ = zgensym_8df0a91a1f250219_207
			_ = zgensym_8df0a91a1f250219_206
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_206)
			if zgensym_8df0a91a1f250219_207 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_207.Msgsize()
			}
		}
	}
	return
}
func (z *RaftState) Gstring() (r string) {
	r = "&RaftState{\n"
	r += fmt.Sprintf("                 Serial: %v,\n", z.Serial)
	r += fmt.Sprintf("               PeerName: \"%v\",\n", z.PeerName)
	r += fmt.Sprintf("        PeerServiceName: \"%v\",\n", z.PeerServiceName)
	r += fmt.Sprintf(" PeerServiceNameVersion: \"%v\",\n", z.PeerServiceNameVersion)
	r += fmt.Sprintf("                 PeerID: \"%v\",\n", z.PeerID)
	r += fmt.Sprintf("              ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("            CurrentTerm: %v,\n", z.CurrentTerm)
	r += fmt.Sprintf("               VotedFor: \"%v\",\n", z.VotedFor)
	r += fmt.Sprintf("           VotedForName: \"%v\",\n", z.VotedForName)
	r += fmt.Sprintf("              HaveVoted: %v,\n", z.HaveVoted)
	r += fmt.Sprintf("          HaveVotedTerm: %v,\n", z.HaveVotedTerm)
	r += fmt.Sprintf("            CommitIndex: %v,\n", z.CommitIndex)
	r += fmt.Sprintf("   CommitIndexEntryTerm: %v,\n", z.CommitIndexEntryTerm)
	r += fmt.Sprintf("            LastApplied: %v,\n", z.LastApplied)
	r += fmt.Sprintf("        LastAppliedTerm: %v,\n", z.LastAppliedTerm)
	r += fmt.Sprintf("                KVstore: %v,\n", z.KVstore)
	r += fmt.Sprintf("                     MC: %v,\n", z.MC)
	r += fmt.Sprintf("                  Known: %v,\n", z.Known)
	r += fmt.Sprintf("              Observers: %v,\n", z.Observers)
	r += fmt.Sprintf("         ShadowReplicas: %v,\n", z.ShadowReplicas)
	r += fmt.Sprintf("      LastSaveTimestamp: %v,\n", z.LastSaveTimestamp)
	r += fmt.Sprintf("CompactionDiscardedLast: %v,\n", z.CompactionDiscardedLast)
	r += fmt.Sprintf("              SessTable: %v,\n", z.SessTable)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *RequestVote) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields222zgensym_8df0a91a1f250219_223 = 13

	// -- templateDecodeMsg starts here--
	var totalEncodedFields222zgensym_8df0a91a1f250219_223 uint32
	totalEncodedFields222zgensym_8df0a91a1f250219_223, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft222zgensym_8df0a91a1f250219_223 := totalEncodedFields222zgensym_8df0a91a1f250219_223
	missingFieldsLeft222zgensym_8df0a91a1f250219_223 := maxFields222zgensym_8df0a91a1f250219_223 - totalEncodedFields222zgensym_8df0a91a1f250219_223

	var nextMiss222zgensym_8df0a91a1f250219_223 int32 = -1
	var found222zgensym_8df0a91a1f250219_223 [maxFields222zgensym_8df0a91a1f250219_223]bool
	var curField222zgensym_8df0a91a1f250219_223 string

doneWithStruct222zgensym_8df0a91a1f250219_223:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft222zgensym_8df0a91a1f250219_223 > 0 || missingFieldsLeft222zgensym_8df0a91a1f250219_223 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft222zgensym_8df0a91a1f250219_223, missingFieldsLeft222zgensym_8df0a91a1f250219_223, msgp.ShowFound(found222zgensym_8df0a91a1f250219_223[:]), decodeMsgFieldOrder222zgensym_8df0a91a1f250219_223)
		if encodedFieldsLeft222zgensym_8df0a91a1f250219_223 > 0 {
			encodedFieldsLeft222zgensym_8df0a91a1f250219_223--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField222zgensym_8df0a91a1f250219_223 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss222zgensym_8df0a91a1f250219_223 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss222zgensym_8df0a91a1f250219_223 = 0
			}
			for nextMiss222zgensym_8df0a91a1f250219_223 < maxFields222zgensym_8df0a91a1f250219_223 && (found222zgensym_8df0a91a1f250219_223[nextMiss222zgensym_8df0a91a1f250219_223] || decodeMsgFieldSkip222zgensym_8df0a91a1f250219_223[nextMiss222zgensym_8df0a91a1f250219_223]) {
				nextMiss222zgensym_8df0a91a1f250219_223++
			}
			if nextMiss222zgensym_8df0a91a1f250219_223 == maxFields222zgensym_8df0a91a1f250219_223 {
				// filled all the empty fields!
				break doneWithStruct222zgensym_8df0a91a1f250219_223
			}
			missingFieldsLeft222zgensym_8df0a91a1f250219_223--
			curField222zgensym_8df0a91a1f250219_223 = decodeMsgFieldOrder222zgensym_8df0a91a1f250219_223[nextMiss222zgensym_8df0a91a1f250219_223]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField222zgensym_8df0a91a1f250219_223)
		switch curField222zgensym_8df0a91a1f250219_223 {
		// -- templateDecodeMsg ends here --

		case "ClusterID_zid00_str":
			found222zgensym_8df0a91a1f250219_223[0] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found222zgensym_8df0a91a1f250219_223[1] = true
			z.FromPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found222zgensym_8df0a91a1f250219_223[2] = true
			z.FromPeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found222zgensym_8df0a91a1f250219_223[3] = true
			z.FromPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found222zgensym_8df0a91a1f250219_223[4] = true
			z.FromPeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CandidatesTerm_zid05_i64":
			found222zgensym_8df0a91a1f250219_223[5] = true
			z.CandidatesTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CandidateID_zid06_str":
			found222zgensym_8df0a91a1f250219_223[6] = true
			z.CandidateID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LastLogIndex_zid07_i64":
			found222zgensym_8df0a91a1f250219_223[7] = true
			z.LastLogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LastLogTerm_zid08_i64":
			found222zgensym_8df0a91a1f250219_223[8] = true
			z.LastLogTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "IsPreVote_zid09_boo":
			found222zgensym_8df0a91a1f250219_223[9] = true
			z.IsPreVote, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "LeadershipTransferFrom_zid10_str":
			found222zgensym_8df0a91a1f250219_223[10] = true
			z.LeadershipTransferFrom, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Weight_zid11_f64":
			found222zgensym_8df0a91a1f250219_223[11] = true
			z.Weight, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case "MC_zid12_ptr":
			found222zgensym_8df0a91a1f250219_223[12] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss222zgensym_8df0a91a1f250219_223 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RequestVote
var decodeMsgFieldOrder222zgensym_8df0a91a1f250219_223 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "CandidatesTerm_zid05_i64", "CandidateID_zid06_str", "LastLogIndex_zid07_i64", "LastLogTerm_zid08_i64", "IsPreVote_zid09_boo", "LeadershipTransferFrom_zid10_str", "Weight_zid11_f64", "MC_zid12_ptr"}

var decodeMsgFieldSkip222zgensym_8df0a91a1f250219_223 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *RequestVote) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 13
	}
	var fieldsInUse uint32 = 13
	isempty[0] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FromPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.FromPeerName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FromPeerServiceName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.FromPeerServiceNameVersion) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.CandidatesTerm == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.CandidateID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.LastLogIndex == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.LastLogTerm == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (!z.IsPreVote) // bool, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.LeadershipTransferFrom) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.Weight == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.MC == nil) // pointer, omitempty
	if isempty[12] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *RequestVote) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_224 [13]bool
	fieldsInUse_zgensym_8df0a91a1f250219_225 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_224[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_225 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'RequestVote'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_224[0] {
		// write "ClusterID_zid00_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[1] {
		// write "FromPeerID_zid01_str"
		err = en.Append(0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[2] {
		// write "FromPeerName_zid02_str"
		err = en.Append(0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[3] {
		// write "FromPeerServiceName_zid03_str"
		err = en.Append(0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[4] {
		// write "FromPeerServiceNameVersion_zid04_str"
		err = en.Append(0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[5] {
		// write "CandidatesTerm_zid05_i64"
		err = en.Append(0xb8, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CandidatesTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[6] {
		// write "CandidateID_zid06_str"
		err = en.Append(0xb5, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CandidateID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[7] {
		// write "LastLogIndex_zid07_i64"
		err = en.Append(0xb6, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastLogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[8] {
		// write "LastLogTerm_zid08_i64"
		err = en.Append(0xb5, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastLogTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[9] {
		// write "IsPreVote_zid09_boo"
		err = en.Append(0xb3, 0x49, 0x73, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsPreVote)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[10] {
		// write "LeadershipTransferFrom_zid10_str"
		err = en.Append(0xd9, 0x20, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeadershipTransferFrom)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[11] {
		// write "Weight_zid11_f64"
		err = en.Append(0xb0, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x66, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteFloat64(z.Weight)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_224[12] {
		// write "MC_zid12_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RequestVote) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [13]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ClusterID_zid00_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[1] {
		// string "FromPeerID_zid01_str"
		o = append(o, 0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerID)
	}

	if !empty[2] {
		// string "FromPeerName_zid02_str"
		o = append(o, 0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerName)
	}

	if !empty[3] {
		// string "FromPeerServiceName_zid03_str"
		o = append(o, 0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceName)
	}

	if !empty[4] {
		// string "FromPeerServiceNameVersion_zid04_str"
		o = append(o, 0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceNameVersion)
	}

	if !empty[5] {
		// string "CandidatesTerm_zid05_i64"
		o = append(o, 0xb8, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CandidatesTerm)
	}

	if !empty[6] {
		// string "CandidateID_zid06_str"
		o = append(o, 0xb5, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CandidateID)
	}

	if !empty[7] {
		// string "LastLogIndex_zid07_i64"
		o = append(o, 0xb6, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastLogIndex)
	}

	if !empty[8] {
		// string "LastLogTerm_zid08_i64"
		o = append(o, 0xb5, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastLogTerm)
	}

	if !empty[9] {
		// string "IsPreVote_zid09_boo"
		o = append(o, 0xb3, 0x49, 0x73, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsPreVote)
	}

	if !empty[10] {
		// string "LeadershipTransferFrom_zid10_str"
		o = append(o, 0xd9, 0x20, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeadershipTransferFrom)
	}

	if !empty[11] {
		// string "Weight_zid11_f64"
		o = append(o, 0xb0, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x66, 0x36, 0x34)
		o = msgp.AppendFloat64(o, z.Weight)
	}

	if !empty[12] {
		// string "MC_zid12_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestVote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *RequestVote) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields226zgensym_8df0a91a1f250219_227 = 13

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields226zgensym_8df0a91a1f250219_227 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields226zgensym_8df0a91a1f250219_227, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft226zgensym_8df0a91a1f250219_227 := totalEncodedFields226zgensym_8df0a91a1f250219_227
	missingFieldsLeft226zgensym_8df0a91a1f250219_227 := maxFields226zgensym_8df0a91a1f250219_227 - totalEncodedFields226zgensym_8df0a91a1f250219_227

	var nextMiss226zgensym_8df0a91a1f250219_227 int32 = -1
	var found226zgensym_8df0a91a1f250219_227 [maxFields226zgensym_8df0a91a1f250219_227]bool
	var curField226zgensym_8df0a91a1f250219_227 string

doneWithStruct226zgensym_8df0a91a1f250219_227:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft226zgensym_8df0a91a1f250219_227 > 0 || missingFieldsLeft226zgensym_8df0a91a1f250219_227 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft226zgensym_8df0a91a1f250219_227, missingFieldsLeft226zgensym_8df0a91a1f250219_227, msgp.ShowFound(found226zgensym_8df0a91a1f250219_227[:]), unmarshalMsgFieldOrder226zgensym_8df0a91a1f250219_227)
		if encodedFieldsLeft226zgensym_8df0a91a1f250219_227 > 0 {
			encodedFieldsLeft226zgensym_8df0a91a1f250219_227--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField226zgensym_8df0a91a1f250219_227 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss226zgensym_8df0a91a1f250219_227 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss226zgensym_8df0a91a1f250219_227 = 0
			}
			for nextMiss226zgensym_8df0a91a1f250219_227 < maxFields226zgensym_8df0a91a1f250219_227 && (found226zgensym_8df0a91a1f250219_227[nextMiss226zgensym_8df0a91a1f250219_227] || unmarshalMsgFieldSkip226zgensym_8df0a91a1f250219_227[nextMiss226zgensym_8df0a91a1f250219_227]) {
				nextMiss226zgensym_8df0a91a1f250219_227++
			}
			if nextMiss226zgensym_8df0a91a1f250219_227 == maxFields226zgensym_8df0a91a1f250219_227 {
				// filled all the empty fields!
				break doneWithStruct226zgensym_8df0a91a1f250219_227
			}
			missingFieldsLeft226zgensym_8df0a91a1f250219_227--
			curField226zgensym_8df0a91a1f250219_227 = unmarshalMsgFieldOrder226zgensym_8df0a91a1f250219_227[nextMiss226zgensym_8df0a91a1f250219_227]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField226zgensym_8df0a91a1f250219_227)
		switch curField226zgensym_8df0a91a1f250219_227 {
		// -- templateUnmarshalMsg ends here --

		case "ClusterID_zid00_str":
			found226zgensym_8df0a91a1f250219_227[0] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found226zgensym_8df0a91a1f250219_227[1] = true
			z.FromPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found226zgensym_8df0a91a1f250219_227[2] = true
			z.FromPeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found226zgensym_8df0a91a1f250219_227[3] = true
			z.FromPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found226zgensym_8df0a91a1f250219_227[4] = true
			z.FromPeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CandidatesTerm_zid05_i64":
			found226zgensym_8df0a91a1f250219_227[5] = true
			z.CandidatesTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CandidateID_zid06_str":
			found226zgensym_8df0a91a1f250219_227[6] = true
			z.CandidateID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LastLogIndex_zid07_i64":
			found226zgensym_8df0a91a1f250219_227[7] = true
			z.LastLogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LastLogTerm_zid08_i64":
			found226zgensym_8df0a91a1f250219_227[8] = true
			z.LastLogTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "IsPreVote_zid09_boo":
			found226zgensym_8df0a91a1f250219_227[9] = true
			z.IsPreVote, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "LeadershipTransferFrom_zid10_str":
			found226zgensym_8df0a91a1f250219_227[10] = true
			z.LeadershipTransferFrom, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Weight_zid11_f64":
			found226zgensym_8df0a91a1f250219_227[11] = true
			z.Weight, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case "MC_zid12_ptr":
			found226zgensym_8df0a91a1f250219_227[12] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss226zgensym_8df0a91a1f250219_227 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of RequestVote
var unmarshalMsgFieldOrder226zgensym_8df0a91a1f250219_227 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "CandidatesTerm_zid05_i64", "CandidateID_zid06_str", "LastLogIndex_zid07_i64", "LastLogTerm_zid08_i64", "IsPreVote_zid09_boo", "LeadershipTransferFrom_zid10_str", "Weight_zid11_f64", "MC_zid12_ptr"}

var unmarshalMsgFieldSkip226zgensym_8df0a91a1f250219_227 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestVote) Msgsize() (s int) {
	s = 1 + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 21 + msgp.StringPrefixSize + len(z.FromPeerID) + 23 + msgp.StringPrefixSize + len(z.FromPeerName) + 30 + msgp.StringPrefixSize + len(z.FromPeerServiceName) + 38 + msgp.StringPrefixSize + len(z.FromPeerServiceNameVersion) + 25 + msgp.Int64Size + 22 + msgp.StringPrefixSize + len(z.CandidateID) + 23 + msgp.Int64Size + 22 + msgp.Int64Size + 20 + msgp.BoolSize + 34 + msgp.StringPrefixSize + len(z.LeadershipTransferFrom) + 17 + msgp.Float64Size + 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	return
}
func (z *RequestVote) Gstring() (r string) {
	r = "&RequestVote{\n"
	r += fmt.Sprintf("                 ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("                FromPeerID: \"%v\",\n", z.FromPeerID)
	r += fmt.Sprintf("              FromPeerName: \"%v\",\n", z.FromPeerName)
	r += fmt.Sprintf("       FromPeerServiceName: \"%v\",\n", z.FromPeerServiceName)
	r += fmt.Sprintf("FromPeerServiceNameVersion: \"%v\",\n", z.FromPeerServiceNameVersion)
	r += fmt.Sprintf("            CandidatesTerm: %v,\n", z.CandidatesTerm)
	r += fmt.Sprintf("               CandidateID: \"%v\",\n", z.CandidateID)
	r += fmt.Sprintf("              LastLogIndex: %v,\n", z.LastLogIndex)
	r += fmt.Sprintf("               LastLogTerm: %v,\n", z.LastLogTerm)
	r += fmt.Sprintf("                 IsPreVote: %v,\n", z.IsPreVote)
	r += fmt.Sprintf("    LeadershipTransferFrom: \"%v\",\n", z.LeadershipTransferFrom)
	r += fmt.Sprintf("                    Weight: %v,\n", z.Weight)
	r += fmt.Sprintf("                        MC: %v,\n", z.MC)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Session) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields228zgensym_8df0a91a1f250219_229 = 19

	// -- templateDecodeMsg starts here--
	var totalEncodedFields228zgensym_8df0a91a1f250219_229 uint32
	totalEncodedFields228zgensym_8df0a91a1f250219_229, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft228zgensym_8df0a91a1f250219_229 := totalEncodedFields228zgensym_8df0a91a1f250219_229
	missingFieldsLeft228zgensym_8df0a91a1f250219_229 := maxFields228zgensym_8df0a91a1f250219_229 - totalEncodedFields228zgensym_8df0a91a1f250219_229

	var nextMiss228zgensym_8df0a91a1f250219_229 int32 = -1
	var found228zgensym_8df0a91a1f250219_229 [maxFields228zgensym_8df0a91a1f250219_229]bool
	var curField228zgensym_8df0a91a1f250219_229 string

doneWithStruct228zgensym_8df0a91a1f250219_229:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft228zgensym_8df0a91a1f250219_229 > 0 || missingFieldsLeft228zgensym_8df0a91a1f250219_229 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft228zgensym_8df0a91a1f250219_229, missingFieldsLeft228zgensym_8df0a91a1f250219_229, msgp.ShowFound(found228zgensym_8df0a91a1f250219_229[:]), decodeMsgFieldOrder228zgensym_8df0a91a1f250219_229)
		if encodedFieldsLeft228zgensym_8df0a91a1f250219_229 > 0 {
			encodedFieldsLeft228zgensym_8df0a91a1f250219_229--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField228zgensym_8df0a91a1f250219_229 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss228zgensym_8df0a91a1f250219_229 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss228zgensym_8df0a91a1f250219_229 = 0
			}
			for nextMiss228zgensym_8df0a91a1f250219_229 < maxFields228zgensym_8df0a91a1f250219_229 && (found228zgensym_8df0a91a1f250219_229[nextMiss228zgensym_8df0a91a1f250219_229] || decodeMsgFieldSkip228zgensym_8df0a91a1f250219_229[nextMiss228zgensym_8df0a91a1f250219_229]) {
				nextMiss228zgensym_8df0a91a1f250219_229++
			}
			if nextMiss228zgensym_8df0a91a1f250219_229 == maxFields228zgensym_8df0a91a1f250219_229 {
				// filled all the empty fields!
				break doneWithStruct228zgensym_8df0a91a1f250219_229
			}
			missingFieldsLeft228zgensym_8df0a91a1f250219_229--
			curField228zgensym_8df0a91a1f250219_229 = decodeMsgFieldOrder228zgensym_8df0a91a1f250219_229[nextMiss228zgensym_8df0a91a1f250219_229]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField228zgensym_8df0a91a1f250219_229)
		switch curField228zgensym_8df0a91a1f250219_229 {
		// -- templateDecodeMsg ends here --

		case "CliName_zid00_str":
			found228zgensym_8df0a91a1f250219_229[0] = true
			z.CliName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CliPeerID_zid01_str":
			found228zgensym_8df0a91a1f250219_229[1] = true
			z.CliPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CliPeerServiceName_zid02_str":
			found228zgensym_8df0a91a1f250219_229[2] = true
			z.CliPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CliRndOnce_zid03_str":
			found228zgensym_8df0a91a1f250219_229[3] = true
			z.CliRndOnce, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CliLastKnownIndex0_zid04_i64":
			found228zgensym_8df0a91a1f250219_229[4] = true
			z.CliLastKnownIndex0, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SessRequestedInitialDur_zid05_dur":
			found228zgensym_8df0a91a1f250219_229[5] = true
			z.SessRequestedInitialDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "ClusterID_zid06_str":
			found228zgensym_8df0a91a1f250219_229[6] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SessionAssignedIndex_zid07_i64":
			found228zgensym_8df0a91a1f250219_229[7] = true
			z.SessionAssignedIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SessionID_zid08_str":
			found228zgensym_8df0a91a1f250219_229[8] = true
			z.SessionID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SessionIndexEndxTm_zid09_tim":
			found228zgensym_8df0a91a1f250219_229[9] = true
			z.SessionIndexEndxTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "LeaderName_zid10_str":
			found228zgensym_8df0a91a1f250219_229[10] = true
			z.LeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderPeerID_zid11_str":
			found228zgensym_8df0a91a1f250219_229[11] = true
			z.LeaderPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderPeerServiceName_zid12_str":
			found228zgensym_8df0a91a1f250219_229[12] = true
			z.LeaderPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderURL_zid13_str":
			found228zgensym_8df0a91a1f250219_229[13] = true
			z.LeaderURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderRndOnce_zid14_str":
			found228zgensym_8df0a91a1f250219_229[14] = true
			z.LeaderRndOnce, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Errs_zid15_str":
			found228zgensym_8df0a91a1f250219_229[15] = true
			z.Errs, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SessionSerial_zid16_i64":
			found228zgensym_8df0a91a1f250219_229[16] = true
			z.SessionSerial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LastKnownIndex_zid17_i64":
			found228zgensym_8df0a91a1f250219_229[17] = true
			z.LastKnownIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "MinSessSerialWaiting_zid18_i64":
			found228zgensym_8df0a91a1f250219_229[18] = true
			z.MinSessSerialWaiting, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss228zgensym_8df0a91a1f250219_229 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Session
var decodeMsgFieldOrder228zgensym_8df0a91a1f250219_229 = []string{"CliName_zid00_str", "CliPeerID_zid01_str", "CliPeerServiceName_zid02_str", "CliRndOnce_zid03_str", "CliLastKnownIndex0_zid04_i64", "SessRequestedInitialDur_zid05_dur", "ClusterID_zid06_str", "SessionAssignedIndex_zid07_i64", "SessionID_zid08_str", "SessionIndexEndxTm_zid09_tim", "LeaderName_zid10_str", "LeaderPeerID_zid11_str", "LeaderPeerServiceName_zid12_str", "LeaderURL_zid13_str", "LeaderRndOnce_zid14_str", "Errs_zid15_str", "SessionSerial_zid16_i64", "LastKnownIndex_zid17_i64", "MinSessSerialWaiting_zid18_i64"}

var decodeMsgFieldSkip228zgensym_8df0a91a1f250219_229 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Session) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 19
	}
	var fieldsInUse uint32 = 19
	isempty[0] = (len(z.CliName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.CliPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.CliPeerServiceName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CliRndOnce) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.CliLastKnownIndex0 == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = false
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.SessionAssignedIndex == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.SessionID) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.SessionIndexEndxTm.IsZero()) // time.Time, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.LeaderName) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.LeaderPeerID) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (len(z.LeaderPeerServiceName) == 0) // string, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (len(z.LeaderURL) == 0) // string, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (len(z.LeaderRndOnce) == 0) // string, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (len(z.Errs) == 0) // string, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.SessionSerial == 0) // number, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (z.LastKnownIndex == 0) // number, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (z.MinSessSerialWaiting == 0) // number, omitempty
	if isempty[18] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Session) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_230 [19]bool
	fieldsInUse_zgensym_8df0a91a1f250219_231 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_230[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_231 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Session'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_230[0] {
		// write "CliName_zid00_str"
		err = en.Append(0xb1, 0x43, 0x6c, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CliName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[1] {
		// write "CliPeerID_zid01_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x69, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CliPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[2] {
		// write "CliPeerServiceName_zid02_str"
		err = en.Append(0xbc, 0x43, 0x6c, 0x69, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CliPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[3] {
		// write "CliRndOnce_zid03_str"
		err = en.Append(0xb4, 0x43, 0x6c, 0x69, 0x52, 0x6e, 0x64, 0x4f, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CliRndOnce)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[4] {
		// write "CliLastKnownIndex0_zid04_i64"
		err = en.Append(0xbc, 0x43, 0x6c, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CliLastKnownIndex0)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[5] {
		// write "SessRequestedInitialDur_zid05_dur"
		err = en.Append(0xd9, 0x21, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.SessRequestedInitialDur)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[6] {
		// write "ClusterID_zid06_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[7] {
		// write "SessionAssignedIndex_zid07_i64"
		err = en.Append(0xbe, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SessionAssignedIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[8] {
		// write "SessionID_zid08_str"
		err = en.Append(0xb3, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SessionID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[9] {
		// write "SessionIndexEndxTm_zid09_tim"
		err = en.Append(0xbc, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x78, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.SessionIndexEndxTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[10] {
		// write "LeaderName_zid10_str"
		err = en.Append(0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[11] {
		// write "LeaderPeerID_zid11_str"
		err = en.Append(0xb6, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[12] {
		// write "LeaderPeerServiceName_zid12_str"
		err = en.Append(0xbf, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[13] {
		// write "LeaderURL_zid13_str"
		err = en.Append(0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[14] {
		// write "LeaderRndOnce_zid14_str"
		err = en.Append(0xb7, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6e, 0x64, 0x4f, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderRndOnce)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[15] {
		// write "Errs_zid15_str"
		err = en.Append(0xae, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Errs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[16] {
		// write "SessionSerial_zid16_i64"
		err = en.Append(0xb7, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SessionSerial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[17] {
		// write "LastKnownIndex_zid17_i64"
		err = en.Append(0xb8, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LastKnownIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_230[18] {
		// write "MinSessSerialWaiting_zid18_i64"
		err = en.Append(0xbe, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.MinSessSerialWaiting)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Session) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [19]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "CliName_zid00_str"
		o = append(o, 0xb1, 0x43, 0x6c, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CliName)
	}

	if !empty[1] {
		// string "CliPeerID_zid01_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x69, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CliPeerID)
	}

	if !empty[2] {
		// string "CliPeerServiceName_zid02_str"
		o = append(o, 0xbc, 0x43, 0x6c, 0x69, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CliPeerServiceName)
	}

	if !empty[3] {
		// string "CliRndOnce_zid03_str"
		o = append(o, 0xb4, 0x43, 0x6c, 0x69, 0x52, 0x6e, 0x64, 0x4f, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CliRndOnce)
	}

	if !empty[4] {
		// string "CliLastKnownIndex0_zid04_i64"
		o = append(o, 0xbc, 0x43, 0x6c, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CliLastKnownIndex0)
	}

	if !empty[5] {
		// string "SessRequestedInitialDur_zid05_dur"
		o = append(o, 0xd9, 0x21, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.SessRequestedInitialDur)
	}

	if !empty[6] {
		// string "ClusterID_zid06_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[7] {
		// string "SessionAssignedIndex_zid07_i64"
		o = append(o, 0xbe, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SessionAssignedIndex)
	}

	if !empty[8] {
		// string "SessionID_zid08_str"
		o = append(o, 0xb3, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SessionID)
	}

	if !empty[9] {
		// string "SessionIndexEndxTm_zid09_tim"
		o = append(o, 0xbc, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x78, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.SessionIndexEndxTm)
	}

	if !empty[10] {
		// string "LeaderName_zid10_str"
		o = append(o, 0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderName)
	}

	if !empty[11] {
		// string "LeaderPeerID_zid11_str"
		o = append(o, 0xb6, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderPeerID)
	}

	if !empty[12] {
		// string "LeaderPeerServiceName_zid12_str"
		o = append(o, 0xbf, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderPeerServiceName)
	}

	if !empty[13] {
		// string "LeaderURL_zid13_str"
		o = append(o, 0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderURL)
	}

	if !empty[14] {
		// string "LeaderRndOnce_zid14_str"
		o = append(o, 0xb7, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6e, 0x64, 0x4f, 0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderRndOnce)
	}

	if !empty[15] {
		// string "Errs_zid15_str"
		o = append(o, 0xae, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Errs)
	}

	if !empty[16] {
		// string "SessionSerial_zid16_i64"
		o = append(o, 0xb7, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SessionSerial)
	}

	if !empty[17] {
		// string "LastKnownIndex_zid17_i64"
		o = append(o, 0xb8, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LastKnownIndex)
	}

	if !empty[18] {
		// string "MinSessSerialWaiting_zid18_i64"
		o = append(o, 0xbe, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.MinSessSerialWaiting)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Session) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Session) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields232zgensym_8df0a91a1f250219_233 = 19

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields232zgensym_8df0a91a1f250219_233 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields232zgensym_8df0a91a1f250219_233, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft232zgensym_8df0a91a1f250219_233 := totalEncodedFields232zgensym_8df0a91a1f250219_233
	missingFieldsLeft232zgensym_8df0a91a1f250219_233 := maxFields232zgensym_8df0a91a1f250219_233 - totalEncodedFields232zgensym_8df0a91a1f250219_233

	var nextMiss232zgensym_8df0a91a1f250219_233 int32 = -1
	var found232zgensym_8df0a91a1f250219_233 [maxFields232zgensym_8df0a91a1f250219_233]bool
	var curField232zgensym_8df0a91a1f250219_233 string

doneWithStruct232zgensym_8df0a91a1f250219_233:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft232zgensym_8df0a91a1f250219_233 > 0 || missingFieldsLeft232zgensym_8df0a91a1f250219_233 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft232zgensym_8df0a91a1f250219_233, missingFieldsLeft232zgensym_8df0a91a1f250219_233, msgp.ShowFound(found232zgensym_8df0a91a1f250219_233[:]), unmarshalMsgFieldOrder232zgensym_8df0a91a1f250219_233)
		if encodedFieldsLeft232zgensym_8df0a91a1f250219_233 > 0 {
			encodedFieldsLeft232zgensym_8df0a91a1f250219_233--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField232zgensym_8df0a91a1f250219_233 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss232zgensym_8df0a91a1f250219_233 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss232zgensym_8df0a91a1f250219_233 = 0
			}
			for nextMiss232zgensym_8df0a91a1f250219_233 < maxFields232zgensym_8df0a91a1f250219_233 && (found232zgensym_8df0a91a1f250219_233[nextMiss232zgensym_8df0a91a1f250219_233] || unmarshalMsgFieldSkip232zgensym_8df0a91a1f250219_233[nextMiss232zgensym_8df0a91a1f250219_233]) {
				nextMiss232zgensym_8df0a91a1f250219_233++
			}
			if nextMiss232zgensym_8df0a91a1f250219_233 == maxFields232zgensym_8df0a91a1f250219_233 {
				// filled all the empty fields!
				break doneWithStruct232zgensym_8df0a91a1f250219_233
			}
			missingFieldsLeft232zgensym_8df0a91a1f250219_233--
			curField232zgensym_8df0a91a1f250219_233 = unmarshalMsgFieldOrder232zgensym_8df0a91a1f250219_233[nextMiss232zgensym_8df0a91a1f250219_233]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField232zgensym_8df0a91a1f250219_233)
		switch curField232zgensym_8df0a91a1f250219_233 {
		// -- templateUnmarshalMsg ends here --

		case "CliName_zid00_str":
			found232zgensym_8df0a91a1f250219_233[0] = true
			z.CliName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CliPeerID_zid01_str":
			found232zgensym_8df0a91a1f250219_233[1] = true
			z.CliPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CliPeerServiceName_zid02_str":
			found232zgensym_8df0a91a1f250219_233[2] = true
			z.CliPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CliRndOnce_zid03_str":
			found232zgensym_8df0a91a1f250219_233[3] = true
			z.CliRndOnce, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CliLastKnownIndex0_zid04_i64":
			found232zgensym_8df0a91a1f250219_233[4] = true
			z.CliLastKnownIndex0, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SessRequestedInitialDur_zid05_dur":
			found232zgensym_8df0a91a1f250219_233[5] = true
			z.SessRequestedInitialDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "ClusterID_zid06_str":
			found232zgensym_8df0a91a1f250219_233[6] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SessionAssignedIndex_zid07_i64":
			found232zgensym_8df0a91a1f250219_233[7] = true
			z.SessionAssignedIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SessionID_zid08_str":
			found232zgensym_8df0a91a1f250219_233[8] = true
			z.SessionID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SessionIndexEndxTm_zid09_tim":
			found232zgensym_8df0a91a1f250219_233[9] = true
			z.SessionIndexEndxTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "LeaderName_zid10_str":
			found232zgensym_8df0a91a1f250219_233[10] = true
			z.LeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderPeerID_zid11_str":
			found232zgensym_8df0a91a1f250219_233[11] = true
			z.LeaderPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderPeerServiceName_zid12_str":
			found232zgensym_8df0a91a1f250219_233[12] = true
			z.LeaderPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderURL_zid13_str":
			found232zgensym_8df0a91a1f250219_233[13] = true
			z.LeaderURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderRndOnce_zid14_str":
			found232zgensym_8df0a91a1f250219_233[14] = true
			z.LeaderRndOnce, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Errs_zid15_str":
			found232zgensym_8df0a91a1f250219_233[15] = true
			z.Errs, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SessionSerial_zid16_i64":
			found232zgensym_8df0a91a1f250219_233[16] = true
			z.SessionSerial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LastKnownIndex_zid17_i64":
			found232zgensym_8df0a91a1f250219_233[17] = true
			z.LastKnownIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "MinSessSerialWaiting_zid18_i64":
			found232zgensym_8df0a91a1f250219_233[18] = true
			z.MinSessSerialWaiting, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss232zgensym_8df0a91a1f250219_233 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Session
var unmarshalMsgFieldOrder232zgensym_8df0a91a1f250219_233 = []string{"CliName_zid00_str", "CliPeerID_zid01_str", "CliPeerServiceName_zid02_str", "CliRndOnce_zid03_str", "CliLastKnownIndex0_zid04_i64", "SessRequestedInitialDur_zid05_dur", "ClusterID_zid06_str", "SessionAssignedIndex_zid07_i64", "SessionID_zid08_str", "SessionIndexEndxTm_zid09_tim", "LeaderName_zid10_str", "LeaderPeerID_zid11_str", "LeaderPeerServiceName_zid12_str", "LeaderURL_zid13_str", "LeaderRndOnce_zid14_str", "Errs_zid15_str", "SessionSerial_zid16_i64", "LastKnownIndex_zid17_i64", "MinSessSerialWaiting_zid18_i64"}

var unmarshalMsgFieldSkip232zgensym_8df0a91a1f250219_233 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Session) Msgsize() (s int) {
	s = 3 + 18 + msgp.StringPrefixSize + len(z.CliName) + 20 + msgp.StringPrefixSize + len(z.CliPeerID) + 29 + msgp.StringPrefixSize + len(z.CliPeerServiceName) + 21 + msgp.StringPrefixSize + len(z.CliRndOnce) + 29 + msgp.Int64Size + 35 + msgp.DurationSize + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 31 + msgp.Int64Size + 20 + msgp.StringPrefixSize + len(z.SessionID) + 29 + msgp.TimeSize + 21 + msgp.StringPrefixSize + len(z.LeaderName) + 23 + msgp.StringPrefixSize + len(z.LeaderPeerID) + 32 + msgp.StringPrefixSize + len(z.LeaderPeerServiceName) + 20 + msgp.StringPrefixSize + len(z.LeaderURL) + 24 + msgp.StringPrefixSize + len(z.LeaderRndOnce) + 15 + msgp.StringPrefixSize + len(z.Errs) + 24 + msgp.Int64Size + 25 + msgp.Int64Size + 31 + msgp.Int64Size
	return
}
func (z *Session) Gstring() (r string) {
	r = "&Session{\n"
	r += fmt.Sprintf("                CliName: \"%v\",\n", z.CliName)
	r += fmt.Sprintf("              CliPeerID: \"%v\",\n", z.CliPeerID)
	r += fmt.Sprintf("     CliPeerServiceName: \"%v\",\n", z.CliPeerServiceName)
	r += fmt.Sprintf("             CliRndOnce: \"%v\",\n", z.CliRndOnce)
	r += fmt.Sprintf("     CliLastKnownIndex0: %v,\n", z.CliLastKnownIndex0)
	r += fmt.Sprintf("SessRequestedInitialDur: %v,\n", z.SessRequestedInitialDur)
	r += fmt.Sprintf("              ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("   SessionAssignedIndex: %v,\n", z.SessionAssignedIndex)
	r += fmt.Sprintf("              SessionID: \"%v\",\n", z.SessionID)
	r += fmt.Sprintf("     SessionIndexEndxTm: %v,\n", z.SessionIndexEndxTm)
	r += fmt.Sprintf("             LeaderName: \"%v\",\n", z.LeaderName)
	r += fmt.Sprintf("           LeaderPeerID: \"%v\",\n", z.LeaderPeerID)
	r += fmt.Sprintf("  LeaderPeerServiceName: \"%v\",\n", z.LeaderPeerServiceName)
	r += fmt.Sprintf("              LeaderURL: \"%v\",\n", z.LeaderURL)
	r += fmt.Sprintf("          LeaderRndOnce: \"%v\",\n", z.LeaderRndOnce)
	r += fmt.Sprintf("                   Errs: \"%v\",\n", z.Errs)
	r += fmt.Sprintf("          SessionSerial: %v,\n", z.SessionSerial)
	r += fmt.Sprintf("         LastKnownIndex: %v,\n", z.LastKnownIndex)
	r += fmt.Sprintf("   MinSessSerialWaiting: %v,\n", z.MinSessSerialWaiting)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SessionTableEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields236zgensym_8df0a91a1f250219_237 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields236zgensym_8df0a91a1f250219_237 uint32
	totalEncodedFields236zgensym_8df0a91a1f250219_237, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft236zgensym_8df0a91a1f250219_237 := totalEncodedFields236zgensym_8df0a91a1f250219_237
	missingFieldsLeft236zgensym_8df0a91a1f250219_237 := maxFields236zgensym_8df0a91a1f250219_237 - totalEncodedFields236zgensym_8df0a91a1f250219_237

	var nextMiss236zgensym_8df0a91a1f250219_237 int32 = -1
	var found236zgensym_8df0a91a1f250219_237 [maxFields236zgensym_8df0a91a1f250219_237]bool
	var curField236zgensym_8df0a91a1f250219_237 string

doneWithStruct236zgensym_8df0a91a1f250219_237:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft236zgensym_8df0a91a1f250219_237 > 0 || missingFieldsLeft236zgensym_8df0a91a1f250219_237 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft236zgensym_8df0a91a1f250219_237, missingFieldsLeft236zgensym_8df0a91a1f250219_237, msgp.ShowFound(found236zgensym_8df0a91a1f250219_237[:]), decodeMsgFieldOrder236zgensym_8df0a91a1f250219_237)
		if encodedFieldsLeft236zgensym_8df0a91a1f250219_237 > 0 {
			encodedFieldsLeft236zgensym_8df0a91a1f250219_237--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField236zgensym_8df0a91a1f250219_237 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss236zgensym_8df0a91a1f250219_237 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss236zgensym_8df0a91a1f250219_237 = 0
			}
			for nextMiss236zgensym_8df0a91a1f250219_237 < maxFields236zgensym_8df0a91a1f250219_237 && (found236zgensym_8df0a91a1f250219_237[nextMiss236zgensym_8df0a91a1f250219_237] || decodeMsgFieldSkip236zgensym_8df0a91a1f250219_237[nextMiss236zgensym_8df0a91a1f250219_237]) {
				nextMiss236zgensym_8df0a91a1f250219_237++
			}
			if nextMiss236zgensym_8df0a91a1f250219_237 == maxFields236zgensym_8df0a91a1f250219_237 {
				// filled all the empty fields!
				break doneWithStruct236zgensym_8df0a91a1f250219_237
			}
			missingFieldsLeft236zgensym_8df0a91a1f250219_237--
			curField236zgensym_8df0a91a1f250219_237 = decodeMsgFieldOrder236zgensym_8df0a91a1f250219_237[nextMiss236zgensym_8df0a91a1f250219_237]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField236zgensym_8df0a91a1f250219_237)
		switch curField236zgensym_8df0a91a1f250219_237 {
		// -- templateDecodeMsg ends here --

		case "SessionID_zid00_str":
			found236zgensym_8df0a91a1f250219_237[0] = true
			z.SessionID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HighestSerial_zid01_i64":
			found236zgensym_8df0a91a1f250219_237[1] = true
			z.HighestSerial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Serz_zid02_map":
			found236zgensym_8df0a91a1f250219_237[2] = true
			var zgensym_8df0a91a1f250219_238 uint32
			zgensym_8df0a91a1f250219_238, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Serz == nil && zgensym_8df0a91a1f250219_238 > 0 {
				z.Serz = make(map[int64]*Ticket, zgensym_8df0a91a1f250219_238)
			} else if len(z.Serz) > 0 {
				for key, _ := range z.Serz {
					delete(z.Serz, key)
				}
			}
			for zgensym_8df0a91a1f250219_238 > 0 {
				zgensym_8df0a91a1f250219_238--
				var zgensym_8df0a91a1f250219_234 int64
				var zgensym_8df0a91a1f250219_235 *Ticket
				zgensym_8df0a91a1f250219_234, err = dc.ReadInt64()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if zgensym_8df0a91a1f250219_235 != nil {
						dc.PushAlwaysNil()
						err = zgensym_8df0a91a1f250219_235.DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if zgensym_8df0a91a1f250219_235 == nil {
						zgensym_8df0a91a1f250219_235 = new(Ticket)
					}
					dc.DedupIndexEachPtr(zgensym_8df0a91a1f250219_235)

					err = zgensym_8df0a91a1f250219_235.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.Serz[zgensym_8df0a91a1f250219_234] = zgensym_8df0a91a1f250219_235
			}
		case "SessionEndxTm_zid03_tim":
			found236zgensym_8df0a91a1f250219_237[3] = true
			z.SessionEndxTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "SessionReplicatedEndxTm_zid04_tim":
			found236zgensym_8df0a91a1f250219_237[4] = true
			z.SessionReplicatedEndxTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "SessRequestedInitialDur_zid05_dur":
			found236zgensym_8df0a91a1f250219_237[5] = true
			z.SessRequestedInitialDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss236zgensym_8df0a91a1f250219_237 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SessionTableEntry
var decodeMsgFieldOrder236zgensym_8df0a91a1f250219_237 = []string{"SessionID_zid00_str", "HighestSerial_zid01_i64", "Serz_zid02_map", "SessionEndxTm_zid03_tim", "SessionReplicatedEndxTm_zid04_tim", "SessRequestedInitialDur_zid05_dur", ""}

var decodeMsgFieldSkip236zgensym_8df0a91a1f250219_237 = []bool{false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *SessionTableEntry) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.SessionID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.HighestSerial == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Serz) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.SessionEndxTm.IsZero()) // time.Time, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.SessionReplicatedEndxTm.IsZero()) // time.Time, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = false
	if isempty[5] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *SessionTableEntry) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_239 [7]bool
	fieldsInUse_zgensym_8df0a91a1f250219_240 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_239[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_240 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SessionTableEntry'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_239[0] {
		// write "SessionID_zid00_str"
		err = en.Append(0xb3, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SessionID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_239[1] {
		// write "HighestSerial_zid01_i64"
		err = en.Append(0xb7, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.HighestSerial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_239[2] {
		// write "Serz_zid02_map"
		err = en.Append(0xae, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Serz)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_234, zgensym_8df0a91a1f250219_235 := range z.Serz {
			err = en.WriteInt64(zgensym_8df0a91a1f250219_234)
			if err != nil {
				return
			}
			// gPtr.encodeGen():

			if zgensym_8df0a91a1f250219_235 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zgensym_8df0a91a1f250219_235.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_239[3] {
		// write "SessionEndxTm_zid03_tim"
		err = en.Append(0xb7, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x78, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.SessionEndxTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_239[4] {
		// write "SessionReplicatedEndxTm_zid04_tim"
		err = en.Append(0xd9, 0x21, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x78, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.SessionReplicatedEndxTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_239[5] {
		// write "SessRequestedInitialDur_zid05_dur"
		err = en.Append(0xd9, 0x21, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.SessRequestedInitialDur)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SessionTableEntry) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "SessionID_zid00_str"
		o = append(o, 0xb3, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SessionID)
	}

	if !empty[1] {
		// string "HighestSerial_zid01_i64"
		o = append(o, 0xb7, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.HighestSerial)
	}

	if !empty[2] {
		// string "Serz_zid02_map"
		o = append(o, 0xae, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Serz)))
		for zgensym_8df0a91a1f250219_234, zgensym_8df0a91a1f250219_235 := range z.Serz {
			o = msgp.AppendInt64(o, zgensym_8df0a91a1f250219_234)
			// marshalGen.gPtr()

			if zgensym_8df0a91a1f250219_235 == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = zgensym_8df0a91a1f250219_235.MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[3] {
		// string "SessionEndxTm_zid03_tim"
		o = append(o, 0xb7, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x78, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.SessionEndxTm)
	}

	if !empty[4] {
		// string "SessionReplicatedEndxTm_zid04_tim"
		o = append(o, 0xd9, 0x21, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x78, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.SessionReplicatedEndxTm)
	}

	if !empty[5] {
		// string "SessRequestedInitialDur_zid05_dur"
		o = append(o, 0xd9, 0x21, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.SessRequestedInitialDur)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SessionTableEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SessionTableEntry) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields241zgensym_8df0a91a1f250219_242 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields241zgensym_8df0a91a1f250219_242 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields241zgensym_8df0a91a1f250219_242, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft241zgensym_8df0a91a1f250219_242 := totalEncodedFields241zgensym_8df0a91a1f250219_242
	missingFieldsLeft241zgensym_8df0a91a1f250219_242 := maxFields241zgensym_8df0a91a1f250219_242 - totalEncodedFields241zgensym_8df0a91a1f250219_242

	var nextMiss241zgensym_8df0a91a1f250219_242 int32 = -1
	var found241zgensym_8df0a91a1f250219_242 [maxFields241zgensym_8df0a91a1f250219_242]bool
	var curField241zgensym_8df0a91a1f250219_242 string

doneWithStruct241zgensym_8df0a91a1f250219_242:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft241zgensym_8df0a91a1f250219_242 > 0 || missingFieldsLeft241zgensym_8df0a91a1f250219_242 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft241zgensym_8df0a91a1f250219_242, missingFieldsLeft241zgensym_8df0a91a1f250219_242, msgp.ShowFound(found241zgensym_8df0a91a1f250219_242[:]), unmarshalMsgFieldOrder241zgensym_8df0a91a1f250219_242)
		if encodedFieldsLeft241zgensym_8df0a91a1f250219_242 > 0 {
			encodedFieldsLeft241zgensym_8df0a91a1f250219_242--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField241zgensym_8df0a91a1f250219_242 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss241zgensym_8df0a91a1f250219_242 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss241zgensym_8df0a91a1f250219_242 = 0
			}
			for nextMiss241zgensym_8df0a91a1f250219_242 < maxFields241zgensym_8df0a91a1f250219_242 && (found241zgensym_8df0a91a1f250219_242[nextMiss241zgensym_8df0a91a1f250219_242] || unmarshalMsgFieldSkip241zgensym_8df0a91a1f250219_242[nextMiss241zgensym_8df0a91a1f250219_242]) {
				nextMiss241zgensym_8df0a91a1f250219_242++
			}
			if nextMiss241zgensym_8df0a91a1f250219_242 == maxFields241zgensym_8df0a91a1f250219_242 {
				// filled all the empty fields!
				break doneWithStruct241zgensym_8df0a91a1f250219_242
			}
			missingFieldsLeft241zgensym_8df0a91a1f250219_242--
			curField241zgensym_8df0a91a1f250219_242 = unmarshalMsgFieldOrder241zgensym_8df0a91a1f250219_242[nextMiss241zgensym_8df0a91a1f250219_242]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField241zgensym_8df0a91a1f250219_242)
		switch curField241zgensym_8df0a91a1f250219_242 {
		// -- templateUnmarshalMsg ends here --

		case "SessionID_zid00_str":
			found241zgensym_8df0a91a1f250219_242[0] = true
			z.SessionID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "HighestSerial_zid01_i64":
			found241zgensym_8df0a91a1f250219_242[1] = true
			z.HighestSerial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Serz_zid02_map":
			found241zgensym_8df0a91a1f250219_242[2] = true
			if nbs.AlwaysNil {
				if len(z.Serz) > 0 {
					for key, _ := range z.Serz {
						delete(z.Serz, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_243 uint32
				zgensym_8df0a91a1f250219_243, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Serz == nil && zgensym_8df0a91a1f250219_243 > 0 {
					z.Serz = make(map[int64]*Ticket, zgensym_8df0a91a1f250219_243)
				} else if len(z.Serz) > 0 {
					for key, _ := range z.Serz {
						delete(z.Serz, key)
					}
				}
				for zgensym_8df0a91a1f250219_243 > 0 {
					var zgensym_8df0a91a1f250219_234 int64
					var zgensym_8df0a91a1f250219_235 *Ticket
					zgensym_8df0a91a1f250219_243--
					zgensym_8df0a91a1f250219_234, bts, err = nbs.ReadInt64Bytes(bts)
					if err != nil {
						return
					}
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if zgensym_8df0a91a1f250219_235 != nil {
							zgensym_8df0a91a1f250219_235.UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zgensym_8df0a91a1f250219_235 {
								zgensym_8df0a91a1f250219_235.UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zgensym_8df0a91a1f250219_235 == nil {
								zgensym_8df0a91a1f250219_235 = new(Ticket)
							}

							bts, err = zgensym_8df0a91a1f250219_235.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
					z.Serz[zgensym_8df0a91a1f250219_234] = zgensym_8df0a91a1f250219_235
				}
			}
		case "SessionEndxTm_zid03_tim":
			found241zgensym_8df0a91a1f250219_242[3] = true
			z.SessionEndxTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "SessionReplicatedEndxTm_zid04_tim":
			found241zgensym_8df0a91a1f250219_242[4] = true
			z.SessionReplicatedEndxTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "SessRequestedInitialDur_zid05_dur":
			found241zgensym_8df0a91a1f250219_242[5] = true
			z.SessRequestedInitialDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss241zgensym_8df0a91a1f250219_242 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SessionTableEntry
var unmarshalMsgFieldOrder241zgensym_8df0a91a1f250219_242 = []string{"SessionID_zid00_str", "HighestSerial_zid01_i64", "Serz_zid02_map", "SessionEndxTm_zid03_tim", "SessionReplicatedEndxTm_zid04_tim", "SessRequestedInitialDur_zid05_dur", ""}

var unmarshalMsgFieldSkip241zgensym_8df0a91a1f250219_242 = []bool{false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SessionTableEntry) Msgsize() (s int) {
	s = 1 + 20 + msgp.StringPrefixSize + len(z.SessionID) + 24 + msgp.Int64Size + 15 + msgp.MapHeaderSize
	if z.Serz != nil {
		for zgensym_8df0a91a1f250219_234, zgensym_8df0a91a1f250219_235 := range z.Serz {
			_ = zgensym_8df0a91a1f250219_235
			_ = zgensym_8df0a91a1f250219_234
			s += msgp.Int64Size
			if zgensym_8df0a91a1f250219_235 == nil {
				s += msgp.NilSize
			} else {
				s += zgensym_8df0a91a1f250219_235.Msgsize()
			}
		}
	}
	s += 24 + msgp.TimeSize + 35 + msgp.TimeSize + 35 + msgp.DurationSize
	return
}
func (z *SessionTableEntry) Gstring() (r string) {
	r = "&SessionTableEntry{\n"
	r += fmt.Sprintf("              SessionID: \"%v\",\n", z.SessionID)
	r += fmt.Sprintf("          HighestSerial: %v,\n", z.HighestSerial)
	r += fmt.Sprintf("                   Serz: %v,\n", z.Serz)
	r += fmt.Sprintf("          SessionEndxTm: %v,\n", z.SessionEndxTm)
	r += fmt.Sprintf("SessionReplicatedEndxTm: %v,\n", z.SessionReplicatedEndxTm)
	r += fmt.Sprintf("SessRequestedInitialDur: %v,\n", z.SessRequestedInitialDur)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TermRLE) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields244zgensym_8df0a91a1f250219_245 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields244zgensym_8df0a91a1f250219_245 uint32
	totalEncodedFields244zgensym_8df0a91a1f250219_245, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft244zgensym_8df0a91a1f250219_245 := totalEncodedFields244zgensym_8df0a91a1f250219_245
	missingFieldsLeft244zgensym_8df0a91a1f250219_245 := maxFields244zgensym_8df0a91a1f250219_245 - totalEncodedFields244zgensym_8df0a91a1f250219_245

	var nextMiss244zgensym_8df0a91a1f250219_245 int32 = -1
	var found244zgensym_8df0a91a1f250219_245 [maxFields244zgensym_8df0a91a1f250219_245]bool
	var curField244zgensym_8df0a91a1f250219_245 string

doneWithStruct244zgensym_8df0a91a1f250219_245:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft244zgensym_8df0a91a1f250219_245 > 0 || missingFieldsLeft244zgensym_8df0a91a1f250219_245 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft244zgensym_8df0a91a1f250219_245, missingFieldsLeft244zgensym_8df0a91a1f250219_245, msgp.ShowFound(found244zgensym_8df0a91a1f250219_245[:]), decodeMsgFieldOrder244zgensym_8df0a91a1f250219_245)
		if encodedFieldsLeft244zgensym_8df0a91a1f250219_245 > 0 {
			encodedFieldsLeft244zgensym_8df0a91a1f250219_245--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField244zgensym_8df0a91a1f250219_245 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss244zgensym_8df0a91a1f250219_245 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss244zgensym_8df0a91a1f250219_245 = 0
			}
			for nextMiss244zgensym_8df0a91a1f250219_245 < maxFields244zgensym_8df0a91a1f250219_245 && (found244zgensym_8df0a91a1f250219_245[nextMiss244zgensym_8df0a91a1f250219_245] || decodeMsgFieldSkip244zgensym_8df0a91a1f250219_245[nextMiss244zgensym_8df0a91a1f250219_245]) {
				nextMiss244zgensym_8df0a91a1f250219_245++
			}
			if nextMiss244zgensym_8df0a91a1f250219_245 == maxFields244zgensym_8df0a91a1f250219_245 {
				// filled all the empty fields!
				break doneWithStruct244zgensym_8df0a91a1f250219_245
			}
			missingFieldsLeft244zgensym_8df0a91a1f250219_245--
			curField244zgensym_8df0a91a1f250219_245 = decodeMsgFieldOrder244zgensym_8df0a91a1f250219_245[nextMiss244zgensym_8df0a91a1f250219_245]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField244zgensym_8df0a91a1f250219_245)
		switch curField244zgensym_8df0a91a1f250219_245 {
		// -- templateDecodeMsg ends here --

		case "Term_zid00_i64":
			found244zgensym_8df0a91a1f250219_245[0] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Count_zid01_i64":
			found244zgensym_8df0a91a1f250219_245[1] = true
			z.Count, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss244zgensym_8df0a91a1f250219_245 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TermRLE
var decodeMsgFieldOrder244zgensym_8df0a91a1f250219_245 = []string{"Term_zid00_i64", "Count_zid01_i64"}

var decodeMsgFieldSkip244zgensym_8df0a91a1f250219_245 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *TermRLE) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Term == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Count == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TermRLE) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_246 [2]bool
	fieldsInUse_zgensym_8df0a91a1f250219_247 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_246[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_247 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TermRLE'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x65, 0x72, 0x6d, 0x52, 0x4c, 0x45})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_246[0] {
		// write "Term_zid00_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_246[1] {
		// write "Count_zid01_i64"
		err = en.Append(0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Count)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TermRLE) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Term_zid00_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[1] {
		// string "Count_zid01_i64"
		o = append(o, 0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Count)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TermRLE) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TermRLE) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields248zgensym_8df0a91a1f250219_249 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields248zgensym_8df0a91a1f250219_249 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields248zgensym_8df0a91a1f250219_249, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft248zgensym_8df0a91a1f250219_249 := totalEncodedFields248zgensym_8df0a91a1f250219_249
	missingFieldsLeft248zgensym_8df0a91a1f250219_249 := maxFields248zgensym_8df0a91a1f250219_249 - totalEncodedFields248zgensym_8df0a91a1f250219_249

	var nextMiss248zgensym_8df0a91a1f250219_249 int32 = -1
	var found248zgensym_8df0a91a1f250219_249 [maxFields248zgensym_8df0a91a1f250219_249]bool
	var curField248zgensym_8df0a91a1f250219_249 string

doneWithStruct248zgensym_8df0a91a1f250219_249:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft248zgensym_8df0a91a1f250219_249 > 0 || missingFieldsLeft248zgensym_8df0a91a1f250219_249 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft248zgensym_8df0a91a1f250219_249, missingFieldsLeft248zgensym_8df0a91a1f250219_249, msgp.ShowFound(found248zgensym_8df0a91a1f250219_249[:]), unmarshalMsgFieldOrder248zgensym_8df0a91a1f250219_249)
		if encodedFieldsLeft248zgensym_8df0a91a1f250219_249 > 0 {
			encodedFieldsLeft248zgensym_8df0a91a1f250219_249--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField248zgensym_8df0a91a1f250219_249 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss248zgensym_8df0a91a1f250219_249 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss248zgensym_8df0a91a1f250219_249 = 0
			}
			for nextMiss248zgensym_8df0a91a1f250219_249 < maxFields248zgensym_8df0a91a1f250219_249 && (found248zgensym_8df0a91a1f250219_249[nextMiss248zgensym_8df0a91a1f250219_249] || unmarshalMsgFieldSkip248zgensym_8df0a91a1f250219_249[nextMiss248zgensym_8df0a91a1f250219_249]) {
				nextMiss248zgensym_8df0a91a1f250219_249++
			}
			if nextMiss248zgensym_8df0a91a1f250219_249 == maxFields248zgensym_8df0a91a1f250219_249 {
				// filled all the empty fields!
				break doneWithStruct248zgensym_8df0a91a1f250219_249
			}
			missingFieldsLeft248zgensym_8df0a91a1f250219_249--
			curField248zgensym_8df0a91a1f250219_249 = unmarshalMsgFieldOrder248zgensym_8df0a91a1f250219_249[nextMiss248zgensym_8df0a91a1f250219_249]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField248zgensym_8df0a91a1f250219_249)
		switch curField248zgensym_8df0a91a1f250219_249 {
		// -- templateUnmarshalMsg ends here --

		case "Term_zid00_i64":
			found248zgensym_8df0a91a1f250219_249[0] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Count_zid01_i64":
			found248zgensym_8df0a91a1f250219_249[1] = true
			z.Count, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss248zgensym_8df0a91a1f250219_249 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TermRLE
var unmarshalMsgFieldOrder248zgensym_8df0a91a1f250219_249 = []string{"Term_zid00_i64", "Count_zid01_i64"}

var unmarshalMsgFieldSkip248zgensym_8df0a91a1f250219_249 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TermRLE) Msgsize() (s int) {
	s = 1 + 15 + msgp.Int64Size + 16 + msgp.Int64Size
	return
}
func (z *TermRLE) Gstring() (r string) {
	r = "&TermRLE{\n"
	r += fmt.Sprintf(" Term: %v,\n", z.Term)
	r += fmt.Sprintf("Count: %v,\n", z.Count)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TermsRLE) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields251zgensym_8df0a91a1f250219_252 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields251zgensym_8df0a91a1f250219_252 uint32
	totalEncodedFields251zgensym_8df0a91a1f250219_252, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft251zgensym_8df0a91a1f250219_252 := totalEncodedFields251zgensym_8df0a91a1f250219_252
	missingFieldsLeft251zgensym_8df0a91a1f250219_252 := maxFields251zgensym_8df0a91a1f250219_252 - totalEncodedFields251zgensym_8df0a91a1f250219_252

	var nextMiss251zgensym_8df0a91a1f250219_252 int32 = -1
	var found251zgensym_8df0a91a1f250219_252 [maxFields251zgensym_8df0a91a1f250219_252]bool
	var curField251zgensym_8df0a91a1f250219_252 string

doneWithStruct251zgensym_8df0a91a1f250219_252:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft251zgensym_8df0a91a1f250219_252 > 0 || missingFieldsLeft251zgensym_8df0a91a1f250219_252 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft251zgensym_8df0a91a1f250219_252, missingFieldsLeft251zgensym_8df0a91a1f250219_252, msgp.ShowFound(found251zgensym_8df0a91a1f250219_252[:]), decodeMsgFieldOrder251zgensym_8df0a91a1f250219_252)
		if encodedFieldsLeft251zgensym_8df0a91a1f250219_252 > 0 {
			encodedFieldsLeft251zgensym_8df0a91a1f250219_252--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField251zgensym_8df0a91a1f250219_252 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss251zgensym_8df0a91a1f250219_252 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss251zgensym_8df0a91a1f250219_252 = 0
			}
			for nextMiss251zgensym_8df0a91a1f250219_252 < maxFields251zgensym_8df0a91a1f250219_252 && (found251zgensym_8df0a91a1f250219_252[nextMiss251zgensym_8df0a91a1f250219_252] || decodeMsgFieldSkip251zgensym_8df0a91a1f250219_252[nextMiss251zgensym_8df0a91a1f250219_252]) {
				nextMiss251zgensym_8df0a91a1f250219_252++
			}
			if nextMiss251zgensym_8df0a91a1f250219_252 == maxFields251zgensym_8df0a91a1f250219_252 {
				// filled all the empty fields!
				break doneWithStruct251zgensym_8df0a91a1f250219_252
			}
			missingFieldsLeft251zgensym_8df0a91a1f250219_252--
			curField251zgensym_8df0a91a1f250219_252 = decodeMsgFieldOrder251zgensym_8df0a91a1f250219_252[nextMiss251zgensym_8df0a91a1f250219_252]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField251zgensym_8df0a91a1f250219_252)
		switch curField251zgensym_8df0a91a1f250219_252 {
		// -- templateDecodeMsg ends here --

		case "BaseC_zid00_i64":
			found251zgensym_8df0a91a1f250219_252[0] = true
			z.BaseC, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Endi_zid01_i64":
			found251zgensym_8df0a91a1f250219_252[1] = true
			z.Endi, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Runs_zid02_slc":
			found251zgensym_8df0a91a1f250219_252[2] = true
			var zgensym_8df0a91a1f250219_253 uint32
			zgensym_8df0a91a1f250219_253, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Runs) >= int(zgensym_8df0a91a1f250219_253) {
				z.Runs = (z.Runs)[:zgensym_8df0a91a1f250219_253]
			} else {
				z.Runs = make([]*TermRLE, zgensym_8df0a91a1f250219_253)
			}
			for zgensym_8df0a91a1f250219_250 := range z.Runs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					z.Runs[zgensym_8df0a91a1f250219_250] = nil
				} else {
					if z.Runs[zgensym_8df0a91a1f250219_250] == nil {
						z.Runs[zgensym_8df0a91a1f250219_250] = new(TermRLE)
					}
					dc.DedupIndexEachPtr(z.Runs[zgensym_8df0a91a1f250219_250])

					const maxFields254zgensym_8df0a91a1f250219_255 = 2

					// -- templateDecodeMsg starts here--
					var totalEncodedFields254zgensym_8df0a91a1f250219_255 uint32
					totalEncodedFields254zgensym_8df0a91a1f250219_255, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					encodedFieldsLeft254zgensym_8df0a91a1f250219_255 := totalEncodedFields254zgensym_8df0a91a1f250219_255
					missingFieldsLeft254zgensym_8df0a91a1f250219_255 := maxFields254zgensym_8df0a91a1f250219_255 - totalEncodedFields254zgensym_8df0a91a1f250219_255

					var nextMiss254zgensym_8df0a91a1f250219_255 int32 = -1
					var found254zgensym_8df0a91a1f250219_255 [maxFields254zgensym_8df0a91a1f250219_255]bool
					var curField254zgensym_8df0a91a1f250219_255 string

				doneWithStruct254zgensym_8df0a91a1f250219_255:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft254zgensym_8df0a91a1f250219_255 > 0 || missingFieldsLeft254zgensym_8df0a91a1f250219_255 > 0 {
						//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft254zgensym_8df0a91a1f250219_255, missingFieldsLeft254zgensym_8df0a91a1f250219_255, msgp.ShowFound(found254zgensym_8df0a91a1f250219_255[:]), decodeMsgFieldOrder254zgensym_8df0a91a1f250219_255)
						if encodedFieldsLeft254zgensym_8df0a91a1f250219_255 > 0 {
							encodedFieldsLeft254zgensym_8df0a91a1f250219_255--
							field, err = dc.ReadMapKeyPtr()
							if err != nil {
								return
							}
							curField254zgensym_8df0a91a1f250219_255 = msgp.UnsafeString(field)
						} else {
							//missing fields need handling
							if nextMiss254zgensym_8df0a91a1f250219_255 < 0 {
								// tell the reader to only give us Nils
								// until further notice.
								dc.PushAlwaysNil()
								nextMiss254zgensym_8df0a91a1f250219_255 = 0
							}
							for nextMiss254zgensym_8df0a91a1f250219_255 < maxFields254zgensym_8df0a91a1f250219_255 && (found254zgensym_8df0a91a1f250219_255[nextMiss254zgensym_8df0a91a1f250219_255] || decodeMsgFieldSkip254zgensym_8df0a91a1f250219_255[nextMiss254zgensym_8df0a91a1f250219_255]) {
								nextMiss254zgensym_8df0a91a1f250219_255++
							}
							if nextMiss254zgensym_8df0a91a1f250219_255 == maxFields254zgensym_8df0a91a1f250219_255 {
								// filled all the empty fields!
								break doneWithStruct254zgensym_8df0a91a1f250219_255
							}
							missingFieldsLeft254zgensym_8df0a91a1f250219_255--
							curField254zgensym_8df0a91a1f250219_255 = decodeMsgFieldOrder254zgensym_8df0a91a1f250219_255[nextMiss254zgensym_8df0a91a1f250219_255]
						}
						//fmt.Printf("switching on curField: '%v'\n", curField254zgensym_8df0a91a1f250219_255)
						switch curField254zgensym_8df0a91a1f250219_255 {
						// -- templateDecodeMsg ends here --

						case "Term_zid00_i64":
							found254zgensym_8df0a91a1f250219_255[0] = true
							z.Runs[zgensym_8df0a91a1f250219_250].Term, err = dc.ReadInt64()
							if err != nil {
								return
							}
						case "Count_zid01_i64":
							found254zgensym_8df0a91a1f250219_255[1] = true
							z.Runs[zgensym_8df0a91a1f250219_250].Count, err = dc.ReadInt64()
							if err != nil {
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
					if nextMiss254zgensym_8df0a91a1f250219_255 != -1 {
						dc.PopAlwaysNil()
					}

				}
			}
		case "CompactTerm_zid03_i64":
			found251zgensym_8df0a91a1f250219_252[3] = true
			z.CompactTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss251zgensym_8df0a91a1f250219_252 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TermsRLE
var decodeMsgFieldOrder251zgensym_8df0a91a1f250219_252 = []string{"BaseC_zid00_i64", "Endi_zid01_i64", "Runs_zid02_slc", "CompactTerm_zid03_i64"}

var decodeMsgFieldSkip251zgensym_8df0a91a1f250219_252 = []bool{false, false, false, false}

// fields of TermRLE
var decodeMsgFieldOrder254zgensym_8df0a91a1f250219_255 = []string{"Term_zid00_i64", "Count_zid01_i64"}

var decodeMsgFieldSkip254zgensym_8df0a91a1f250219_255 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z *TermsRLE) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.BaseC == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Endi == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Runs) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.CompactTerm == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TermsRLE) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_256 [4]bool
	fieldsInUse_zgensym_8df0a91a1f250219_257 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_256[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_257 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TermsRLE'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_256[0] {
		// write "BaseC_zid00_i64"
		err = en.Append(0xaf, 0x42, 0x61, 0x73, 0x65, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.BaseC)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_256[1] {
		// write "Endi_zid01_i64"
		err = en.Append(0xae, 0x45, 0x6e, 0x64, 0x69, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Endi)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_256[2] {
		// write "Runs_zid02_slc"
		err = en.Append(0xae, 0x52, 0x75, 0x6e, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Runs)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_250 := range z.Runs {
			// gPtr.encodeGen():

			if z.Runs[zgensym_8df0a91a1f250219_250] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {

				// honor the omitempty tags
				var empty_zgensym_8df0a91a1f250219_258 [2]bool
				fieldsInUse_zgensym_8df0a91a1f250219_259 := z.Runs[zgensym_8df0a91a1f250219_250].fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_258[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_259 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'TermRLE'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x54, 0x65, 0x72, 0x6d, 0x52, 0x4c, 0x45})
				if err != nil {
					return err
				}

				if !empty_zgensym_8df0a91a1f250219_258[0] {
					// write "Term_zid00_i64"
					err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
					if err != nil {
						return err
					}
					err = en.WriteInt64(z.Runs[zgensym_8df0a91a1f250219_250].Term)
					if err != nil {
						return
					}
				}

				if !empty_zgensym_8df0a91a1f250219_258[1] {
					// write "Count_zid01_i64"
					err = en.Append(0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
					if err != nil {
						return err
					}
					err = en.WriteInt64(z.Runs[zgensym_8df0a91a1f250219_250].Count)
					if err != nil {
						return
					}
				}

			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_256[3] {
		// write "CompactTerm_zid03_i64"
		err = en.Append(0xb5, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CompactTerm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TermsRLE) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "BaseC_zid00_i64"
		o = append(o, 0xaf, 0x42, 0x61, 0x73, 0x65, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.BaseC)
	}

	if !empty[1] {
		// string "Endi_zid01_i64"
		o = append(o, 0xae, 0x45, 0x6e, 0x64, 0x69, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Endi)
	}

	if !empty[2] {
		// string "Runs_zid02_slc"
		o = append(o, 0xae, 0x52, 0x75, 0x6e, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Runs)))
		for zgensym_8df0a91a1f250219_250 := range z.Runs {
			// marshalGen.gPtr()

			if z.Runs[zgensym_8df0a91a1f250219_250] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				// honor the omitempty tags
				var empty [2]bool
				fieldsInUse := z.Runs[zgensym_8df0a91a1f250219_250].fieldsNotEmpty(empty[:])
				o = msgp.AppendMapHeader(o, fieldsInUse)

				if !empty[0] {
					// string "Term_zid00_i64"
					o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
					o = msgp.AppendInt64(o, z.Runs[zgensym_8df0a91a1f250219_250].Term)
				}

				if !empty[1] {
					// string "Count_zid01_i64"
					o = append(o, 0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x69, 0x36, 0x34)
					o = msgp.AppendInt64(o, z.Runs[zgensym_8df0a91a1f250219_250].Count)
				}

			}
		}
	}

	if !empty[3] {
		// string "CompactTerm_zid03_i64"
		o = append(o, 0xb5, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CompactTerm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TermsRLE) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TermsRLE) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields260zgensym_8df0a91a1f250219_261 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields260zgensym_8df0a91a1f250219_261 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields260zgensym_8df0a91a1f250219_261, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft260zgensym_8df0a91a1f250219_261 := totalEncodedFields260zgensym_8df0a91a1f250219_261
	missingFieldsLeft260zgensym_8df0a91a1f250219_261 := maxFields260zgensym_8df0a91a1f250219_261 - totalEncodedFields260zgensym_8df0a91a1f250219_261

	var nextMiss260zgensym_8df0a91a1f250219_261 int32 = -1
	var found260zgensym_8df0a91a1f250219_261 [maxFields260zgensym_8df0a91a1f250219_261]bool
	var curField260zgensym_8df0a91a1f250219_261 string

doneWithStruct260zgensym_8df0a91a1f250219_261:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft260zgensym_8df0a91a1f250219_261 > 0 || missingFieldsLeft260zgensym_8df0a91a1f250219_261 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft260zgensym_8df0a91a1f250219_261, missingFieldsLeft260zgensym_8df0a91a1f250219_261, msgp.ShowFound(found260zgensym_8df0a91a1f250219_261[:]), unmarshalMsgFieldOrder260zgensym_8df0a91a1f250219_261)
		if encodedFieldsLeft260zgensym_8df0a91a1f250219_261 > 0 {
			encodedFieldsLeft260zgensym_8df0a91a1f250219_261--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField260zgensym_8df0a91a1f250219_261 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss260zgensym_8df0a91a1f250219_261 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss260zgensym_8df0a91a1f250219_261 = 0
			}
			for nextMiss260zgensym_8df0a91a1f250219_261 < maxFields260zgensym_8df0a91a1f250219_261 && (found260zgensym_8df0a91a1f250219_261[nextMiss260zgensym_8df0a91a1f250219_261] || unmarshalMsgFieldSkip260zgensym_8df0a91a1f250219_261[nextMiss260zgensym_8df0a91a1f250219_261]) {
				nextMiss260zgensym_8df0a91a1f250219_261++
			}
			if nextMiss260zgensym_8df0a91a1f250219_261 == maxFields260zgensym_8df0a91a1f250219_261 {
				// filled all the empty fields!
				break doneWithStruct260zgensym_8df0a91a1f250219_261
			}
			missingFieldsLeft260zgensym_8df0a91a1f250219_261--
			curField260zgensym_8df0a91a1f250219_261 = unmarshalMsgFieldOrder260zgensym_8df0a91a1f250219_261[nextMiss260zgensym_8df0a91a1f250219_261]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField260zgensym_8df0a91a1f250219_261)
		switch curField260zgensym_8df0a91a1f250219_261 {
		// -- templateUnmarshalMsg ends here --

		case "BaseC_zid00_i64":
			found260zgensym_8df0a91a1f250219_261[0] = true
			z.BaseC, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Endi_zid01_i64":
			found260zgensym_8df0a91a1f250219_261[1] = true
			z.Endi, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Runs_zid02_slc":
			found260zgensym_8df0a91a1f250219_261[2] = true
			if nbs.AlwaysNil {
				(z.Runs) = (z.Runs)[:0]
			} else {

				var zgensym_8df0a91a1f250219_262 uint32
				zgensym_8df0a91a1f250219_262, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Runs) >= int(zgensym_8df0a91a1f250219_262) {
					z.Runs = (z.Runs)[:zgensym_8df0a91a1f250219_262]
				} else {
					z.Runs = make([]*TermRLE, zgensym_8df0a91a1f250219_262)
				}
				for zgensym_8df0a91a1f250219_250 := range z.Runs {
					// default gPtr logic.
					if nbs.PeekNil(bts) && z.Runs[zgensym_8df0a91a1f250219_250] == nil {
						// consume the nil
						bts, err = nbs.ReadNilBytes(bts)
						if err != nil {
							return
						}
					} else {
						// read as-if the wire has bytes, letting nbs take care of nils.

						if z.Runs[zgensym_8df0a91a1f250219_250] == nil {
							z.Runs[zgensym_8df0a91a1f250219_250] = new(TermRLE)
						}

						const maxFields263zgensym_8df0a91a1f250219_264 = 2

						// -- templateUnmarshalMsg starts here--
						var totalEncodedFields263zgensym_8df0a91a1f250219_264 uint32
						if !nbs.AlwaysNil {
							totalEncodedFields263zgensym_8df0a91a1f250219_264, bts, err = nbs.ReadMapHeaderBytes(bts)
							if err != nil {
								return
							}
						}
						encodedFieldsLeft263zgensym_8df0a91a1f250219_264 := totalEncodedFields263zgensym_8df0a91a1f250219_264
						missingFieldsLeft263zgensym_8df0a91a1f250219_264 := maxFields263zgensym_8df0a91a1f250219_264 - totalEncodedFields263zgensym_8df0a91a1f250219_264

						var nextMiss263zgensym_8df0a91a1f250219_264 int32 = -1
						var found263zgensym_8df0a91a1f250219_264 [maxFields263zgensym_8df0a91a1f250219_264]bool
						var curField263zgensym_8df0a91a1f250219_264 string

					doneWithStruct263zgensym_8df0a91a1f250219_264:
						// First fill all the encoded fields, then
						// treat the remaining, missing fields, as Nil.
						for encodedFieldsLeft263zgensym_8df0a91a1f250219_264 > 0 || missingFieldsLeft263zgensym_8df0a91a1f250219_264 > 0 {
							//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft263zgensym_8df0a91a1f250219_264, missingFieldsLeft263zgensym_8df0a91a1f250219_264, msgp.ShowFound(found263zgensym_8df0a91a1f250219_264[:]), unmarshalMsgFieldOrder263zgensym_8df0a91a1f250219_264)
							if encodedFieldsLeft263zgensym_8df0a91a1f250219_264 > 0 {
								encodedFieldsLeft263zgensym_8df0a91a1f250219_264--
								field, bts, err = nbs.ReadMapKeyZC(bts)
								if err != nil {
									return
								}
								curField263zgensym_8df0a91a1f250219_264 = msgp.UnsafeString(field)
							} else {
								//missing fields need handling
								if nextMiss263zgensym_8df0a91a1f250219_264 < 0 {
									// set bts to contain just mnil (0xc0)
									bts = nbs.PushAlwaysNil(bts)
									nextMiss263zgensym_8df0a91a1f250219_264 = 0
								}
								for nextMiss263zgensym_8df0a91a1f250219_264 < maxFields263zgensym_8df0a91a1f250219_264 && (found263zgensym_8df0a91a1f250219_264[nextMiss263zgensym_8df0a91a1f250219_264] || unmarshalMsgFieldSkip263zgensym_8df0a91a1f250219_264[nextMiss263zgensym_8df0a91a1f250219_264]) {
									nextMiss263zgensym_8df0a91a1f250219_264++
								}
								if nextMiss263zgensym_8df0a91a1f250219_264 == maxFields263zgensym_8df0a91a1f250219_264 {
									// filled all the empty fields!
									break doneWithStruct263zgensym_8df0a91a1f250219_264
								}
								missingFieldsLeft263zgensym_8df0a91a1f250219_264--
								curField263zgensym_8df0a91a1f250219_264 = unmarshalMsgFieldOrder263zgensym_8df0a91a1f250219_264[nextMiss263zgensym_8df0a91a1f250219_264]
							}
							//fmt.Printf("switching on curField: '%v'\n", curField263zgensym_8df0a91a1f250219_264)
							switch curField263zgensym_8df0a91a1f250219_264 {
							// -- templateUnmarshalMsg ends here --

							case "Term_zid00_i64":
								found263zgensym_8df0a91a1f250219_264[0] = true
								z.Runs[zgensym_8df0a91a1f250219_250].Term, bts, err = nbs.ReadInt64Bytes(bts)

								if err != nil {
									return
								}
							case "Count_zid01_i64":
								found263zgensym_8df0a91a1f250219_264[1] = true
								z.Runs[zgensym_8df0a91a1f250219_250].Count, bts, err = nbs.ReadInt64Bytes(bts)

								if err != nil {
									return
								}
							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									return
								}
							}
						}
						if nextMiss263zgensym_8df0a91a1f250219_264 != -1 {
							bts = nbs.PopAlwaysNil()
						}

					}
				}
			}
		case "CompactTerm_zid03_i64":
			found260zgensym_8df0a91a1f250219_261[3] = true
			z.CompactTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss260zgensym_8df0a91a1f250219_261 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TermsRLE
var unmarshalMsgFieldOrder260zgensym_8df0a91a1f250219_261 = []string{"BaseC_zid00_i64", "Endi_zid01_i64", "Runs_zid02_slc", "CompactTerm_zid03_i64"}

var unmarshalMsgFieldSkip260zgensym_8df0a91a1f250219_261 = []bool{false, false, false, false}

// fields of TermRLE
var unmarshalMsgFieldOrder263zgensym_8df0a91a1f250219_264 = []string{"Term_zid00_i64", "Count_zid01_i64"}

var unmarshalMsgFieldSkip263zgensym_8df0a91a1f250219_264 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TermsRLE) Msgsize() (s int) {
	s = 1 + 16 + msgp.Int64Size + 15 + msgp.Int64Size + 15 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_250 := range z.Runs {
		if z.Runs[zgensym_8df0a91a1f250219_250] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 15 + msgp.Int64Size + 16 + msgp.Int64Size
		}
	}
	s += 22 + msgp.Int64Size
	return
}
func (z *TermsRLE) Gstring() (r string) {
	r = "&TermsRLE{\n"
	r += fmt.Sprintf("      BaseC: %v,\n", z.BaseC)
	r += fmt.Sprintf("       Endi: %v,\n", z.Endi)
	r += fmt.Sprintf("       Runs: %v,\n", z.Runs)
	r += fmt.Sprintf("CompactTerm: %v,\n", z.CompactTerm)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Ticket) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields265zgensym_8df0a91a1f250219_266 = 64

	// -- templateDecodeMsg starts here--
	var totalEncodedFields265zgensym_8df0a91a1f250219_266 uint32
	totalEncodedFields265zgensym_8df0a91a1f250219_266, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft265zgensym_8df0a91a1f250219_266 := totalEncodedFields265zgensym_8df0a91a1f250219_266
	missingFieldsLeft265zgensym_8df0a91a1f250219_266 := maxFields265zgensym_8df0a91a1f250219_266 - totalEncodedFields265zgensym_8df0a91a1f250219_266

	var nextMiss265zgensym_8df0a91a1f250219_266 int32 = -1
	var found265zgensym_8df0a91a1f250219_266 [maxFields265zgensym_8df0a91a1f250219_266]bool
	var curField265zgensym_8df0a91a1f250219_266 string

doneWithStruct265zgensym_8df0a91a1f250219_266:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft265zgensym_8df0a91a1f250219_266 > 0 || missingFieldsLeft265zgensym_8df0a91a1f250219_266 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft265zgensym_8df0a91a1f250219_266, missingFieldsLeft265zgensym_8df0a91a1f250219_266, msgp.ShowFound(found265zgensym_8df0a91a1f250219_266[:]), decodeMsgFieldOrder265zgensym_8df0a91a1f250219_266)
		if encodedFieldsLeft265zgensym_8df0a91a1f250219_266 > 0 {
			encodedFieldsLeft265zgensym_8df0a91a1f250219_266--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField265zgensym_8df0a91a1f250219_266 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss265zgensym_8df0a91a1f250219_266 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss265zgensym_8df0a91a1f250219_266 = 0
			}
			for nextMiss265zgensym_8df0a91a1f250219_266 < maxFields265zgensym_8df0a91a1f250219_266 && (found265zgensym_8df0a91a1f250219_266[nextMiss265zgensym_8df0a91a1f250219_266] || decodeMsgFieldSkip265zgensym_8df0a91a1f250219_266[nextMiss265zgensym_8df0a91a1f250219_266]) {
				nextMiss265zgensym_8df0a91a1f250219_266++
			}
			if nextMiss265zgensym_8df0a91a1f250219_266 == maxFields265zgensym_8df0a91a1f250219_266 {
				// filled all the empty fields!
				break doneWithStruct265zgensym_8df0a91a1f250219_266
			}
			missingFieldsLeft265zgensym_8df0a91a1f250219_266--
			curField265zgensym_8df0a91a1f250219_266 = decodeMsgFieldOrder265zgensym_8df0a91a1f250219_266[nextMiss265zgensym_8df0a91a1f250219_266]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField265zgensym_8df0a91a1f250219_266)
		switch curField265zgensym_8df0a91a1f250219_266 {
		// -- templateDecodeMsg ends here --

		case "TSN_zid00_i64":
			found265zgensym_8df0a91a1f250219_266[0] = true
			z.TSN, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "T0_zid01_tim":
			found265zgensym_8df0a91a1f250219_266[1] = true
			z.T0, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Key_zid02_rct":
			found265zgensym_8df0a91a1f250219_266[2] = true
			{
				var zgensym_8df0a91a1f250219_267 string
				zgensym_8df0a91a1f250219_267, err = dc.ReadString()
				z.Key = Key(zgensym_8df0a91a1f250219_267)
			}
			if err != nil {
				return
			}
		case "Val_zid03_rct":
			found265zgensym_8df0a91a1f250219_266[3] = true
			{
				var zgensym_8df0a91a1f250219_268 []byte
				zgensym_8df0a91a1f250219_268, err = dc.ReadBytes([]byte(z.Val))
				z.Val = Val(zgensym_8df0a91a1f250219_268)
			}
			if err != nil {
				return
			}
		case "FromID_zid04_str":
			found265zgensym_8df0a91a1f250219_266[4] = true
			z.FromID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromName_zid05_str":
			found265zgensym_8df0a91a1f250219_266[5] = true
			z.FromName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ClusterID_zid06_str":
			found265zgensym_8df0a91a1f250219_266[6] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Errs_zid07_str":
			found265zgensym_8df0a91a1f250219_266[7] = true
			z.Errs, err = dc.ReadString()
			if err != nil {
				return
			}
		case "TicketID_zid08_str":
			found265zgensym_8df0a91a1f250219_266[8] = true
			z.TicketID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Op_zid09_rct":
			found265zgensym_8df0a91a1f250219_266[9] = true
			{
				var zgensym_8df0a91a1f250219_269 int64
				zgensym_8df0a91a1f250219_269, err = dc.ReadInt64()
				z.Op = TicketOp(zgensym_8df0a91a1f250219_269)
			}
			if err != nil {
				return
			}
		case "LogIndex_zid10_i64":
			found265zgensym_8df0a91a1f250219_266[10] = true
			z.LogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Term_zid11_i64":
			found265zgensym_8df0a91a1f250219_266[11] = true
			z.Term, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Desc_zid12_str":
			found265zgensym_8df0a91a1f250219_266[12] = true
			z.Desc, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Committed_zid13_boo":
			found265zgensym_8df0a91a1f250219_266[13] = true
			z.Committed, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Applied_zid14_boo":
			found265zgensym_8df0a91a1f250219_266[14] = true
			z.Applied, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "ClientAcked_zid15_boo":
			found265zgensym_8df0a91a1f250219_266[15] = true
			z.ClientAcked, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "AsOfLogIndex_zid16_i64":
			found265zgensym_8df0a91a1f250219_266[16] = true
			z.AsOfLogIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "LeaderID_zid17_str":
			found265zgensym_8df0a91a1f250219_266[17] = true
			z.LeaderID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderName_zid18_str":
			found265zgensym_8df0a91a1f250219_266[18] = true
			z.LeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderURL_zid19_str":
			found265zgensym_8df0a91a1f250219_266[19] = true
			z.LeaderURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "LeaderStampSN_zid20_i64":
			found265zgensym_8df0a91a1f250219_266[20] = true
			z.LeaderStampSN, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SessionID_zid21_str":
			found265zgensym_8df0a91a1f250219_266[21] = true
			z.SessionID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SessionSerial_zid22_i64":
			found265zgensym_8df0a91a1f250219_266[22] = true
			z.SessionSerial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Stage_zid23_str":
			found265zgensym_8df0a91a1f250219_266[23] = true
			z.Stage, err = dc.ReadString()
			if err != nil {
				return
			}
		case "DoneClosedOnPeerID_zid24_str":
			found265zgensym_8df0a91a1f250219_266[24] = true
			z.DoneClosedOnPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "AddPeerName_zid25_str":
			found265zgensym_8df0a91a1f250219_266[25] = true
			z.AddPeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "AddPeerID_zid26_str":
			found265zgensym_8df0a91a1f250219_266[26] = true
			z.AddPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "AddPeerServiceName_zid27_str":
			found265zgensym_8df0a91a1f250219_266[27] = true
			z.AddPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "AddPeerBaseServerHostPort_zid28_str":
			found265zgensym_8df0a91a1f250219_266[28] = true
			z.AddPeerBaseServerHostPort, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemovePeerName_zid29_str":
			found265zgensym_8df0a91a1f250219_266[29] = true
			z.RemovePeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemovePeerID_zid30_str":
			found265zgensym_8df0a91a1f250219_266[30] = true
			z.RemovePeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemovePeerServiceName_zid31_str":
			found265zgensym_8df0a91a1f250219_266[31] = true
			z.RemovePeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemovePeerBaseServerHostPort_zid32_str":
			found265zgensym_8df0a91a1f250219_266[32] = true
			z.RemovePeerBaseServerHostPort, err = dc.ReadString()
			if err != nil {
				return
			}
		case "GuessLeaderURL_zid33_str":
			found265zgensym_8df0a91a1f250219_266[33] = true
			z.GuessLeaderURL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Insp_zid34_ptr":
			found265zgensym_8df0a91a1f250219_266[34] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Insp != nil {
					dc.PushAlwaysNil()
					err = z.Insp.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Insp == nil {
					z.Insp = new(Inspection)
				}
				dc.DedupIndexEachPtr(z.Insp)

				err = z.Insp.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "MC_zid35_ptr":
			found265zgensym_8df0a91a1f250219_266[35] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "LeaderGotTicketTm_zid36_tim":
			found265zgensym_8df0a91a1f250219_266[36] = true
			z.LeaderGotTicketTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "LeaderLocalReadGoodUntil_zid37_tim":
			found265zgensym_8df0a91a1f250219_266[37] = true
			z.LeaderLocalReadGoodUntil, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "LeaderLocalReadAtTm_zid38_tim":
			found265zgensym_8df0a91a1f250219_266[38] = true
			z.LeaderLocalReadAtTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ClientLocalSubmitTm_zid39_tim":
			found265zgensym_8df0a91a1f250219_266[39] = true
			z.ClientLocalSubmitTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ClientLocalResponseTm_zid40_tim":
			found265zgensym_8df0a91a1f250219_266[40] = true
			z.ClientLocalResponseTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ClientHighestLogIndexSeen_zid41_i64":
			found265zgensym_8df0a91a1f250219_266[41] = true
			z.ClientHighestLogIndexSeen, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "NewSessReq_zid42_ptr":
			found265zgensym_8df0a91a1f250219_266[42] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.NewSessReq != nil {
					dc.PushAlwaysNil()
					err = z.NewSessReq.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.NewSessReq == nil {
					z.NewSessReq = new(Session)
				}
				dc.DedupIndexEachPtr(z.NewSessReq)

				err = z.NewSessReq.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "NewSessReply_zid43_ptr":
			found265zgensym_8df0a91a1f250219_266[43] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.NewSessReply != nil {
					dc.PushAlwaysNil()
					err = z.NewSessReply.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.NewSessReply == nil {
					z.NewSessReply = new(Session)
				}
				dc.DedupIndexEachPtr(z.NewSessReply)

				err = z.NewSessReply.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "DupDetected_zid44_boo":
			found265zgensym_8df0a91a1f250219_266[44] = true
			z.DupDetected, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "MinSessSerialWaiting_zid45_i64":
			found265zgensym_8df0a91a1f250219_266[45] = true
			z.MinSessSerialWaiting, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "EndSessReq_SessionID_zid46_str":
			found265zgensym_8df0a91a1f250219_266[46] = true
			z.EndSessReq_SessionID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Table_zid47_rct":
			found265zgensym_8df0a91a1f250219_266[47] = true
			{
				var zgensym_8df0a91a1f250219_270 string
				zgensym_8df0a91a1f250219_270, err = dc.ReadString()
				z.Table = Key(zgensym_8df0a91a1f250219_270)
			}
			if err != nil {
				return
			}
		case "OldVal_zid48_rct":
			found265zgensym_8df0a91a1f250219_266[48] = true
			{
				var zgensym_8df0a91a1f250219_271 []byte
				zgensym_8df0a91a1f250219_271, err = dc.ReadBytes([]byte(z.OldVal))
				z.OldVal = Val(zgensym_8df0a91a1f250219_271)
			}
			if err != nil {
				return
			}
		case "CASwapped_zid49_boo":
			found265zgensym_8df0a91a1f250219_266[49] = true
			z.CASwapped, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "CASRejectedBecauseCurVal_zid50_rct":
			found265zgensym_8df0a91a1f250219_266[50] = true
			{
				var zgensym_8df0a91a1f250219_272 []byte
				zgensym_8df0a91a1f250219_272, err = dc.ReadBytes([]byte(z.CASRejectedBecauseCurVal))
				z.CASRejectedBecauseCurVal = Val(zgensym_8df0a91a1f250219_272)
			}
			if err != nil {
				return
			}
		case "NewTableName_zid51_rct":
			found265zgensym_8df0a91a1f250219_266[51] = true
			{
				var zgensym_8df0a91a1f250219_273 string
				zgensym_8df0a91a1f250219_273, err = dc.ReadString()
				z.NewTableName = Key(zgensym_8df0a91a1f250219_273)
			}
			if err != nil {
				return
			}
		case "StateSnapshot_zid52_ptr":
			found265zgensym_8df0a91a1f250219_266[52] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.StateSnapshot != nil {
					dc.PushAlwaysNil()
					err = z.StateSnapshot.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.StateSnapshot == nil {
					z.StateSnapshot = new(RaftState)
				}
				dc.DedupIndexEachPtr(z.StateSnapshot)

				err = z.StateSnapshot.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "KeyEndx_zid53_rct":
			found265zgensym_8df0a91a1f250219_266[53] = true
			{
				var zgensym_8df0a91a1f250219_274 string
				zgensym_8df0a91a1f250219_274, err = dc.ReadString()
				z.KeyEndx = Key(zgensym_8df0a91a1f250219_274)
			}
			if err != nil {
				return
			}
		case "ScanDescend_zid54_boo":
			found265zgensym_8df0a91a1f250219_266[54] = true
			z.ScanDescend, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "KeyValRangeScan_zid55_ptr":
			found265zgensym_8df0a91a1f250219_266[55] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.KeyValRangeScan != nil {
					dc.PushAlwaysNil()
					err = z.KeyValRangeScan.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.KeyValRangeScan == nil {
					z.KeyValRangeScan = new(art.Tree)
				}
				dc.DedupIndexEachPtr(z.KeyValRangeScan)

				err = z.KeyValRangeScan.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "SessionLastKnownIndex_zid56_i64":
			found265zgensym_8df0a91a1f250219_266[56] = true
			z.SessionLastKnownIndex, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "AddPeerServiceNameVersion_zid57_str":
			found265zgensym_8df0a91a1f250219_266[57] = true
			z.AddPeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RemovePeerServiceNameVersion_zid58_str":
			found265zgensym_8df0a91a1f250219_266[58] = true
			z.RemovePeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "UserDefinedOpCode_zid59_i64":
			found265zgensym_8df0a91a1f250219_266[59] = true
			z.UserDefinedOpCode, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "WaitLeaderDeadline_zid60_tim":
			found265zgensym_8df0a91a1f250219_266[60] = true
			z.WaitLeaderDeadline, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "ForceChangeMC_zid61_boo":
			found265zgensym_8df0a91a1f250219_266[61] = true
			z.ForceChangeMC, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss265zgensym_8df0a91a1f250219_266 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ticket
var decodeMsgFieldOrder265zgensym_8df0a91a1f250219_266 = []string{"TSN_zid00_i64", "T0_zid01_tim", "Key_zid02_rct", "Val_zid03_rct", "FromID_zid04_str", "FromName_zid05_str", "ClusterID_zid06_str", "Errs_zid07_str", "TicketID_zid08_str", "Op_zid09_rct", "LogIndex_zid10_i64", "Term_zid11_i64", "Desc_zid12_str", "Committed_zid13_boo", "Applied_zid14_boo", "ClientAcked_zid15_boo", "AsOfLogIndex_zid16_i64", "LeaderID_zid17_str", "LeaderName_zid18_str", "LeaderURL_zid19_str", "LeaderStampSN_zid20_i64", "SessionID_zid21_str", "SessionSerial_zid22_i64", "Stage_zid23_str", "DoneClosedOnPeerID_zid24_str", "AddPeerName_zid25_str", "AddPeerID_zid26_str", "AddPeerServiceName_zid27_str", "AddPeerBaseServerHostPort_zid28_str", "RemovePeerName_zid29_str", "RemovePeerID_zid30_str", "RemovePeerServiceName_zid31_str", "RemovePeerBaseServerHostPort_zid32_str", "GuessLeaderURL_zid33_str", "Insp_zid34_ptr", "MC_zid35_ptr", "LeaderGotTicketTm_zid36_tim", "LeaderLocalReadGoodUntil_zid37_tim", "LeaderLocalReadAtTm_zid38_tim", "ClientLocalSubmitTm_zid39_tim", "ClientLocalResponseTm_zid40_tim", "ClientHighestLogIndexSeen_zid41_i64", "NewSessReq_zid42_ptr", "NewSessReply_zid43_ptr", "DupDetected_zid44_boo", "MinSessSerialWaiting_zid45_i64", "EndSessReq_SessionID_zid46_str", "Table_zid47_rct", "OldVal_zid48_rct", "CASwapped_zid49_boo", "CASRejectedBecauseCurVal_zid50_rct", "NewTableName_zid51_rct", "StateSnapshot_zid52_ptr", "KeyEndx_zid53_rct", "ScanDescend_zid54_boo", "KeyValRangeScan_zid55_ptr", "SessionLastKnownIndex_zid56_i64", "AddPeerServiceNameVersion_zid57_str", "RemovePeerServiceNameVersion_zid58_str", "UserDefinedOpCode_zid59_i64", "WaitLeaderDeadline_zid60_tim", "ForceChangeMC_zid61_boo", "", ""}

var decodeMsgFieldSkip265zgensym_8df0a91a1f250219_266 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *Ticket) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 62
	}
	var fieldsInUse uint32 = 62
	isempty[0] = (z.TSN == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.T0.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Key) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Val) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.FromID) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.FromName) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.Errs) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.TicketID) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.Op == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (z.LogIndex == 0) // number, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.Term == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (len(z.Desc) == 0) // string, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (!z.Committed) // bool, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (!z.Applied) // bool, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (!z.ClientAcked) // bool, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (z.AsOfLogIndex == 0) // number, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (len(z.LeaderID) == 0) // string, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (len(z.LeaderName) == 0) // string, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (len(z.LeaderURL) == 0) // string, omitempty
	if isempty[19] {
		fieldsInUse--
	}
	isempty[20] = (z.LeaderStampSN == 0) // number, omitempty
	if isempty[20] {
		fieldsInUse--
	}
	isempty[21] = (len(z.SessionID) == 0) // string, omitempty
	if isempty[21] {
		fieldsInUse--
	}
	isempty[22] = (z.SessionSerial == 0) // number, omitempty
	if isempty[22] {
		fieldsInUse--
	}
	isempty[23] = (len(z.Stage) == 0) // string, omitempty
	if isempty[23] {
		fieldsInUse--
	}
	isempty[24] = (len(z.DoneClosedOnPeerID) == 0) // string, omitempty
	if isempty[24] {
		fieldsInUse--
	}
	isempty[25] = (len(z.AddPeerName) == 0) // string, omitempty
	if isempty[25] {
		fieldsInUse--
	}
	isempty[26] = (len(z.AddPeerID) == 0) // string, omitempty
	if isempty[26] {
		fieldsInUse--
	}
	isempty[27] = (len(z.AddPeerServiceName) == 0) // string, omitempty
	if isempty[27] {
		fieldsInUse--
	}
	isempty[28] = (len(z.AddPeerBaseServerHostPort) == 0) // string, omitempty
	if isempty[28] {
		fieldsInUse--
	}
	isempty[29] = (len(z.RemovePeerName) == 0) // string, omitempty
	if isempty[29] {
		fieldsInUse--
	}
	isempty[30] = (len(z.RemovePeerID) == 0) // string, omitempty
	if isempty[30] {
		fieldsInUse--
	}
	isempty[31] = (len(z.RemovePeerServiceName) == 0) // string, omitempty
	if isempty[31] {
		fieldsInUse--
	}
	isempty[32] = (len(z.RemovePeerBaseServerHostPort) == 0) // string, omitempty
	if isempty[32] {
		fieldsInUse--
	}
	isempty[33] = (len(z.GuessLeaderURL) == 0) // string, omitempty
	if isempty[33] {
		fieldsInUse--
	}
	isempty[34] = (z.Insp == nil) // pointer, omitempty
	if isempty[34] {
		fieldsInUse--
	}
	isempty[35] = (z.MC == nil) // pointer, omitempty
	if isempty[35] {
		fieldsInUse--
	}
	isempty[36] = (z.LeaderGotTicketTm.IsZero()) // time.Time, omitempty
	if isempty[36] {
		fieldsInUse--
	}
	isempty[37] = (z.LeaderLocalReadGoodUntil.IsZero()) // time.Time, omitempty
	if isempty[37] {
		fieldsInUse--
	}
	isempty[38] = (z.LeaderLocalReadAtTm.IsZero()) // time.Time, omitempty
	if isempty[38] {
		fieldsInUse--
	}
	isempty[39] = (z.ClientLocalSubmitTm.IsZero()) // time.Time, omitempty
	if isempty[39] {
		fieldsInUse--
	}
	isempty[40] = (z.ClientLocalResponseTm.IsZero()) // time.Time, omitempty
	if isempty[40] {
		fieldsInUse--
	}
	isempty[41] = (z.ClientHighestLogIndexSeen == 0) // number, omitempty
	if isempty[41] {
		fieldsInUse--
	}
	isempty[42] = (z.NewSessReq == nil) // pointer, omitempty
	if isempty[42] {
		fieldsInUse--
	}
	isempty[43] = (z.NewSessReply == nil) // pointer, omitempty
	if isempty[43] {
		fieldsInUse--
	}
	isempty[44] = (!z.DupDetected) // bool, omitempty
	if isempty[44] {
		fieldsInUse--
	}
	isempty[45] = (z.MinSessSerialWaiting == 0) // number, omitempty
	if isempty[45] {
		fieldsInUse--
	}
	isempty[46] = (len(z.EndSessReq_SessionID) == 0) // string, omitempty
	if isempty[46] {
		fieldsInUse--
	}
	isempty[47] = (len(z.Table) == 0) // string, omitempty
	if isempty[47] {
		fieldsInUse--
	}
	isempty[48] = (len(z.OldVal) == 0) // string, omitempty
	if isempty[48] {
		fieldsInUse--
	}
	isempty[49] = (!z.CASwapped) // bool, omitempty
	if isempty[49] {
		fieldsInUse--
	}
	isempty[50] = (len(z.CASRejectedBecauseCurVal) == 0) // string, omitempty
	if isempty[50] {
		fieldsInUse--
	}
	isempty[51] = (len(z.NewTableName) == 0) // string, omitempty
	if isempty[51] {
		fieldsInUse--
	}
	isempty[52] = (z.StateSnapshot == nil) // pointer, omitempty
	if isempty[52] {
		fieldsInUse--
	}
	isempty[53] = (len(z.KeyEndx) == 0) // string, omitempty
	if isempty[53] {
		fieldsInUse--
	}
	isempty[54] = (!z.ScanDescend) // bool, omitempty
	if isempty[54] {
		fieldsInUse--
	}
	isempty[55] = (z.KeyValRangeScan == nil) // pointer, omitempty
	if isempty[55] {
		fieldsInUse--
	}
	isempty[56] = (z.SessionLastKnownIndex == 0) // number, omitempty
	if isempty[56] {
		fieldsInUse--
	}
	isempty[57] = (len(z.AddPeerServiceNameVersion) == 0) // string, omitempty
	if isempty[57] {
		fieldsInUse--
	}
	isempty[58] = (len(z.RemovePeerServiceNameVersion) == 0) // string, omitempty
	if isempty[58] {
		fieldsInUse--
	}
	isempty[59] = (z.UserDefinedOpCode == 0) // number, omitempty
	if isempty[59] {
		fieldsInUse--
	}
	isempty[60] = (z.WaitLeaderDeadline.IsZero()) // time.Time, omitempty
	if isempty[60] {
		fieldsInUse--
	}
	isempty[61] = (!z.ForceChangeMC) // bool, omitempty
	if isempty[61] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Ticket) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_275 [64]bool
	fieldsInUse_zgensym_8df0a91a1f250219_276 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_275[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_276 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Ticket'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x69, 0x63, 0x6b, 0x65, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_275[0] {
		// write "TSN_zid00_i64"
		err = en.Append(0xad, 0x54, 0x53, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.TSN)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[1] {
		// write "T0_zid01_tim"
		err = en.Append(0xac, 0x54, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.T0)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[2] {
		// write "Key_zid02_rct"
		err = en.Append(0xad, 0x4b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteString(string(z.Key))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[3] {
		// write "Val_zid03_rct"
		err = en.Append(0xad, 0x56, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteBytes([]byte(z.Val))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[4] {
		// write "FromID_zid04_str"
		err = en.Append(0xb0, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[5] {
		// write "FromName_zid05_str"
		err = en.Append(0xb2, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[6] {
		// write "ClusterID_zid06_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[7] {
		// write "Errs_zid07_str"
		err = en.Append(0xae, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Errs)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[8] {
		// write "TicketID_zid08_str"
		err = en.Append(0xb2, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.TicketID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[9] {
		// write "Op_zid09_rct"
		err = en.Append(0xac, 0x4f, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt64(int64(z.Op))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[10] {
		// write "LogIndex_zid10_i64"
		err = en.Append(0xb2, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[11] {
		// write "Term_zid11_i64"
		err = en.Append(0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Term)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[12] {
		// write "Desc_zid12_str"
		err = en.Append(0xae, 0x44, 0x65, 0x73, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Desc)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[13] {
		// write "Committed_zid13_boo"
		err = en.Append(0xb3, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Committed)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[14] {
		// write "Applied_zid14_boo"
		err = en.Append(0xb1, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Applied)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[15] {
		// write "ClientAcked_zid15_boo"
		err = en.Append(0xb5, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.ClientAcked)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[16] {
		// write "AsOfLogIndex_zid16_i64"
		err = en.Append(0xb6, 0x41, 0x73, 0x4f, 0x66, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.AsOfLogIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[17] {
		// write "LeaderID_zid17_str"
		err = en.Append(0xb2, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[18] {
		// write "LeaderName_zid18_str"
		err = en.Append(0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[19] {
		// write "LeaderURL_zid19_str"
		err = en.Append(0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.LeaderURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[20] {
		// write "LeaderStampSN_zid20_i64"
		err = en.Append(0xb7, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.LeaderStampSN)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[21] {
		// write "SessionID_zid21_str"
		err = en.Append(0xb3, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SessionID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[22] {
		// write "SessionSerial_zid22_i64"
		err = en.Append(0xb7, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SessionSerial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[23] {
		// write "Stage_zid23_str"
		err = en.Append(0xaf, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Stage)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[24] {
		// write "DoneClosedOnPeerID_zid24_str"
		err = en.Append(0xbc, 0x44, 0x6f, 0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.DoneClosedOnPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[25] {
		// write "AddPeerName_zid25_str"
		err = en.Append(0xb5, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AddPeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[26] {
		// write "AddPeerID_zid26_str"
		err = en.Append(0xb3, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AddPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[27] {
		// write "AddPeerServiceName_zid27_str"
		err = en.Append(0xbc, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AddPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[28] {
		// write "AddPeerBaseServerHostPort_zid28_str"
		err = en.Append(0xd9, 0x23, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AddPeerBaseServerHostPort)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[29] {
		// write "RemovePeerName_zid29_str"
		err = en.Append(0xb8, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RemovePeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[30] {
		// write "RemovePeerID_zid30_str"
		err = en.Append(0xb6, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RemovePeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[31] {
		// write "RemovePeerServiceName_zid31_str"
		err = en.Append(0xbf, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RemovePeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[32] {
		// write "RemovePeerBaseServerHostPort_zid32_str"
		err = en.Append(0xd9, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RemovePeerBaseServerHostPort)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[33] {
		// write "GuessLeaderURL_zid33_str"
		err = en.Append(0xb8, 0x47, 0x75, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.GuessLeaderURL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[34] {
		// write "Insp_zid34_ptr"
		err = en.Append(0xae, 0x49, 0x6e, 0x73, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x34, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Insp == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Insp.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[35] {
		// write "MC_zid35_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x35, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[36] {
		// write "LeaderGotTicketTm_zid36_tim"
		err = en.Append(0xbb, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x36, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.LeaderGotTicketTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[37] {
		// write "LeaderLocalReadGoodUntil_zid37_tim"
		err = en.Append(0xd9, 0x22, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x37, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.LeaderLocalReadGoodUntil)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[38] {
		// write "LeaderLocalReadAtTm_zid38_tim"
		err = en.Append(0xbd, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x74, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x38, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.LeaderLocalReadAtTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[39] {
		// write "ClientLocalSubmitTm_zid39_tim"
		err = en.Append(0xbd, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x39, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ClientLocalSubmitTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[40] {
		// write "ClientLocalResponseTm_zid40_tim"
		err = en.Append(0xbf, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.ClientLocalResponseTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[41] {
		// write "ClientHighestLogIndexSeen_zid41_i64"
		err = en.Append(0xd9, 0x23, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x31, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ClientHighestLogIndexSeen)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[42] {
		// write "NewSessReq_zid42_ptr"
		err = en.Append(0xb4, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.NewSessReq == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.NewSessReq.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[43] {
		// write "NewSessReply_zid43_ptr"
		err = en.Append(0xb6, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x33, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.NewSessReply == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.NewSessReply.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[44] {
		// write "DupDetected_zid44_boo"
		err = en.Append(0xb5, 0x44, 0x75, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.DupDetected)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[45] {
		// write "MinSessSerialWaiting_zid45_i64"
		err = en.Append(0xbe, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.MinSessSerialWaiting)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[46] {
		// write "EndSessReq_SessionID_zid46_str"
		err = en.Append(0xbe, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.EndSessReq_SessionID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[47] {
		// write "Table_zid47_rct"
		err = en.Append(0xaf, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x37, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteString(string(z.Table))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[48] {
		// write "OldVal_zid48_rct"
		err = en.Append(0xb0, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x38, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteBytes([]byte(z.OldVal))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[49] {
		// write "CASwapped_zid49_boo"
		err = en.Append(0xb3, 0x43, 0x41, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.CASwapped)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[50] {
		// write "CASRejectedBecauseCurVal_zid50_rct"
		err = en.Append(0xd9, 0x22, 0x43, 0x41, 0x53, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x43, 0x75, 0x72, 0x56, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteBytes([]byte(z.CASRejectedBecauseCurVal))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[51] {
		// write "NewTableName_zid51_rct"
		err = en.Append(0xb6, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x31, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteString(string(z.NewTableName))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[52] {
		// write "StateSnapshot_zid52_ptr"
		err = en.Append(0xb7, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.StateSnapshot == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.StateSnapshot.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[53] {
		// write "KeyEndx_zid53_rct"
		err = en.Append(0xb1, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x33, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteString(string(z.KeyEndx))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[54] {
		// write "ScanDescend_zid54_boo"
		err = en.Append(0xb5, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.ScanDescend)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[55] {
		// write "KeyValRangeScan_zid55_ptr"
		err = en.Append(0xb9, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x35, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.KeyValRangeScan == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.KeyValRangeScan.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[56] {
		// write "SessionLastKnownIndex_zid56_i64"
		err = en.Append(0xbf, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.SessionLastKnownIndex)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[57] {
		// write "AddPeerServiceNameVersion_zid57_str"
		err = en.Append(0xd9, 0x23, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.AddPeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[58] {
		// write "RemovePeerServiceNameVersion_zid58_str"
		err = en.Append(0xd9, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RemovePeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[59] {
		// write "UserDefinedOpCode_zid59_i64"
		err = en.Append(0xbb, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.UserDefinedOpCode)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[60] {
		// write "WaitLeaderDeadline_zid60_tim"
		err = en.Append(0xbc, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x36, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.WaitLeaderDeadline)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_275[61] {
		// write "ForceChangeMC_zid61_boo"
		err = en.Append(0xb7, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x36, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.ForceChangeMC)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Ticket) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [64]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "TSN_zid00_i64"
		o = append(o, 0xad, 0x54, 0x53, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.TSN)
	}

	if !empty[1] {
		// string "T0_zid01_tim"
		o = append(o, 0xac, 0x54, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.T0)
	}

	if !empty[2] {
		// string "Key_zid02_rct"
		o = append(o, 0xad, 0x4b, 0x65, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendString(o, string(z.Key))
	}

	if !empty[3] {
		// string "Val_zid03_rct"
		o = append(o, 0xad, 0x56, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendBytes(o, []byte(z.Val))
	}

	if !empty[4] {
		// string "FromID_zid04_str"
		o = append(o, 0xb0, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromID)
	}

	if !empty[5] {
		// string "FromName_zid05_str"
		o = append(o, 0xb2, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromName)
	}

	if !empty[6] {
		// string "ClusterID_zid06_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[7] {
		// string "Errs_zid07_str"
		o = append(o, 0xae, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Errs)
	}

	if !empty[8] {
		// string "TicketID_zid08_str"
		o = append(o, 0xb2, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.TicketID)
	}

	if !empty[9] {
		// string "Op_zid09_rct"
		o = append(o, 0xac, 0x4f, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt64(o, int64(z.Op))
	}

	if !empty[10] {
		// string "LogIndex_zid10_i64"
		o = append(o, 0xb2, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LogIndex)
	}

	if !empty[11] {
		// string "Term_zid11_i64"
		o = append(o, 0xae, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Term)
	}

	if !empty[12] {
		// string "Desc_zid12_str"
		o = append(o, 0xae, 0x44, 0x65, 0x73, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Desc)
	}

	if !empty[13] {
		// string "Committed_zid13_boo"
		o = append(o, 0xb3, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Committed)
	}

	if !empty[14] {
		// string "Applied_zid14_boo"
		o = append(o, 0xb1, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.Applied)
	}

	if !empty[15] {
		// string "ClientAcked_zid15_boo"
		o = append(o, 0xb5, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.ClientAcked)
	}

	if !empty[16] {
		// string "AsOfLogIndex_zid16_i64"
		o = append(o, 0xb6, 0x41, 0x73, 0x4f, 0x66, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.AsOfLogIndex)
	}

	if !empty[17] {
		// string "LeaderID_zid17_str"
		o = append(o, 0xb2, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderID)
	}

	if !empty[18] {
		// string "LeaderName_zid18_str"
		o = append(o, 0xb4, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderName)
	}

	if !empty[19] {
		// string "LeaderURL_zid19_str"
		o = append(o, 0xb3, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.LeaderURL)
	}

	if !empty[20] {
		// string "LeaderStampSN_zid20_i64"
		o = append(o, 0xb7, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x30, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.LeaderStampSN)
	}

	if !empty[21] {
		// string "SessionID_zid21_str"
		o = append(o, 0xb3, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.SessionID)
	}

	if !empty[22] {
		// string "SessionSerial_zid22_i64"
		o = append(o, 0xb7, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x32, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SessionSerial)
	}

	if !empty[23] {
		// string "Stage_zid23_str"
		o = append(o, 0xaf, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Stage)
	}

	if !empty[24] {
		// string "DoneClosedOnPeerID_zid24_str"
		o = append(o, 0xbc, 0x44, 0x6f, 0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.DoneClosedOnPeerID)
	}

	if !empty[25] {
		// string "AddPeerName_zid25_str"
		o = append(o, 0xb5, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AddPeerName)
	}

	if !empty[26] {
		// string "AddPeerID_zid26_str"
		o = append(o, 0xb3, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AddPeerID)
	}

	if !empty[27] {
		// string "AddPeerServiceName_zid27_str"
		o = append(o, 0xbc, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AddPeerServiceName)
	}

	if !empty[28] {
		// string "AddPeerBaseServerHostPort_zid28_str"
		o = append(o, 0xd9, 0x23, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AddPeerBaseServerHostPort)
	}

	if !empty[29] {
		// string "RemovePeerName_zid29_str"
		o = append(o, 0xb8, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x32, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RemovePeerName)
	}

	if !empty[30] {
		// string "RemovePeerID_zid30_str"
		o = append(o, 0xb6, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RemovePeerID)
	}

	if !empty[31] {
		// string "RemovePeerServiceName_zid31_str"
		o = append(o, 0xbf, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RemovePeerServiceName)
	}

	if !empty[32] {
		// string "RemovePeerBaseServerHostPort_zid32_str"
		o = append(o, 0xd9, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RemovePeerBaseServerHostPort)
	}

	if !empty[33] {
		// string "GuessLeaderURL_zid33_str"
		o = append(o, 0xb8, 0x47, 0x75, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.GuessLeaderURL)
	}

	if !empty[34] {
		// string "Insp_zid34_ptr"
		o = append(o, 0xae, 0x49, 0x6e, 0x73, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x34, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Insp == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Insp.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[35] {
		// string "MC_zid35_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x35, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[36] {
		// string "LeaderGotTicketTm_zid36_tim"
		o = append(o, 0xbb, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x36, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.LeaderGotTicketTm)
	}

	if !empty[37] {
		// string "LeaderLocalReadGoodUntil_zid37_tim"
		o = append(o, 0xd9, 0x22, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x37, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.LeaderLocalReadGoodUntil)
	}

	if !empty[38] {
		// string "LeaderLocalReadAtTm_zid38_tim"
		o = append(o, 0xbd, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x74, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x38, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.LeaderLocalReadAtTm)
	}

	if !empty[39] {
		// string "ClientLocalSubmitTm_zid39_tim"
		o = append(o, 0xbd, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x33, 0x39, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ClientLocalSubmitTm)
	}

	if !empty[40] {
		// string "ClientLocalResponseTm_zid40_tim"
		o = append(o, 0xbf, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.ClientLocalResponseTm)
	}

	if !empty[41] {
		// string "ClientHighestLogIndexSeen_zid41_i64"
		o = append(o, 0xd9, 0x23, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x31, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.ClientHighestLogIndexSeen)
	}

	if !empty[42] {
		// string "NewSessReq_zid42_ptr"
		o = append(o, 0xb4, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.NewSessReq == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.NewSessReq.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[43] {
		// string "NewSessReply_zid43_ptr"
		o = append(o, 0xb6, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x33, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.NewSessReply == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.NewSessReply.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[44] {
		// string "DupDetected_zid44_boo"
		o = append(o, 0xb5, 0x44, 0x75, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.DupDetected)
	}

	if !empty[45] {
		// string "MinSessSerialWaiting_zid45_i64"
		o = append(o, 0xbe, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.MinSessSerialWaiting)
	}

	if !empty[46] {
		// string "EndSessReq_SessionID_zid46_str"
		o = append(o, 0xbe, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.EndSessReq_SessionID)
	}

	if !empty[47] {
		// string "Table_zid47_rct"
		o = append(o, 0xaf, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x37, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendString(o, string(z.Table))
	}

	if !empty[48] {
		// string "OldVal_zid48_rct"
		o = append(o, 0xb0, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x38, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendBytes(o, []byte(z.OldVal))
	}

	if !empty[49] {
		// string "CASwapped_zid49_boo"
		o = append(o, 0xb3, 0x43, 0x41, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x34, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.CASwapped)
	}

	if !empty[50] {
		// string "CASRejectedBecauseCurVal_zid50_rct"
		o = append(o, 0xd9, 0x22, 0x43, 0x41, 0x53, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x43, 0x75, 0x72, 0x56, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendBytes(o, []byte(z.CASRejectedBecauseCurVal))
	}

	if !empty[51] {
		// string "NewTableName_zid51_rct"
		o = append(o, 0xb6, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x31, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendString(o, string(z.NewTableName))
	}

	if !empty[52] {
		// string "StateSnapshot_zid52_ptr"
		o = append(o, 0xb7, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.StateSnapshot == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.StateSnapshot.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[53] {
		// string "KeyEndx_zid53_rct"
		o = append(o, 0xb1, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x33, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendString(o, string(z.KeyEndx))
	}

	if !empty[54] {
		// string "ScanDescend_zid54_boo"
		o = append(o, 0xb5, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.ScanDescend)
	}

	if !empty[55] {
		// string "KeyValRangeScan_zid55_ptr"
		o = append(o, 0xb9, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x35, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.KeyValRangeScan == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.KeyValRangeScan.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[56] {
		// string "SessionLastKnownIndex_zid56_i64"
		o = append(o, 0xbf, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.SessionLastKnownIndex)
	}

	if !empty[57] {
		// string "AddPeerServiceNameVersion_zid57_str"
		o = append(o, 0xd9, 0x23, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.AddPeerServiceNameVersion)
	}

	if !empty[58] {
		// string "RemovePeerServiceNameVersion_zid58_str"
		o = append(o, 0xd9, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.RemovePeerServiceNameVersion)
	}

	if !empty[59] {
		// string "UserDefinedOpCode_zid59_i64"
		o = append(o, 0xbb, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x35, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.UserDefinedOpCode)
	}

	if !empty[60] {
		// string "WaitLeaderDeadline_zid60_tim"
		o = append(o, 0xbc, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x36, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.WaitLeaderDeadline)
	}

	if !empty[61] {
		// string "ForceChangeMC_zid61_boo"
		o = append(o, 0xb7, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x36, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.ForceChangeMC)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ticket) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Ticket) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields277zgensym_8df0a91a1f250219_278 = 64

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields277zgensym_8df0a91a1f250219_278 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields277zgensym_8df0a91a1f250219_278, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft277zgensym_8df0a91a1f250219_278 := totalEncodedFields277zgensym_8df0a91a1f250219_278
	missingFieldsLeft277zgensym_8df0a91a1f250219_278 := maxFields277zgensym_8df0a91a1f250219_278 - totalEncodedFields277zgensym_8df0a91a1f250219_278

	var nextMiss277zgensym_8df0a91a1f250219_278 int32 = -1
	var found277zgensym_8df0a91a1f250219_278 [maxFields277zgensym_8df0a91a1f250219_278]bool
	var curField277zgensym_8df0a91a1f250219_278 string

doneWithStruct277zgensym_8df0a91a1f250219_278:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft277zgensym_8df0a91a1f250219_278 > 0 || missingFieldsLeft277zgensym_8df0a91a1f250219_278 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft277zgensym_8df0a91a1f250219_278, missingFieldsLeft277zgensym_8df0a91a1f250219_278, msgp.ShowFound(found277zgensym_8df0a91a1f250219_278[:]), unmarshalMsgFieldOrder277zgensym_8df0a91a1f250219_278)
		if encodedFieldsLeft277zgensym_8df0a91a1f250219_278 > 0 {
			encodedFieldsLeft277zgensym_8df0a91a1f250219_278--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField277zgensym_8df0a91a1f250219_278 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss277zgensym_8df0a91a1f250219_278 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss277zgensym_8df0a91a1f250219_278 = 0
			}
			for nextMiss277zgensym_8df0a91a1f250219_278 < maxFields277zgensym_8df0a91a1f250219_278 && (found277zgensym_8df0a91a1f250219_278[nextMiss277zgensym_8df0a91a1f250219_278] || unmarshalMsgFieldSkip277zgensym_8df0a91a1f250219_278[nextMiss277zgensym_8df0a91a1f250219_278]) {
				nextMiss277zgensym_8df0a91a1f250219_278++
			}
			if nextMiss277zgensym_8df0a91a1f250219_278 == maxFields277zgensym_8df0a91a1f250219_278 {
				// filled all the empty fields!
				break doneWithStruct277zgensym_8df0a91a1f250219_278
			}
			missingFieldsLeft277zgensym_8df0a91a1f250219_278--
			curField277zgensym_8df0a91a1f250219_278 = unmarshalMsgFieldOrder277zgensym_8df0a91a1f250219_278[nextMiss277zgensym_8df0a91a1f250219_278]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField277zgensym_8df0a91a1f250219_278)
		switch curField277zgensym_8df0a91a1f250219_278 {
		// -- templateUnmarshalMsg ends here --

		case "TSN_zid00_i64":
			found277zgensym_8df0a91a1f250219_278[0] = true
			z.TSN, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "T0_zid01_tim":
			found277zgensym_8df0a91a1f250219_278[1] = true
			z.T0, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Key_zid02_rct":
			found277zgensym_8df0a91a1f250219_278[2] = true
			{
				var zgensym_8df0a91a1f250219_279 string
				zgensym_8df0a91a1f250219_279, bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
				z.Key = Key(zgensym_8df0a91a1f250219_279)
			}
		case "Val_zid03_rct":
			found277zgensym_8df0a91a1f250219_278[3] = true
			{
				var zgensym_8df0a91a1f250219_280 []byte
				if nbs.AlwaysNil || msgp.IsNil(bts) {
					if !nbs.AlwaysNil {
						bts = bts[1:]
					}
					zgensym_8df0a91a1f250219_280 = zgensym_8df0a91a1f250219_280[:0]
				} else {
					zgensym_8df0a91a1f250219_280, bts, err = nbs.ReadBytesBytes(bts, []byte(z.Val))

					if err != nil {
						return
					}
				}
				if err != nil {
					return
				}
				z.Val = Val(zgensym_8df0a91a1f250219_280)
			}
		case "FromID_zid04_str":
			found277zgensym_8df0a91a1f250219_278[4] = true
			z.FromID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromName_zid05_str":
			found277zgensym_8df0a91a1f250219_278[5] = true
			z.FromName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ClusterID_zid06_str":
			found277zgensym_8df0a91a1f250219_278[6] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Errs_zid07_str":
			found277zgensym_8df0a91a1f250219_278[7] = true
			z.Errs, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "TicketID_zid08_str":
			found277zgensym_8df0a91a1f250219_278[8] = true
			z.TicketID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Op_zid09_rct":
			found277zgensym_8df0a91a1f250219_278[9] = true
			{
				var zgensym_8df0a91a1f250219_281 int64
				zgensym_8df0a91a1f250219_281, bts, err = nbs.ReadInt64Bytes(bts)

				if err != nil {
					return
				}
				z.Op = TicketOp(zgensym_8df0a91a1f250219_281)
			}
		case "LogIndex_zid10_i64":
			found277zgensym_8df0a91a1f250219_278[10] = true
			z.LogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Term_zid11_i64":
			found277zgensym_8df0a91a1f250219_278[11] = true
			z.Term, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Desc_zid12_str":
			found277zgensym_8df0a91a1f250219_278[12] = true
			z.Desc, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Committed_zid13_boo":
			found277zgensym_8df0a91a1f250219_278[13] = true
			z.Committed, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Applied_zid14_boo":
			found277zgensym_8df0a91a1f250219_278[14] = true
			z.Applied, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "ClientAcked_zid15_boo":
			found277zgensym_8df0a91a1f250219_278[15] = true
			z.ClientAcked, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "AsOfLogIndex_zid16_i64":
			found277zgensym_8df0a91a1f250219_278[16] = true
			z.AsOfLogIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "LeaderID_zid17_str":
			found277zgensym_8df0a91a1f250219_278[17] = true
			z.LeaderID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderName_zid18_str":
			found277zgensym_8df0a91a1f250219_278[18] = true
			z.LeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderURL_zid19_str":
			found277zgensym_8df0a91a1f250219_278[19] = true
			z.LeaderURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "LeaderStampSN_zid20_i64":
			found277zgensym_8df0a91a1f250219_278[20] = true
			z.LeaderStampSN, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SessionID_zid21_str":
			found277zgensym_8df0a91a1f250219_278[21] = true
			z.SessionID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "SessionSerial_zid22_i64":
			found277zgensym_8df0a91a1f250219_278[22] = true
			z.SessionSerial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Stage_zid23_str":
			found277zgensym_8df0a91a1f250219_278[23] = true
			z.Stage, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "DoneClosedOnPeerID_zid24_str":
			found277zgensym_8df0a91a1f250219_278[24] = true
			z.DoneClosedOnPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "AddPeerName_zid25_str":
			found277zgensym_8df0a91a1f250219_278[25] = true
			z.AddPeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "AddPeerID_zid26_str":
			found277zgensym_8df0a91a1f250219_278[26] = true
			z.AddPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "AddPeerServiceName_zid27_str":
			found277zgensym_8df0a91a1f250219_278[27] = true
			z.AddPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "AddPeerBaseServerHostPort_zid28_str":
			found277zgensym_8df0a91a1f250219_278[28] = true
			z.AddPeerBaseServerHostPort, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemovePeerName_zid29_str":
			found277zgensym_8df0a91a1f250219_278[29] = true
			z.RemovePeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemovePeerID_zid30_str":
			found277zgensym_8df0a91a1f250219_278[30] = true
			z.RemovePeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemovePeerServiceName_zid31_str":
			found277zgensym_8df0a91a1f250219_278[31] = true
			z.RemovePeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemovePeerBaseServerHostPort_zid32_str":
			found277zgensym_8df0a91a1f250219_278[32] = true
			z.RemovePeerBaseServerHostPort, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "GuessLeaderURL_zid33_str":
			found277zgensym_8df0a91a1f250219_278[33] = true
			z.GuessLeaderURL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Insp_zid34_ptr":
			found277zgensym_8df0a91a1f250219_278[34] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Insp != nil {
					z.Insp.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Insp {
						z.Insp.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Insp == nil {
						z.Insp = new(Inspection)
					}

					bts, err = z.Insp.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MC_zid35_ptr":
			found277zgensym_8df0a91a1f250219_278[35] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "LeaderGotTicketTm_zid36_tim":
			found277zgensym_8df0a91a1f250219_278[36] = true
			z.LeaderGotTicketTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "LeaderLocalReadGoodUntil_zid37_tim":
			found277zgensym_8df0a91a1f250219_278[37] = true
			z.LeaderLocalReadGoodUntil, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "LeaderLocalReadAtTm_zid38_tim":
			found277zgensym_8df0a91a1f250219_278[38] = true
			z.LeaderLocalReadAtTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ClientLocalSubmitTm_zid39_tim":
			found277zgensym_8df0a91a1f250219_278[39] = true
			z.ClientLocalSubmitTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ClientLocalResponseTm_zid40_tim":
			found277zgensym_8df0a91a1f250219_278[40] = true
			z.ClientLocalResponseTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ClientHighestLogIndexSeen_zid41_i64":
			found277zgensym_8df0a91a1f250219_278[41] = true
			z.ClientHighestLogIndexSeen, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "NewSessReq_zid42_ptr":
			found277zgensym_8df0a91a1f250219_278[42] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.NewSessReq != nil {
					z.NewSessReq.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.NewSessReq {
						z.NewSessReq.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.NewSessReq == nil {
						z.NewSessReq = new(Session)
					}

					bts, err = z.NewSessReq.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "NewSessReply_zid43_ptr":
			found277zgensym_8df0a91a1f250219_278[43] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.NewSessReply != nil {
					z.NewSessReply.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.NewSessReply {
						z.NewSessReply.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.NewSessReply == nil {
						z.NewSessReply = new(Session)
					}

					bts, err = z.NewSessReply.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "DupDetected_zid44_boo":
			found277zgensym_8df0a91a1f250219_278[44] = true
			z.DupDetected, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "MinSessSerialWaiting_zid45_i64":
			found277zgensym_8df0a91a1f250219_278[45] = true
			z.MinSessSerialWaiting, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "EndSessReq_SessionID_zid46_str":
			found277zgensym_8df0a91a1f250219_278[46] = true
			z.EndSessReq_SessionID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Table_zid47_rct":
			found277zgensym_8df0a91a1f250219_278[47] = true
			{
				var zgensym_8df0a91a1f250219_282 string
				zgensym_8df0a91a1f250219_282, bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
				z.Table = Key(zgensym_8df0a91a1f250219_282)
			}
		case "OldVal_zid48_rct":
			found277zgensym_8df0a91a1f250219_278[48] = true
			{
				var zgensym_8df0a91a1f250219_283 []byte
				if nbs.AlwaysNil || msgp.IsNil(bts) {
					if !nbs.AlwaysNil {
						bts = bts[1:]
					}
					zgensym_8df0a91a1f250219_283 = zgensym_8df0a91a1f250219_283[:0]
				} else {
					zgensym_8df0a91a1f250219_283, bts, err = nbs.ReadBytesBytes(bts, []byte(z.OldVal))

					if err != nil {
						return
					}
				}
				if err != nil {
					return
				}
				z.OldVal = Val(zgensym_8df0a91a1f250219_283)
			}
		case "CASwapped_zid49_boo":
			found277zgensym_8df0a91a1f250219_278[49] = true
			z.CASwapped, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "CASRejectedBecauseCurVal_zid50_rct":
			found277zgensym_8df0a91a1f250219_278[50] = true
			{
				var zgensym_8df0a91a1f250219_284 []byte
				if nbs.AlwaysNil || msgp.IsNil(bts) {
					if !nbs.AlwaysNil {
						bts = bts[1:]
					}
					zgensym_8df0a91a1f250219_284 = zgensym_8df0a91a1f250219_284[:0]
				} else {
					zgensym_8df0a91a1f250219_284, bts, err = nbs.ReadBytesBytes(bts, []byte(z.CASRejectedBecauseCurVal))

					if err != nil {
						return
					}
				}
				if err != nil {
					return
				}
				z.CASRejectedBecauseCurVal = Val(zgensym_8df0a91a1f250219_284)
			}
		case "NewTableName_zid51_rct":
			found277zgensym_8df0a91a1f250219_278[51] = true
			{
				var zgensym_8df0a91a1f250219_285 string
				zgensym_8df0a91a1f250219_285, bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
				z.NewTableName = Key(zgensym_8df0a91a1f250219_285)
			}
		case "StateSnapshot_zid52_ptr":
			found277zgensym_8df0a91a1f250219_278[52] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.StateSnapshot != nil {
					z.StateSnapshot.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.StateSnapshot {
						z.StateSnapshot.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.StateSnapshot == nil {
						z.StateSnapshot = new(RaftState)
					}

					bts, err = z.StateSnapshot.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "KeyEndx_zid53_rct":
			found277zgensym_8df0a91a1f250219_278[53] = true
			{
				var zgensym_8df0a91a1f250219_286 string
				zgensym_8df0a91a1f250219_286, bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
				z.KeyEndx = Key(zgensym_8df0a91a1f250219_286)
			}
		case "ScanDescend_zid54_boo":
			found277zgensym_8df0a91a1f250219_278[54] = true
			z.ScanDescend, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "KeyValRangeScan_zid55_ptr":
			found277zgensym_8df0a91a1f250219_278[55] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.KeyValRangeScan != nil {
					z.KeyValRangeScan.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.KeyValRangeScan {
						z.KeyValRangeScan.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.KeyValRangeScan == nil {
						z.KeyValRangeScan = new(art.Tree)
					}

					bts, err = z.KeyValRangeScan.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "SessionLastKnownIndex_zid56_i64":
			found277zgensym_8df0a91a1f250219_278[56] = true
			z.SessionLastKnownIndex, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "AddPeerServiceNameVersion_zid57_str":
			found277zgensym_8df0a91a1f250219_278[57] = true
			z.AddPeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "RemovePeerServiceNameVersion_zid58_str":
			found277zgensym_8df0a91a1f250219_278[58] = true
			z.RemovePeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "UserDefinedOpCode_zid59_i64":
			found277zgensym_8df0a91a1f250219_278[59] = true
			z.UserDefinedOpCode, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "WaitLeaderDeadline_zid60_tim":
			found277zgensym_8df0a91a1f250219_278[60] = true
			z.WaitLeaderDeadline, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "ForceChangeMC_zid61_boo":
			found277zgensym_8df0a91a1f250219_278[61] = true
			z.ForceChangeMC, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss277zgensym_8df0a91a1f250219_278 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ticket
var unmarshalMsgFieldOrder277zgensym_8df0a91a1f250219_278 = []string{"TSN_zid00_i64", "T0_zid01_tim", "Key_zid02_rct", "Val_zid03_rct", "FromID_zid04_str", "FromName_zid05_str", "ClusterID_zid06_str", "Errs_zid07_str", "TicketID_zid08_str", "Op_zid09_rct", "LogIndex_zid10_i64", "Term_zid11_i64", "Desc_zid12_str", "Committed_zid13_boo", "Applied_zid14_boo", "ClientAcked_zid15_boo", "AsOfLogIndex_zid16_i64", "LeaderID_zid17_str", "LeaderName_zid18_str", "LeaderURL_zid19_str", "LeaderStampSN_zid20_i64", "SessionID_zid21_str", "SessionSerial_zid22_i64", "Stage_zid23_str", "DoneClosedOnPeerID_zid24_str", "AddPeerName_zid25_str", "AddPeerID_zid26_str", "AddPeerServiceName_zid27_str", "AddPeerBaseServerHostPort_zid28_str", "RemovePeerName_zid29_str", "RemovePeerID_zid30_str", "RemovePeerServiceName_zid31_str", "RemovePeerBaseServerHostPort_zid32_str", "GuessLeaderURL_zid33_str", "Insp_zid34_ptr", "MC_zid35_ptr", "LeaderGotTicketTm_zid36_tim", "LeaderLocalReadGoodUntil_zid37_tim", "LeaderLocalReadAtTm_zid38_tim", "ClientLocalSubmitTm_zid39_tim", "ClientLocalResponseTm_zid40_tim", "ClientHighestLogIndexSeen_zid41_i64", "NewSessReq_zid42_ptr", "NewSessReply_zid43_ptr", "DupDetected_zid44_boo", "MinSessSerialWaiting_zid45_i64", "EndSessReq_SessionID_zid46_str", "Table_zid47_rct", "OldVal_zid48_rct", "CASwapped_zid49_boo", "CASRejectedBecauseCurVal_zid50_rct", "NewTableName_zid51_rct", "StateSnapshot_zid52_ptr", "KeyEndx_zid53_rct", "ScanDescend_zid54_boo", "KeyValRangeScan_zid55_ptr", "SessionLastKnownIndex_zid56_i64", "AddPeerServiceNameVersion_zid57_str", "RemovePeerServiceNameVersion_zid58_str", "UserDefinedOpCode_zid59_i64", "WaitLeaderDeadline_zid60_tim", "ForceChangeMC_zid61_boo", "", ""}

var unmarshalMsgFieldSkip277zgensym_8df0a91a1f250219_278 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ticket) Msgsize() (s int) {
	s = 3 + 14 + msgp.Int64Size + 13 + msgp.TimeSize + 14 + msgp.StringPrefixSize + len(string(z.Key)) + 14 + msgp.BytesPrefixSize + len([]byte(z.Val)) + 17 + msgp.StringPrefixSize + len(z.FromID) + 19 + msgp.StringPrefixSize + len(z.FromName) + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 15 + msgp.StringPrefixSize + len(z.Errs) + 19 + msgp.StringPrefixSize + len(z.TicketID) + 13 + msgp.Int64Size + 19 + msgp.Int64Size + 15 + msgp.Int64Size + 15 + msgp.StringPrefixSize + len(z.Desc) + 20 + msgp.BoolSize + 18 + msgp.BoolSize + 22 + msgp.BoolSize + 23 + msgp.Int64Size + 19 + msgp.StringPrefixSize + len(z.LeaderID) + 21 + msgp.StringPrefixSize + len(z.LeaderName) + 20 + msgp.StringPrefixSize + len(z.LeaderURL) + 24 + msgp.Int64Size + 20 + msgp.StringPrefixSize + len(z.SessionID) + 24 + msgp.Int64Size + 16 + msgp.StringPrefixSize + len(z.Stage) + 29 + msgp.StringPrefixSize + len(z.DoneClosedOnPeerID) + 22 + msgp.StringPrefixSize + len(z.AddPeerName) + 20 + msgp.StringPrefixSize + len(z.AddPeerID) + 29 + msgp.StringPrefixSize + len(z.AddPeerServiceName) + 37 + msgp.StringPrefixSize + len(z.AddPeerBaseServerHostPort) + 25 + msgp.StringPrefixSize + len(z.RemovePeerName) + 23 + msgp.StringPrefixSize + len(z.RemovePeerID) + 32 + msgp.StringPrefixSize + len(z.RemovePeerServiceName) + 40 + msgp.StringPrefixSize + len(z.RemovePeerBaseServerHostPort) + 25 + msgp.StringPrefixSize + len(z.GuessLeaderURL) + 15
	if z.Insp == nil {
		s += msgp.NilSize
	} else {
		s += z.Insp.Msgsize()
	}
	s += 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	s += 28 + msgp.TimeSize + 36 + msgp.TimeSize + 30 + msgp.TimeSize + 30 + msgp.TimeSize + 32 + msgp.TimeSize + 37 + msgp.Int64Size + 21
	if z.NewSessReq == nil {
		s += msgp.NilSize
	} else {
		s += z.NewSessReq.Msgsize()
	}
	s += 23
	if z.NewSessReply == nil {
		s += msgp.NilSize
	} else {
		s += z.NewSessReply.Msgsize()
	}
	s += 22 + msgp.BoolSize + 31 + msgp.Int64Size + 31 + msgp.StringPrefixSize + len(z.EndSessReq_SessionID) + 16 + msgp.StringPrefixSize + len(string(z.Table)) + 17 + msgp.BytesPrefixSize + len([]byte(z.OldVal)) + 20 + msgp.BoolSize + 36 + msgp.BytesPrefixSize + len([]byte(z.CASRejectedBecauseCurVal)) + 23 + msgp.StringPrefixSize + len(string(z.NewTableName)) + 24
	if z.StateSnapshot == nil {
		s += msgp.NilSize
	} else {
		s += z.StateSnapshot.Msgsize()
	}
	s += 18 + msgp.StringPrefixSize + len(string(z.KeyEndx)) + 22 + msgp.BoolSize + 26
	if z.KeyValRangeScan == nil {
		s += msgp.NilSize
	} else {
		s += z.KeyValRangeScan.Msgsize()
	}
	s += 32 + msgp.Int64Size + 37 + msgp.StringPrefixSize + len(z.AddPeerServiceNameVersion) + 40 + msgp.StringPrefixSize + len(z.RemovePeerServiceNameVersion) + 28 + msgp.Int64Size + 29 + msgp.TimeSize + 24 + msgp.BoolSize
	return
}
func (z *Ticket) Gstring() (r string) {
	r = "&Ticket{\n"
	r += fmt.Sprintf("                         TSN: %v,\n", z.TSN)
	r += fmt.Sprintf("                          T0: %v,\n", z.T0)
	r += fmt.Sprintf("                         Key: %v,\n", z.Key)
	r += fmt.Sprintf("                         Val: %v,\n", z.Val)
	r += fmt.Sprintf("                      FromID: \"%v\",\n", z.FromID)
	r += fmt.Sprintf("                    FromName: \"%v\",\n", z.FromName)
	r += fmt.Sprintf("                   ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("                        Errs: \"%v\",\n", z.Errs)
	r += fmt.Sprintf("                    TicketID: \"%v\",\n", z.TicketID)
	r += fmt.Sprintf("                          Op: %v,\n", z.Op)
	r += fmt.Sprintf("                    LogIndex: %v,\n", z.LogIndex)
	r += fmt.Sprintf("                        Term: %v,\n", z.Term)
	r += fmt.Sprintf("                        Desc: \"%v\",\n", z.Desc)
	r += fmt.Sprintf("                   Committed: %v,\n", z.Committed)
	r += fmt.Sprintf("                     Applied: %v,\n", z.Applied)
	r += fmt.Sprintf("                 ClientAcked: %v,\n", z.ClientAcked)
	r += fmt.Sprintf("                AsOfLogIndex: %v,\n", z.AsOfLogIndex)
	r += fmt.Sprintf("                    LeaderID: \"%v\",\n", z.LeaderID)
	r += fmt.Sprintf("                  LeaderName: \"%v\",\n", z.LeaderName)
	r += fmt.Sprintf("                   LeaderURL: \"%v\",\n", z.LeaderURL)
	r += fmt.Sprintf("               LeaderStampSN: %v,\n", z.LeaderStampSN)
	r += fmt.Sprintf("                   SessionID: \"%v\",\n", z.SessionID)
	r += fmt.Sprintf("               SessionSerial: %v,\n", z.SessionSerial)
	r += fmt.Sprintf("                       Stage: \"%v\",\n", z.Stage)
	r += fmt.Sprintf("          DoneClosedOnPeerID: \"%v\",\n", z.DoneClosedOnPeerID)
	r += fmt.Sprintf("                 AddPeerName: \"%v\",\n", z.AddPeerName)
	r += fmt.Sprintf("                   AddPeerID: \"%v\",\n", z.AddPeerID)
	r += fmt.Sprintf("          AddPeerServiceName: \"%v\",\n", z.AddPeerServiceName)
	r += fmt.Sprintf("   AddPeerBaseServerHostPort: \"%v\",\n", z.AddPeerBaseServerHostPort)
	r += fmt.Sprintf("              RemovePeerName: \"%v\",\n", z.RemovePeerName)
	r += fmt.Sprintf("                RemovePeerID: \"%v\",\n", z.RemovePeerID)
	r += fmt.Sprintf("       RemovePeerServiceName: \"%v\",\n", z.RemovePeerServiceName)
	r += fmt.Sprintf("RemovePeerBaseServerHostPort: \"%v\",\n", z.RemovePeerBaseServerHostPort)
	r += fmt.Sprintf("              GuessLeaderURL: \"%v\",\n", z.GuessLeaderURL)
	r += fmt.Sprintf("                        Insp: %v,\n", z.Insp)
	r += fmt.Sprintf("                          MC: %v,\n", z.MC)
	r += fmt.Sprintf("           LeaderGotTicketTm: %v,\n", z.LeaderGotTicketTm)
	r += fmt.Sprintf("    LeaderLocalReadGoodUntil: %v,\n", z.LeaderLocalReadGoodUntil)
	r += fmt.Sprintf("         LeaderLocalReadAtTm: %v,\n", z.LeaderLocalReadAtTm)
	r += fmt.Sprintf("         ClientLocalSubmitTm: %v,\n", z.ClientLocalSubmitTm)
	r += fmt.Sprintf("       ClientLocalResponseTm: %v,\n", z.ClientLocalResponseTm)
	r += fmt.Sprintf("   ClientHighestLogIndexSeen: %v,\n", z.ClientHighestLogIndexSeen)
	r += fmt.Sprintf("                  NewSessReq: %v,\n", z.NewSessReq)
	r += fmt.Sprintf("                NewSessReply: %v,\n", z.NewSessReply)
	r += fmt.Sprintf("                 DupDetected: %v,\n", z.DupDetected)
	r += fmt.Sprintf("        MinSessSerialWaiting: %v,\n", z.MinSessSerialWaiting)
	r += fmt.Sprintf("        EndSessReq_SessionID: \"%v\",\n", z.EndSessReq_SessionID)
	r += fmt.Sprintf("                       Table: %v,\n", z.Table)
	r += fmt.Sprintf("                      OldVal: %v,\n", z.OldVal)
	r += fmt.Sprintf("                   CASwapped: %v,\n", z.CASwapped)
	r += fmt.Sprintf("    CASRejectedBecauseCurVal: %v,\n", z.CASRejectedBecauseCurVal)
	r += fmt.Sprintf("                NewTableName: %v,\n", z.NewTableName)
	r += fmt.Sprintf("               StateSnapshot: %v,\n", z.StateSnapshot)
	r += fmt.Sprintf("                     KeyEndx: %v,\n", z.KeyEndx)
	r += fmt.Sprintf("                 ScanDescend: %v,\n", z.ScanDescend)
	r += fmt.Sprintf("             KeyValRangeScan: %v,\n", z.KeyValRangeScan)
	r += fmt.Sprintf("       SessionLastKnownIndex: %v,\n", z.SessionLastKnownIndex)
	r += fmt.Sprintf("   AddPeerServiceNameVersion: \"%v\",\n", z.AddPeerServiceNameVersion)
	r += fmt.Sprintf("RemovePeerServiceNameVersion: \"%v\",\n", z.RemovePeerServiceNameVersion)
	r += fmt.Sprintf("           UserDefinedOpCode: %v,\n", z.UserDefinedOpCode)
	r += fmt.Sprintf("          WaitLeaderDeadline: %v,\n", z.WaitLeaderDeadline)
	r += fmt.Sprintf("               ForceChangeMC: %v,\n", z.ForceChangeMC)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TicketOp) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8df0a91a1f250219_287 int64
		zgensym_8df0a91a1f250219_287, err = dc.ReadInt64()
		(*z) = TicketOp(zgensym_8df0a91a1f250219_287)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z TicketOp) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt64(int64(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TicketOp) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt64(o, int64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TicketOp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TicketOp) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8df0a91a1f250219_288 int64
		zgensym_8df0a91a1f250219_288, bts, err = nbs.ReadInt64Bytes(bts)

		if err != nil {
			return
		}
		(*z) = TicketOp(zgensym_8df0a91a1f250219_288)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TicketOp) Msgsize() (s int) {
	s = msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TubeCluster) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields292zgensym_8df0a91a1f250219_293 = 10

	// -- templateDecodeMsg starts here--
	var totalEncodedFields292zgensym_8df0a91a1f250219_293 uint32
	totalEncodedFields292zgensym_8df0a91a1f250219_293, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft292zgensym_8df0a91a1f250219_293 := totalEncodedFields292zgensym_8df0a91a1f250219_293
	missingFieldsLeft292zgensym_8df0a91a1f250219_293 := maxFields292zgensym_8df0a91a1f250219_293 - totalEncodedFields292zgensym_8df0a91a1f250219_293

	var nextMiss292zgensym_8df0a91a1f250219_293 int32 = -1
	var found292zgensym_8df0a91a1f250219_293 [maxFields292zgensym_8df0a91a1f250219_293]bool
	var curField292zgensym_8df0a91a1f250219_293 string

doneWithStruct292zgensym_8df0a91a1f250219_293:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft292zgensym_8df0a91a1f250219_293 > 0 || missingFieldsLeft292zgensym_8df0a91a1f250219_293 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft292zgensym_8df0a91a1f250219_293, missingFieldsLeft292zgensym_8df0a91a1f250219_293, msgp.ShowFound(found292zgensym_8df0a91a1f250219_293[:]), decodeMsgFieldOrder292zgensym_8df0a91a1f250219_293)
		if encodedFieldsLeft292zgensym_8df0a91a1f250219_293 > 0 {
			encodedFieldsLeft292zgensym_8df0a91a1f250219_293--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField292zgensym_8df0a91a1f250219_293 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss292zgensym_8df0a91a1f250219_293 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss292zgensym_8df0a91a1f250219_293 = 0
			}
			for nextMiss292zgensym_8df0a91a1f250219_293 < maxFields292zgensym_8df0a91a1f250219_293 && (found292zgensym_8df0a91a1f250219_293[nextMiss292zgensym_8df0a91a1f250219_293] || decodeMsgFieldSkip292zgensym_8df0a91a1f250219_293[nextMiss292zgensym_8df0a91a1f250219_293]) {
				nextMiss292zgensym_8df0a91a1f250219_293++
			}
			if nextMiss292zgensym_8df0a91a1f250219_293 == maxFields292zgensym_8df0a91a1f250219_293 {
				// filled all the empty fields!
				break doneWithStruct292zgensym_8df0a91a1f250219_293
			}
			missingFieldsLeft292zgensym_8df0a91a1f250219_293--
			curField292zgensym_8df0a91a1f250219_293 = decodeMsgFieldOrder292zgensym_8df0a91a1f250219_293[nextMiss292zgensym_8df0a91a1f250219_293]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField292zgensym_8df0a91a1f250219_293)
		switch curField292zgensym_8df0a91a1f250219_293 {
		// -- templateDecodeMsg ends here --

		case "TestName__str":
			found292zgensym_8df0a91a1f250219_293[0] = true
			z.TestName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Cfg__ptr":
			found292zgensym_8df0a91a1f250219_293[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Cfg != nil {
					dc.PushAlwaysNil()
					err = z.Cfg.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Cfg == nil {
					z.Cfg = new(TubeConfig)
				}
				dc.DedupIndexEachPtr(z.Cfg)

				err = z.Cfg.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Nodes__slc":
			found292zgensym_8df0a91a1f250219_293[2] = true
			var zgensym_8df0a91a1f250219_294 uint32
			zgensym_8df0a91a1f250219_294, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Nodes) >= int(zgensym_8df0a91a1f250219_294) {
				z.Nodes = (z.Nodes)[:zgensym_8df0a91a1f250219_294]
			} else {
				z.Nodes = make([]*TubeNode, zgensym_8df0a91a1f250219_294)
			}
			for zgensym_8df0a91a1f250219_289 := range z.Nodes {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Nodes[zgensym_8df0a91a1f250219_289] != nil {
						dc.PushAlwaysNil()
						err = z.Nodes[zgensym_8df0a91a1f250219_289].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Nodes[zgensym_8df0a91a1f250219_289] == nil {
						z.Nodes[zgensym_8df0a91a1f250219_289] = new(TubeNode)
					}
					dc.DedupIndexEachPtr(z.Nodes[zgensym_8df0a91a1f250219_289])

					err = z.Nodes[zgensym_8df0a91a1f250219_289].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "NoInitialLeaderTimeout__boo":
			found292zgensym_8df0a91a1f250219_293[5] = true
			z.NoInitialLeaderTimeout, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Name2num__map":
			found292zgensym_8df0a91a1f250219_293[7] = true
			var zgensym_8df0a91a1f250219_295 uint32
			zgensym_8df0a91a1f250219_295, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Name2num == nil && zgensym_8df0a91a1f250219_295 > 0 {
				z.Name2num = make(map[string]int, zgensym_8df0a91a1f250219_295)
			} else if len(z.Name2num) > 0 {
				for key, _ := range z.Name2num {
					delete(z.Name2num, key)
				}
			}
			for zgensym_8df0a91a1f250219_295 > 0 {
				zgensym_8df0a91a1f250219_295--
				var zgensym_8df0a91a1f250219_290 string
				var zgensym_8df0a91a1f250219_291 int
				zgensym_8df0a91a1f250219_290, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_291, err = dc.ReadInt()
				if err != nil {
					return
				}
				z.Name2num[zgensym_8df0a91a1f250219_290] = zgensym_8df0a91a1f250219_291
			}
		case "BootMC__ptr":
			found292zgensym_8df0a91a1f250219_293[9] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.BootMC != nil {
					dc.PushAlwaysNil()
					err = z.BootMC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.BootMC == nil {
					z.BootMC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.BootMC)

				err = z.BootMC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss292zgensym_8df0a91a1f250219_293 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TubeCluster
var decodeMsgFieldOrder292zgensym_8df0a91a1f250219_293 = []string{"TestName__str", "Cfg__ptr", "Nodes__slc", "", "", "NoInitialLeaderTimeout__boo", "", "Name2num__map", "", "BootMC__ptr"}

var decodeMsgFieldSkip292zgensym_8df0a91a1f250219_293 = []bool{false, false, false, true, true, false, true, false, true, false}

// fieldsNotEmpty supports omitempty tags
func (z *TubeCluster) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[0] = (len(z.TestName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Cfg == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Nodes) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[5] = (!z.NoInitialLeaderTimeout) // bool, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[7] = (len(z.Name2num) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[9] = (z.BootMC == nil) // pointer, omitempty
	if isempty[9] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TubeCluster) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_296 [10]bool
	fieldsInUse_zgensym_8df0a91a1f250219_297 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_296[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_297 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TubeCluster'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_296[0] {
		// write "TestName__str"
		err = en.Append(0xad, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.TestName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_296[1] {
		// write "Cfg__ptr"
		err = en.Append(0xa8, 0x43, 0x66, 0x67, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Cfg == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Cfg.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_296[2] {
		// write "Nodes__slc"
		err = en.Append(0xaa, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Nodes)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_289 := range z.Nodes {
			// gPtr.encodeGen():

			if z.Nodes[zgensym_8df0a91a1f250219_289] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Nodes[zgensym_8df0a91a1f250219_289].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_296[5] {
		// write "NoInitialLeaderTimeout__boo"
		err = en.Append(0xbb, 0x4e, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.NoInitialLeaderTimeout)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_296[7] {
		// write "Name2num__map"
		err = en.Append(0xad, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x6e, 0x75, 0x6d, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Name2num)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_290, zgensym_8df0a91a1f250219_291 := range z.Name2num {
			err = en.WriteString(zgensym_8df0a91a1f250219_290)
			if err != nil {
				return
			}
			err = en.WriteInt(zgensym_8df0a91a1f250219_291)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_296[9] {
		// write "BootMC__ptr"
		err = en.Append(0xab, 0x42, 0x6f, 0x6f, 0x74, 0x4d, 0x43, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.BootMC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.BootMC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TubeCluster) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [10]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "TestName__str"
		o = append(o, 0xad, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.TestName)
	}

	if !empty[1] {
		// string "Cfg__ptr"
		o = append(o, 0xa8, 0x43, 0x66, 0x67, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Cfg == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Cfg.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "Nodes__slc"
		o = append(o, 0xaa, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Nodes)))
		for zgensym_8df0a91a1f250219_289 := range z.Nodes {
			// marshalGen.gPtr()

			if z.Nodes[zgensym_8df0a91a1f250219_289] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Nodes[zgensym_8df0a91a1f250219_289].MarshalMsg(o) // not is.iface
				if err != nil {
					return
				}
			}
		}
	}

	if !empty[5] {
		// string "NoInitialLeaderTimeout__boo"
		o = append(o, 0xbb, 0x4e, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.NoInitialLeaderTimeout)
	}

	if !empty[7] {
		// string "Name2num__map"
		o = append(o, 0xad, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x6e, 0x75, 0x6d, 0x5f, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Name2num)))
		for zgensym_8df0a91a1f250219_290, zgensym_8df0a91a1f250219_291 := range z.Name2num {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_290)
			o = msgp.AppendInt(o, zgensym_8df0a91a1f250219_291)
		}
	}

	if !empty[9] {
		// string "BootMC__ptr"
		o = append(o, 0xab, 0x42, 0x6f, 0x6f, 0x74, 0x4d, 0x43, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.BootMC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.BootMC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TubeCluster) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TubeCluster) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields298zgensym_8df0a91a1f250219_299 = 10

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields298zgensym_8df0a91a1f250219_299 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields298zgensym_8df0a91a1f250219_299, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft298zgensym_8df0a91a1f250219_299 := totalEncodedFields298zgensym_8df0a91a1f250219_299
	missingFieldsLeft298zgensym_8df0a91a1f250219_299 := maxFields298zgensym_8df0a91a1f250219_299 - totalEncodedFields298zgensym_8df0a91a1f250219_299

	var nextMiss298zgensym_8df0a91a1f250219_299 int32 = -1
	var found298zgensym_8df0a91a1f250219_299 [maxFields298zgensym_8df0a91a1f250219_299]bool
	var curField298zgensym_8df0a91a1f250219_299 string

doneWithStruct298zgensym_8df0a91a1f250219_299:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft298zgensym_8df0a91a1f250219_299 > 0 || missingFieldsLeft298zgensym_8df0a91a1f250219_299 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft298zgensym_8df0a91a1f250219_299, missingFieldsLeft298zgensym_8df0a91a1f250219_299, msgp.ShowFound(found298zgensym_8df0a91a1f250219_299[:]), unmarshalMsgFieldOrder298zgensym_8df0a91a1f250219_299)
		if encodedFieldsLeft298zgensym_8df0a91a1f250219_299 > 0 {
			encodedFieldsLeft298zgensym_8df0a91a1f250219_299--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField298zgensym_8df0a91a1f250219_299 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss298zgensym_8df0a91a1f250219_299 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss298zgensym_8df0a91a1f250219_299 = 0
			}
			for nextMiss298zgensym_8df0a91a1f250219_299 < maxFields298zgensym_8df0a91a1f250219_299 && (found298zgensym_8df0a91a1f250219_299[nextMiss298zgensym_8df0a91a1f250219_299] || unmarshalMsgFieldSkip298zgensym_8df0a91a1f250219_299[nextMiss298zgensym_8df0a91a1f250219_299]) {
				nextMiss298zgensym_8df0a91a1f250219_299++
			}
			if nextMiss298zgensym_8df0a91a1f250219_299 == maxFields298zgensym_8df0a91a1f250219_299 {
				// filled all the empty fields!
				break doneWithStruct298zgensym_8df0a91a1f250219_299
			}
			missingFieldsLeft298zgensym_8df0a91a1f250219_299--
			curField298zgensym_8df0a91a1f250219_299 = unmarshalMsgFieldOrder298zgensym_8df0a91a1f250219_299[nextMiss298zgensym_8df0a91a1f250219_299]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField298zgensym_8df0a91a1f250219_299)
		switch curField298zgensym_8df0a91a1f250219_299 {
		// -- templateUnmarshalMsg ends here --

		case "TestName__str":
			found298zgensym_8df0a91a1f250219_299[0] = true
			z.TestName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Cfg__ptr":
			found298zgensym_8df0a91a1f250219_299[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Cfg != nil {
					z.Cfg.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Cfg {
						z.Cfg.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Cfg == nil {
						z.Cfg = new(TubeConfig)
					}

					bts, err = z.Cfg.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Nodes__slc":
			found298zgensym_8df0a91a1f250219_299[2] = true
			if nbs.AlwaysNil {
				(z.Nodes) = (z.Nodes)[:0]
			} else {

				var zgensym_8df0a91a1f250219_300 uint32
				zgensym_8df0a91a1f250219_300, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Nodes) >= int(zgensym_8df0a91a1f250219_300) {
					z.Nodes = (z.Nodes)[:zgensym_8df0a91a1f250219_300]
				} else {
					z.Nodes = make([]*TubeNode, zgensym_8df0a91a1f250219_300)
				}
				for zgensym_8df0a91a1f250219_289 := range z.Nodes {
					// unmarshalGen.gPtr(): we have a BaseElem.

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Nodes[zgensym_8df0a91a1f250219_289] != nil {
							z.Nodes[zgensym_8df0a91a1f250219_289].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Nodes[zgensym_8df0a91a1f250219_289] {
								z.Nodes[zgensym_8df0a91a1f250219_289].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Nodes[zgensym_8df0a91a1f250219_289] == nil {
								z.Nodes[zgensym_8df0a91a1f250219_289] = new(TubeNode)
							}

							bts, err = z.Nodes[zgensym_8df0a91a1f250219_289].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "NoInitialLeaderTimeout__boo":
			found298zgensym_8df0a91a1f250219_299[5] = true
			z.NoInitialLeaderTimeout, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Name2num__map":
			found298zgensym_8df0a91a1f250219_299[7] = true
			if nbs.AlwaysNil {
				if len(z.Name2num) > 0 {
					for key, _ := range z.Name2num {
						delete(z.Name2num, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_301 uint32
				zgensym_8df0a91a1f250219_301, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Name2num == nil && zgensym_8df0a91a1f250219_301 > 0 {
					z.Name2num = make(map[string]int, zgensym_8df0a91a1f250219_301)
				} else if len(z.Name2num) > 0 {
					for key, _ := range z.Name2num {
						delete(z.Name2num, key)
					}
				}
				for zgensym_8df0a91a1f250219_301 > 0 {
					var zgensym_8df0a91a1f250219_290 string
					var zgensym_8df0a91a1f250219_291 int
					zgensym_8df0a91a1f250219_301--
					zgensym_8df0a91a1f250219_290, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_291, bts, err = nbs.ReadIntBytes(bts)

					if err != nil {
						return
					}
					z.Name2num[zgensym_8df0a91a1f250219_290] = zgensym_8df0a91a1f250219_291
				}
			}
		case "BootMC__ptr":
			found298zgensym_8df0a91a1f250219_299[9] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.BootMC != nil {
					z.BootMC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.BootMC {
						z.BootMC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.BootMC == nil {
						z.BootMC = new(MemberConfig)
					}

					bts, err = z.BootMC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss298zgensym_8df0a91a1f250219_299 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TubeCluster
var unmarshalMsgFieldOrder298zgensym_8df0a91a1f250219_299 = []string{"TestName__str", "Cfg__ptr", "Nodes__slc", "", "", "NoInitialLeaderTimeout__boo", "", "Name2num__map", "", "BootMC__ptr"}

var unmarshalMsgFieldSkip298zgensym_8df0a91a1f250219_299 = []bool{false, false, false, true, true, false, true, false, true, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TubeCluster) Msgsize() (s int) {
	s = 1 + 14 + msgp.StringPrefixSize + len(z.TestName) + 9
	if z.Cfg == nil {
		s += msgp.NilSize
	} else {
		s += z.Cfg.Msgsize()
	}
	s += 11 + msgp.ArrayHeaderSize
	for zgensym_8df0a91a1f250219_289 := range z.Nodes {
		if z.Nodes[zgensym_8df0a91a1f250219_289] == nil {
			s += msgp.NilSize
		} else {
			s += z.Nodes[zgensym_8df0a91a1f250219_289].Msgsize()
		}
	}
	s += 28 + msgp.BoolSize + 14 + msgp.MapHeaderSize
	if z.Name2num != nil {
		for zgensym_8df0a91a1f250219_290, zgensym_8df0a91a1f250219_291 := range z.Name2num {
			_ = zgensym_8df0a91a1f250219_291
			_ = zgensym_8df0a91a1f250219_290
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_290) + msgp.IntSize
		}
	}
	s += 12
	if z.BootMC == nil {
		s += msgp.NilSize
	} else {
		s += z.BootMC.Msgsize()
	}
	return
}
func (z *TubeCluster) Gstring() (r string) {
	r = "&TubeCluster{\n"
	r += fmt.Sprintf("              TestName: \"%v\",\n", z.TestName)
	r += fmt.Sprintf("                   Cfg: %v,\n", z.Cfg)
	r += fmt.Sprintf("                 Nodes: %v,\n", z.Nodes)
	r += fmt.Sprintf("NoInitialLeaderTimeout: %v,\n", z.NoInitialLeaderTimeout)
	r += fmt.Sprintf("              Name2num: %v,\n", z.Name2num)
	r += fmt.Sprintf("                BootMC: %v,\n", z.BootMC)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TubeConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields304zgensym_8df0a91a1f250219_305 = 21

	// -- templateDecodeMsg starts here--
	var totalEncodedFields304zgensym_8df0a91a1f250219_305 uint32
	totalEncodedFields304zgensym_8df0a91a1f250219_305, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft304zgensym_8df0a91a1f250219_305 := totalEncodedFields304zgensym_8df0a91a1f250219_305
	missingFieldsLeft304zgensym_8df0a91a1f250219_305 := maxFields304zgensym_8df0a91a1f250219_305 - totalEncodedFields304zgensym_8df0a91a1f250219_305

	var nextMiss304zgensym_8df0a91a1f250219_305 int32 = -1
	var found304zgensym_8df0a91a1f250219_305 [maxFields304zgensym_8df0a91a1f250219_305]bool
	var curField304zgensym_8df0a91a1f250219_305 string

doneWithStruct304zgensym_8df0a91a1f250219_305:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft304zgensym_8df0a91a1f250219_305 > 0 || missingFieldsLeft304zgensym_8df0a91a1f250219_305 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft304zgensym_8df0a91a1f250219_305, missingFieldsLeft304zgensym_8df0a91a1f250219_305, msgp.ShowFound(found304zgensym_8df0a91a1f250219_305[:]), decodeMsgFieldOrder304zgensym_8df0a91a1f250219_305)
		if encodedFieldsLeft304zgensym_8df0a91a1f250219_305 > 0 {
			encodedFieldsLeft304zgensym_8df0a91a1f250219_305--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField304zgensym_8df0a91a1f250219_305 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss304zgensym_8df0a91a1f250219_305 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss304zgensym_8df0a91a1f250219_305 = 0
			}
			for nextMiss304zgensym_8df0a91a1f250219_305 < maxFields304zgensym_8df0a91a1f250219_305 && (found304zgensym_8df0a91a1f250219_305[nextMiss304zgensym_8df0a91a1f250219_305] || decodeMsgFieldSkip304zgensym_8df0a91a1f250219_305[nextMiss304zgensym_8df0a91a1f250219_305]) {
				nextMiss304zgensym_8df0a91a1f250219_305++
			}
			if nextMiss304zgensym_8df0a91a1f250219_305 == maxFields304zgensym_8df0a91a1f250219_305 {
				// filled all the empty fields!
				break doneWithStruct304zgensym_8df0a91a1f250219_305
			}
			missingFieldsLeft304zgensym_8df0a91a1f250219_305--
			curField304zgensym_8df0a91a1f250219_305 = decodeMsgFieldOrder304zgensym_8df0a91a1f250219_305[nextMiss304zgensym_8df0a91a1f250219_305]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField304zgensym_8df0a91a1f250219_305)
		switch curField304zgensym_8df0a91a1f250219_305 {
		// -- templateDecodeMsg ends here --

		case "ConfigName_zid00_str":
			found304zgensym_8df0a91a1f250219_305[0] = true
			z.ConfigName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ClusterID_zid01_str":
			found304zgensym_8df0a91a1f250219_305[1] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ConfigDir_zid02_str":
			found304zgensym_8df0a91a1f250219_305[2] = true
			z.ConfigDir, err = dc.ReadString()
			if err != nil {
				return
			}
		case "DataDir_zid03_str":
			found304zgensym_8df0a91a1f250219_305[3] = true
			z.DataDir, err = dc.ReadString()
			if err != nil {
				return
			}
		case "NoFaultTolDur_zid04_dur":
			found304zgensym_8df0a91a1f250219_305[4] = true
			z.NoFaultTolDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "NoDisk_zid05_boo":
			found304zgensym_8df0a91a1f250219_305[5] = true
			z.NoDisk, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "TCPonly_no_TLS_zid06_boo":
			found304zgensym_8df0a91a1f250219_305[6] = true
			z.TCPonly_no_TLS, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "HeartbeatDur_zid07_dur":
			found304zgensym_8df0a91a1f250219_305[7] = true
			z.HeartbeatDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "MinElectionDur_zid08_dur":
			found304zgensym_8df0a91a1f250219_305[8] = true
			z.MinElectionDur, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "ClusterSize_zid09_int":
			found304zgensym_8df0a91a1f250219_305[9] = true
			z.ClusterSize, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "UseSimNet_zid10_boo":
			found304zgensym_8df0a91a1f250219_305[10] = true
			z.UseSimNet, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "SimnetGOMAXPROCS_zid11_int":
			found304zgensym_8df0a91a1f250219_305[11] = true
			z.SimnetGOMAXPROCS, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "ClockDriftBound_zid12_dur":
			found304zgensym_8df0a91a1f250219_305[12] = true
			z.ClockDriftBound, err = dc.ReadDuration()
			if err != nil {
				return
			}
		case "InitialLeaderName_zid13_str":
			found304zgensym_8df0a91a1f250219_305[13] = true
			z.InitialLeaderName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "MyName_zid14_str":
			found304zgensym_8df0a91a1f250219_305[14] = true
			z.MyName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceName_zid15_str":
			found304zgensym_8df0a91a1f250219_305[15] = true
			z.PeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Node2Addr_zid16_map":
			found304zgensym_8df0a91a1f250219_305[16] = true
			var zgensym_8df0a91a1f250219_306 uint32
			zgensym_8df0a91a1f250219_306, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Node2Addr == nil && zgensym_8df0a91a1f250219_306 > 0 {
				z.Node2Addr = make(map[string]string, zgensym_8df0a91a1f250219_306)
			} else if len(z.Node2Addr) > 0 {
				for key, _ := range z.Node2Addr {
					delete(z.Node2Addr, key)
				}
			}
			for zgensym_8df0a91a1f250219_306 > 0 {
				zgensym_8df0a91a1f250219_306--
				var zgensym_8df0a91a1f250219_302 string
				var zgensym_8df0a91a1f250219_303 string
				zgensym_8df0a91a1f250219_302, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_8df0a91a1f250219_303, err = dc.ReadString()
				if err != nil {
					return
				}
				z.Node2Addr[zgensym_8df0a91a1f250219_302] = zgensym_8df0a91a1f250219_303
			}
		case "NoBackgroundConnect_zid17_boo":
			found304zgensym_8df0a91a1f250219_305[17] = true
			z.NoBackgroundConnect, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "NoLogCompaction_zid18_boo":
			found304zgensym_8df0a91a1f250219_305[18] = true
			z.NoLogCompaction, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "SkipNoop0_zid19_boo":
			found304zgensym_8df0a91a1f250219_305[19] = true
			z.SkipNoop0, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss304zgensym_8df0a91a1f250219_305 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TubeConfig
var decodeMsgFieldOrder304zgensym_8df0a91a1f250219_305 = []string{"ConfigName_zid00_str", "ClusterID_zid01_str", "ConfigDir_zid02_str", "DataDir_zid03_str", "NoFaultTolDur_zid04_dur", "NoDisk_zid05_boo", "TCPonly_no_TLS_zid06_boo", "HeartbeatDur_zid07_dur", "MinElectionDur_zid08_dur", "ClusterSize_zid09_int", "UseSimNet_zid10_boo", "SimnetGOMAXPROCS_zid11_int", "ClockDriftBound_zid12_dur", "InitialLeaderName_zid13_str", "MyName_zid14_str", "PeerServiceName_zid15_str", "Node2Addr_zid16_map", "NoBackgroundConnect_zid17_boo", "NoLogCompaction_zid18_boo", "SkipNoop0_zid19_boo", ""}

var decodeMsgFieldSkip304zgensym_8df0a91a1f250219_305 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *TubeConfig) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 20
	}
	var fieldsInUse uint32 = 20
	isempty[0] = (len(z.ConfigName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.ConfigDir) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.DataDir) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = false
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (!z.NoDisk) // bool, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (!z.TCPonly_no_TLS) // bool, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = false
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = false
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.ClusterSize == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (!z.UseSimNet) // bool, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (z.SimnetGOMAXPROCS == 0) // number, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = false
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (len(z.InitialLeaderName) == 0) // string, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (len(z.MyName) == 0) // string, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (len(z.PeerServiceName) == 0) // string, omitempty
	if isempty[15] {
		fieldsInUse--
	}
	isempty[16] = (len(z.Node2Addr) == 0) // string, omitempty
	if isempty[16] {
		fieldsInUse--
	}
	isempty[17] = (!z.NoBackgroundConnect) // bool, omitempty
	if isempty[17] {
		fieldsInUse--
	}
	isempty[18] = (!z.NoLogCompaction) // bool, omitempty
	if isempty[18] {
		fieldsInUse--
	}
	isempty[19] = (!z.SkipNoop0) // bool, omitempty
	if isempty[19] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TubeConfig) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_307 [21]bool
	fieldsInUse_zgensym_8df0a91a1f250219_308 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_307[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_308 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TubeConfig'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_307[0] {
		// write "ConfigName_zid00_str"
		err = en.Append(0xb4, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ConfigName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[1] {
		// write "ClusterID_zid01_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[2] {
		// write "ConfigDir_zid02_str"
		err = en.Append(0xb3, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ConfigDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[3] {
		// write "DataDir_zid03_str"
		err = en.Append(0xb1, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.DataDir)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[4] {
		// write "NoFaultTolDur_zid04_dur"
		err = en.Append(0xb7, 0x4e, 0x6f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.NoFaultTolDur)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[5] {
		// write "NoDisk_zid05_boo"
		err = en.Append(0xb0, 0x4e, 0x6f, 0x44, 0x69, 0x73, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.NoDisk)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[6] {
		// write "TCPonly_no_TLS_zid06_boo"
		err = en.Append(0xb8, 0x54, 0x43, 0x50, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.TCPonly_no_TLS)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[7] {
		// write "HeartbeatDur_zid07_dur"
		err = en.Append(0xb6, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.HeartbeatDur)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[8] {
		// write "MinElectionDur_zid08_dur"
		err = en.Append(0xb8, 0x4d, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.MinElectionDur)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[9] {
		// write "ClusterSize_zid09_int"
		err = en.Append(0xb5, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.ClusterSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[10] {
		// write "UseSimNet_zid10_boo"
		err = en.Append(0xb3, 0x55, 0x73, 0x65, 0x53, 0x69, 0x6d, 0x4e, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.UseSimNet)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[11] {
		// write "SimnetGOMAXPROCS_zid11_int"
		err = en.Append(0xba, 0x53, 0x69, 0x6d, 0x6e, 0x65, 0x74, 0x47, 0x4f, 0x4d, 0x41, 0x58, 0x50, 0x52, 0x4f, 0x43, 0x53, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.SimnetGOMAXPROCS)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[12] {
		// write "ClockDriftBound_zid12_dur"
		err = en.Append(0xb9, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x64, 0x75, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteDuration(z.ClockDriftBound)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[13] {
		// write "InitialLeaderName_zid13_str"
		err = en.Append(0xbb, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.InitialLeaderName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[14] {
		// write "MyName_zid14_str"
		err = en.Append(0xb0, 0x4d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.MyName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[15] {
		// write "PeerServiceName_zid15_str"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[16] {
		// write "Node2Addr_zid16_map"
		err = en.Append(0xb3, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Node2Addr)))
		if err != nil {
			return
		}
		for zgensym_8df0a91a1f250219_302, zgensym_8df0a91a1f250219_303 := range z.Node2Addr {
			err = en.WriteString(zgensym_8df0a91a1f250219_302)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_8df0a91a1f250219_303)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[17] {
		// write "NoBackgroundConnect_zid17_boo"
		err = en.Append(0xbd, 0x4e, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.NoBackgroundConnect)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[18] {
		// write "NoLogCompaction_zid18_boo"
		err = en.Append(0xb9, 0x4e, 0x6f, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.NoLogCompaction)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_307[19] {
		// write "SkipNoop0_zid19_boo"
		err = en.Append(0xb3, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x6f, 0x70, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.SkipNoop0)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TubeConfig) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [21]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ConfigName_zid00_str"
		o = append(o, 0xb4, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ConfigName)
	}

	if !empty[1] {
		// string "ClusterID_zid01_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[2] {
		// string "ConfigDir_zid02_str"
		o = append(o, 0xb3, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ConfigDir)
	}

	if !empty[3] {
		// string "DataDir_zid03_str"
		o = append(o, 0xb1, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.DataDir)
	}

	if !empty[4] {
		// string "NoFaultTolDur_zid04_dur"
		o = append(o, 0xb7, 0x4e, 0x6f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.NoFaultTolDur)
	}

	if !empty[5] {
		// string "NoDisk_zid05_boo"
		o = append(o, 0xb0, 0x4e, 0x6f, 0x44, 0x69, 0x73, 0x6b, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.NoDisk)
	}

	if !empty[6] {
		// string "TCPonly_no_TLS_zid06_boo"
		o = append(o, 0xb8, 0x54, 0x43, 0x50, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.TCPonly_no_TLS)
	}

	if !empty[7] {
		// string "HeartbeatDur_zid07_dur"
		o = append(o, 0xb6, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.HeartbeatDur)
	}

	if !empty[8] {
		// string "MinElectionDur_zid08_dur"
		o = append(o, 0xb8, 0x4d, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.MinElectionDur)
	}

	if !empty[9] {
		// string "ClusterSize_zid09_int"
		o = append(o, 0xb5, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.ClusterSize)
	}

	if !empty[10] {
		// string "UseSimNet_zid10_boo"
		o = append(o, 0xb3, 0x55, 0x73, 0x65, 0x53, 0x69, 0x6d, 0x4e, 0x65, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.UseSimNet)
	}

	if !empty[11] {
		// string "SimnetGOMAXPROCS_zid11_int"
		o = append(o, 0xba, 0x53, 0x69, 0x6d, 0x6e, 0x65, 0x74, 0x47, 0x4f, 0x4d, 0x41, 0x58, 0x50, 0x52, 0x4f, 0x43, 0x53, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.SimnetGOMAXPROCS)
	}

	if !empty[12] {
		// string "ClockDriftBound_zid12_dur"
		o = append(o, 0xb9, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x64, 0x75, 0x72)
		o = msgp.AppendDuration(o, z.ClockDriftBound)
	}

	if !empty[13] {
		// string "InitialLeaderName_zid13_str"
		o = append(o, 0xbb, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.InitialLeaderName)
	}

	if !empty[14] {
		// string "MyName_zid14_str"
		o = append(o, 0xb0, 0x4d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.MyName)
	}

	if !empty[15] {
		// string "PeerServiceName_zid15_str"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceName)
	}

	if !empty[16] {
		// string "Node2Addr_zid16_map"
		o = append(o, 0xb3, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x41, 0x64, 0x64, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x36, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Node2Addr)))
		for zgensym_8df0a91a1f250219_302, zgensym_8df0a91a1f250219_303 := range z.Node2Addr {
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_302)
			o = msgp.AppendString(o, zgensym_8df0a91a1f250219_303)
		}
	}

	if !empty[17] {
		// string "NoBackgroundConnect_zid17_boo"
		o = append(o, 0xbd, 0x4e, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x37, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.NoBackgroundConnect)
	}

	if !empty[18] {
		// string "NoLogCompaction_zid18_boo"
		o = append(o, 0xb9, 0x4e, 0x6f, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.NoLogCompaction)
	}

	if !empty[19] {
		// string "SkipNoop0_zid19_boo"
		o = append(o, 0xb3, 0x53, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x6f, 0x70, 0x30, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.SkipNoop0)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TubeConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TubeConfig) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields309zgensym_8df0a91a1f250219_310 = 21

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields309zgensym_8df0a91a1f250219_310 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields309zgensym_8df0a91a1f250219_310, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft309zgensym_8df0a91a1f250219_310 := totalEncodedFields309zgensym_8df0a91a1f250219_310
	missingFieldsLeft309zgensym_8df0a91a1f250219_310 := maxFields309zgensym_8df0a91a1f250219_310 - totalEncodedFields309zgensym_8df0a91a1f250219_310

	var nextMiss309zgensym_8df0a91a1f250219_310 int32 = -1
	var found309zgensym_8df0a91a1f250219_310 [maxFields309zgensym_8df0a91a1f250219_310]bool
	var curField309zgensym_8df0a91a1f250219_310 string

doneWithStruct309zgensym_8df0a91a1f250219_310:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft309zgensym_8df0a91a1f250219_310 > 0 || missingFieldsLeft309zgensym_8df0a91a1f250219_310 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft309zgensym_8df0a91a1f250219_310, missingFieldsLeft309zgensym_8df0a91a1f250219_310, msgp.ShowFound(found309zgensym_8df0a91a1f250219_310[:]), unmarshalMsgFieldOrder309zgensym_8df0a91a1f250219_310)
		if encodedFieldsLeft309zgensym_8df0a91a1f250219_310 > 0 {
			encodedFieldsLeft309zgensym_8df0a91a1f250219_310--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField309zgensym_8df0a91a1f250219_310 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss309zgensym_8df0a91a1f250219_310 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss309zgensym_8df0a91a1f250219_310 = 0
			}
			for nextMiss309zgensym_8df0a91a1f250219_310 < maxFields309zgensym_8df0a91a1f250219_310 && (found309zgensym_8df0a91a1f250219_310[nextMiss309zgensym_8df0a91a1f250219_310] || unmarshalMsgFieldSkip309zgensym_8df0a91a1f250219_310[nextMiss309zgensym_8df0a91a1f250219_310]) {
				nextMiss309zgensym_8df0a91a1f250219_310++
			}
			if nextMiss309zgensym_8df0a91a1f250219_310 == maxFields309zgensym_8df0a91a1f250219_310 {
				// filled all the empty fields!
				break doneWithStruct309zgensym_8df0a91a1f250219_310
			}
			missingFieldsLeft309zgensym_8df0a91a1f250219_310--
			curField309zgensym_8df0a91a1f250219_310 = unmarshalMsgFieldOrder309zgensym_8df0a91a1f250219_310[nextMiss309zgensym_8df0a91a1f250219_310]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField309zgensym_8df0a91a1f250219_310)
		switch curField309zgensym_8df0a91a1f250219_310 {
		// -- templateUnmarshalMsg ends here --

		case "ConfigName_zid00_str":
			found309zgensym_8df0a91a1f250219_310[0] = true
			z.ConfigName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ClusterID_zid01_str":
			found309zgensym_8df0a91a1f250219_310[1] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ConfigDir_zid02_str":
			found309zgensym_8df0a91a1f250219_310[2] = true
			z.ConfigDir, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "DataDir_zid03_str":
			found309zgensym_8df0a91a1f250219_310[3] = true
			z.DataDir, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "NoFaultTolDur_zid04_dur":
			found309zgensym_8df0a91a1f250219_310[4] = true
			z.NoFaultTolDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "NoDisk_zid05_boo":
			found309zgensym_8df0a91a1f250219_310[5] = true
			z.NoDisk, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "TCPonly_no_TLS_zid06_boo":
			found309zgensym_8df0a91a1f250219_310[6] = true
			z.TCPonly_no_TLS, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "HeartbeatDur_zid07_dur":
			found309zgensym_8df0a91a1f250219_310[7] = true
			z.HeartbeatDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "MinElectionDur_zid08_dur":
			found309zgensym_8df0a91a1f250219_310[8] = true
			z.MinElectionDur, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "ClusterSize_zid09_int":
			found309zgensym_8df0a91a1f250219_310[9] = true
			z.ClusterSize, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "UseSimNet_zid10_boo":
			found309zgensym_8df0a91a1f250219_310[10] = true
			z.UseSimNet, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "SimnetGOMAXPROCS_zid11_int":
			found309zgensym_8df0a91a1f250219_310[11] = true
			z.SimnetGOMAXPROCS, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "ClockDriftBound_zid12_dur":
			found309zgensym_8df0a91a1f250219_310[12] = true
			z.ClockDriftBound, bts, err = nbs.ReadDurationBytes(bts)

			if err != nil {
				return
			}
		case "InitialLeaderName_zid13_str":
			found309zgensym_8df0a91a1f250219_310[13] = true
			z.InitialLeaderName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "MyName_zid14_str":
			found309zgensym_8df0a91a1f250219_310[14] = true
			z.MyName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceName_zid15_str":
			found309zgensym_8df0a91a1f250219_310[15] = true
			z.PeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Node2Addr_zid16_map":
			found309zgensym_8df0a91a1f250219_310[16] = true
			if nbs.AlwaysNil {
				if len(z.Node2Addr) > 0 {
					for key, _ := range z.Node2Addr {
						delete(z.Node2Addr, key)
					}
				}

			} else {

				var zgensym_8df0a91a1f250219_311 uint32
				zgensym_8df0a91a1f250219_311, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Node2Addr == nil && zgensym_8df0a91a1f250219_311 > 0 {
					z.Node2Addr = make(map[string]string, zgensym_8df0a91a1f250219_311)
				} else if len(z.Node2Addr) > 0 {
					for key, _ := range z.Node2Addr {
						delete(z.Node2Addr, key)
					}
				}
				for zgensym_8df0a91a1f250219_311 > 0 {
					var zgensym_8df0a91a1f250219_302 string
					var zgensym_8df0a91a1f250219_303 string
					zgensym_8df0a91a1f250219_311--
					zgensym_8df0a91a1f250219_302, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_8df0a91a1f250219_303, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.Node2Addr[zgensym_8df0a91a1f250219_302] = zgensym_8df0a91a1f250219_303
				}
			}
		case "NoBackgroundConnect_zid17_boo":
			found309zgensym_8df0a91a1f250219_310[17] = true
			z.NoBackgroundConnect, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "NoLogCompaction_zid18_boo":
			found309zgensym_8df0a91a1f250219_310[18] = true
			z.NoLogCompaction, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "SkipNoop0_zid19_boo":
			found309zgensym_8df0a91a1f250219_310[19] = true
			z.SkipNoop0, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss309zgensym_8df0a91a1f250219_310 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TubeConfig
var unmarshalMsgFieldOrder309zgensym_8df0a91a1f250219_310 = []string{"ConfigName_zid00_str", "ClusterID_zid01_str", "ConfigDir_zid02_str", "DataDir_zid03_str", "NoFaultTolDur_zid04_dur", "NoDisk_zid05_boo", "TCPonly_no_TLS_zid06_boo", "HeartbeatDur_zid07_dur", "MinElectionDur_zid08_dur", "ClusterSize_zid09_int", "UseSimNet_zid10_boo", "SimnetGOMAXPROCS_zid11_int", "ClockDriftBound_zid12_dur", "InitialLeaderName_zid13_str", "MyName_zid14_str", "PeerServiceName_zid15_str", "Node2Addr_zid16_map", "NoBackgroundConnect_zid17_boo", "NoLogCompaction_zid18_boo", "SkipNoop0_zid19_boo", ""}

var unmarshalMsgFieldSkip309zgensym_8df0a91a1f250219_310 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TubeConfig) Msgsize() (s int) {
	s = 3 + 21 + msgp.StringPrefixSize + len(z.ConfigName) + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 20 + msgp.StringPrefixSize + len(z.ConfigDir) + 18 + msgp.StringPrefixSize + len(z.DataDir) + 24 + msgp.DurationSize + 17 + msgp.BoolSize + 25 + msgp.BoolSize + 23 + msgp.DurationSize + 25 + msgp.DurationSize + 22 + msgp.IntSize + 20 + msgp.BoolSize + 27 + msgp.IntSize + 26 + msgp.DurationSize + 28 + msgp.StringPrefixSize + len(z.InitialLeaderName) + 17 + msgp.StringPrefixSize + len(z.MyName) + 26 + msgp.StringPrefixSize + len(z.PeerServiceName) + 20 + msgp.MapHeaderSize
	if z.Node2Addr != nil {
		for zgensym_8df0a91a1f250219_302, zgensym_8df0a91a1f250219_303 := range z.Node2Addr {
			_ = zgensym_8df0a91a1f250219_303
			_ = zgensym_8df0a91a1f250219_302
			s += msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_302) + msgp.StringPrefixSize + len(zgensym_8df0a91a1f250219_303)
		}
	}
	s += 30 + msgp.BoolSize + 26 + msgp.BoolSize + 20 + msgp.BoolSize
	return
}
func (z *TubeConfig) Gstring() (r string) {
	r = "&TubeConfig{\n"
	r += fmt.Sprintf("         ConfigName: \"%v\",\n", z.ConfigName)
	r += fmt.Sprintf("          ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("          ConfigDir: \"%v\",\n", z.ConfigDir)
	r += fmt.Sprintf("            DataDir: \"%v\",\n", z.DataDir)
	r += fmt.Sprintf("      NoFaultTolDur: %v,\n", z.NoFaultTolDur)
	r += fmt.Sprintf("             NoDisk: %v,\n", z.NoDisk)
	r += fmt.Sprintf("     TCPonly_no_TLS: %v,\n", z.TCPonly_no_TLS)
	r += fmt.Sprintf("       HeartbeatDur: %v,\n", z.HeartbeatDur)
	r += fmt.Sprintf("     MinElectionDur: %v,\n", z.MinElectionDur)
	r += fmt.Sprintf("        ClusterSize: %v,\n", z.ClusterSize)
	r += fmt.Sprintf("          UseSimNet: %v,\n", z.UseSimNet)
	r += fmt.Sprintf("   SimnetGOMAXPROCS: %v,\n", z.SimnetGOMAXPROCS)
	r += fmt.Sprintf("    ClockDriftBound: %v,\n", z.ClockDriftBound)
	r += fmt.Sprintf("  InitialLeaderName: \"%v\",\n", z.InitialLeaderName)
	r += fmt.Sprintf("             MyName: \"%v\",\n", z.MyName)
	r += fmt.Sprintf("    PeerServiceName: \"%v\",\n", z.PeerServiceName)
	r += fmt.Sprintf("          Node2Addr: %v,\n", z.Node2Addr)
	r += fmt.Sprintf("NoBackgroundConnect: %v,\n", z.NoBackgroundConnect)
	r += fmt.Sprintf("    NoLogCompaction: %v,\n", z.NoLogCompaction)
	r += fmt.Sprintf("          SkipNoop0: %v,\n", z.SkipNoop0)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TubeNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields312zgensym_8df0a91a1f250219_313 = 12

	// -- templateDecodeMsg starts here--
	var totalEncodedFields312zgensym_8df0a91a1f250219_313 uint32
	totalEncodedFields312zgensym_8df0a91a1f250219_313, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft312zgensym_8df0a91a1f250219_313 := totalEncodedFields312zgensym_8df0a91a1f250219_313
	missingFieldsLeft312zgensym_8df0a91a1f250219_313 := maxFields312zgensym_8df0a91a1f250219_313 - totalEncodedFields312zgensym_8df0a91a1f250219_313

	var nextMiss312zgensym_8df0a91a1f250219_313 int32 = -1
	var found312zgensym_8df0a91a1f250219_313 [maxFields312zgensym_8df0a91a1f250219_313]bool
	var curField312zgensym_8df0a91a1f250219_313 string

doneWithStruct312zgensym_8df0a91a1f250219_313:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft312zgensym_8df0a91a1f250219_313 > 0 || missingFieldsLeft312zgensym_8df0a91a1f250219_313 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft312zgensym_8df0a91a1f250219_313, missingFieldsLeft312zgensym_8df0a91a1f250219_313, msgp.ShowFound(found312zgensym_8df0a91a1f250219_313[:]), decodeMsgFieldOrder312zgensym_8df0a91a1f250219_313)
		if encodedFieldsLeft312zgensym_8df0a91a1f250219_313 > 0 {
			encodedFieldsLeft312zgensym_8df0a91a1f250219_313--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField312zgensym_8df0a91a1f250219_313 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss312zgensym_8df0a91a1f250219_313 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss312zgensym_8df0a91a1f250219_313 = 0
			}
			for nextMiss312zgensym_8df0a91a1f250219_313 < maxFields312zgensym_8df0a91a1f250219_313 && (found312zgensym_8df0a91a1f250219_313[nextMiss312zgensym_8df0a91a1f250219_313] || decodeMsgFieldSkip312zgensym_8df0a91a1f250219_313[nextMiss312zgensym_8df0a91a1f250219_313]) {
				nextMiss312zgensym_8df0a91a1f250219_313++
			}
			if nextMiss312zgensym_8df0a91a1f250219_313 == maxFields312zgensym_8df0a91a1f250219_313 {
				// filled all the empty fields!
				break doneWithStruct312zgensym_8df0a91a1f250219_313
			}
			missingFieldsLeft312zgensym_8df0a91a1f250219_313--
			curField312zgensym_8df0a91a1f250219_313 = decodeMsgFieldOrder312zgensym_8df0a91a1f250219_313[nextMiss312zgensym_8df0a91a1f250219_313]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField312zgensym_8df0a91a1f250219_313)
		switch curField312zgensym_8df0a91a1f250219_313 {
		// -- templateDecodeMsg ends here --

		case "ClusterID_zid00_str":
			found312zgensym_8df0a91a1f250219_313[0] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "URL_zid01_str":
			found312zgensym_8df0a91a1f250219_313[1] = true
			z.URL, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerID_zid02_str":
			found312zgensym_8df0a91a1f250219_313[2] = true
			z.PeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceName_zid03_str":
			found312zgensym_8df0a91a1f250219_313[3] = true
			z.PeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid04_str":
			found312zgensym_8df0a91a1f250219_313[4] = true
			z.PeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss312zgensym_8df0a91a1f250219_313 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TubeNode
var decodeMsgFieldOrder312zgensym_8df0a91a1f250219_313 = []string{"ClusterID_zid00_str", "URL_zid01_str", "PeerID_zid02_str", "PeerServiceName_zid03_str", "PeerServiceNameVersion_zid04_str", "", "", "", "", "", "", ""}

var decodeMsgFieldSkip312zgensym_8df0a91a1f250219_313 = []bool{false, false, false, false, false, true, true, true, true, true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *TubeNode) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.URL) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.PeerID) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.PeerServiceName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.PeerServiceNameVersion) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TubeNode) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_314 [12]bool
	fieldsInUse_zgensym_8df0a91a1f250219_315 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_314[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_315 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TubeNode'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_314[0] {
		// write "ClusterID_zid00_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_314[1] {
		// write "URL_zid01_str"
		err = en.Append(0xad, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.URL)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_314[2] {
		// write "PeerID_zid02_str"
		err = en.Append(0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_314[3] {
		// write "PeerServiceName_zid03_str"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_314[4] {
		// write "PeerServiceNameVersion_zid04_str"
		err = en.Append(0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.PeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TubeNode) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [12]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ClusterID_zid00_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[1] {
		// string "URL_zid01_str"
		o = append(o, 0xad, 0x55, 0x52, 0x4c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.URL)
	}

	if !empty[2] {
		// string "PeerID_zid02_str"
		o = append(o, 0xb0, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerID)
	}

	if !empty[3] {
		// string "PeerServiceName_zid03_str"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceName)
	}

	if !empty[4] {
		// string "PeerServiceNameVersion_zid04_str"
		o = append(o, 0xd9, 0x20, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.PeerServiceNameVersion)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TubeNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TubeNode) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields316zgensym_8df0a91a1f250219_317 = 12

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields316zgensym_8df0a91a1f250219_317 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields316zgensym_8df0a91a1f250219_317, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft316zgensym_8df0a91a1f250219_317 := totalEncodedFields316zgensym_8df0a91a1f250219_317
	missingFieldsLeft316zgensym_8df0a91a1f250219_317 := maxFields316zgensym_8df0a91a1f250219_317 - totalEncodedFields316zgensym_8df0a91a1f250219_317

	var nextMiss316zgensym_8df0a91a1f250219_317 int32 = -1
	var found316zgensym_8df0a91a1f250219_317 [maxFields316zgensym_8df0a91a1f250219_317]bool
	var curField316zgensym_8df0a91a1f250219_317 string

doneWithStruct316zgensym_8df0a91a1f250219_317:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft316zgensym_8df0a91a1f250219_317 > 0 || missingFieldsLeft316zgensym_8df0a91a1f250219_317 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft316zgensym_8df0a91a1f250219_317, missingFieldsLeft316zgensym_8df0a91a1f250219_317, msgp.ShowFound(found316zgensym_8df0a91a1f250219_317[:]), unmarshalMsgFieldOrder316zgensym_8df0a91a1f250219_317)
		if encodedFieldsLeft316zgensym_8df0a91a1f250219_317 > 0 {
			encodedFieldsLeft316zgensym_8df0a91a1f250219_317--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField316zgensym_8df0a91a1f250219_317 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss316zgensym_8df0a91a1f250219_317 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss316zgensym_8df0a91a1f250219_317 = 0
			}
			for nextMiss316zgensym_8df0a91a1f250219_317 < maxFields316zgensym_8df0a91a1f250219_317 && (found316zgensym_8df0a91a1f250219_317[nextMiss316zgensym_8df0a91a1f250219_317] || unmarshalMsgFieldSkip316zgensym_8df0a91a1f250219_317[nextMiss316zgensym_8df0a91a1f250219_317]) {
				nextMiss316zgensym_8df0a91a1f250219_317++
			}
			if nextMiss316zgensym_8df0a91a1f250219_317 == maxFields316zgensym_8df0a91a1f250219_317 {
				// filled all the empty fields!
				break doneWithStruct316zgensym_8df0a91a1f250219_317
			}
			missingFieldsLeft316zgensym_8df0a91a1f250219_317--
			curField316zgensym_8df0a91a1f250219_317 = unmarshalMsgFieldOrder316zgensym_8df0a91a1f250219_317[nextMiss316zgensym_8df0a91a1f250219_317]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField316zgensym_8df0a91a1f250219_317)
		switch curField316zgensym_8df0a91a1f250219_317 {
		// -- templateUnmarshalMsg ends here --

		case "ClusterID_zid00_str":
			found316zgensym_8df0a91a1f250219_317[0] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "URL_zid01_str":
			found316zgensym_8df0a91a1f250219_317[1] = true
			z.URL, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerID_zid02_str":
			found316zgensym_8df0a91a1f250219_317[2] = true
			z.PeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceName_zid03_str":
			found316zgensym_8df0a91a1f250219_317[3] = true
			z.PeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PeerServiceNameVersion_zid04_str":
			found316zgensym_8df0a91a1f250219_317[4] = true
			z.PeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss316zgensym_8df0a91a1f250219_317 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TubeNode
var unmarshalMsgFieldOrder316zgensym_8df0a91a1f250219_317 = []string{"ClusterID_zid00_str", "URL_zid01_str", "PeerID_zid02_str", "PeerServiceName_zid03_str", "PeerServiceNameVersion_zid04_str", "", "", "", "", "", "", ""}

var unmarshalMsgFieldSkip316zgensym_8df0a91a1f250219_317 = []bool{false, false, false, false, false, true, true, true, true, true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TubeNode) Msgsize() (s int) {
	s = 1 + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 14 + msgp.StringPrefixSize + len(z.URL) + 17 + msgp.StringPrefixSize + len(z.PeerID) + 26 + msgp.StringPrefixSize + len(z.PeerServiceName) + 34 + msgp.StringPrefixSize + len(z.PeerServiceNameVersion)
	return
}
func (z *TubeNode) Gstring() (r string) {
	r = "&TubeNode{\n"
	r += fmt.Sprintf("             ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("                   URL: \"%v\",\n", z.URL)
	r += fmt.Sprintf("                PeerID: \"%v\",\n", z.PeerID)
	r += fmt.Sprintf("       PeerServiceName: \"%v\",\n", z.PeerServiceName)
	r += fmt.Sprintf("PeerServiceNameVersion: \"%v\",\n", z.PeerServiceNameVersion)
	r += "}\n"
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Val) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_8df0a91a1f250219_318 []byte
		zgensym_8df0a91a1f250219_318, err = dc.ReadBytes([]byte((*z)))
		(*z) = Val(zgensym_8df0a91a1f250219_318)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z Val) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Val) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Val) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Val) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_8df0a91a1f250219_319 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_8df0a91a1f250219_319 = zgensym_8df0a91a1f250219_319[:0]
		} else {
			zgensym_8df0a91a1f250219_319, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = Val(zgensym_8df0a91a1f250219_319)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Val) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Vote) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields320zgensym_8df0a91a1f250219_321 = 15

	// -- templateDecodeMsg starts here--
	var totalEncodedFields320zgensym_8df0a91a1f250219_321 uint32
	totalEncodedFields320zgensym_8df0a91a1f250219_321, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft320zgensym_8df0a91a1f250219_321 := totalEncodedFields320zgensym_8df0a91a1f250219_321
	missingFieldsLeft320zgensym_8df0a91a1f250219_321 := maxFields320zgensym_8df0a91a1f250219_321 - totalEncodedFields320zgensym_8df0a91a1f250219_321

	var nextMiss320zgensym_8df0a91a1f250219_321 int32 = -1
	var found320zgensym_8df0a91a1f250219_321 [maxFields320zgensym_8df0a91a1f250219_321]bool
	var curField320zgensym_8df0a91a1f250219_321 string

doneWithStruct320zgensym_8df0a91a1f250219_321:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft320zgensym_8df0a91a1f250219_321 > 0 || missingFieldsLeft320zgensym_8df0a91a1f250219_321 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft320zgensym_8df0a91a1f250219_321, missingFieldsLeft320zgensym_8df0a91a1f250219_321, msgp.ShowFound(found320zgensym_8df0a91a1f250219_321[:]), decodeMsgFieldOrder320zgensym_8df0a91a1f250219_321)
		if encodedFieldsLeft320zgensym_8df0a91a1f250219_321 > 0 {
			encodedFieldsLeft320zgensym_8df0a91a1f250219_321--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField320zgensym_8df0a91a1f250219_321 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss320zgensym_8df0a91a1f250219_321 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss320zgensym_8df0a91a1f250219_321 = 0
			}
			for nextMiss320zgensym_8df0a91a1f250219_321 < maxFields320zgensym_8df0a91a1f250219_321 && (found320zgensym_8df0a91a1f250219_321[nextMiss320zgensym_8df0a91a1f250219_321] || decodeMsgFieldSkip320zgensym_8df0a91a1f250219_321[nextMiss320zgensym_8df0a91a1f250219_321]) {
				nextMiss320zgensym_8df0a91a1f250219_321++
			}
			if nextMiss320zgensym_8df0a91a1f250219_321 == maxFields320zgensym_8df0a91a1f250219_321 {
				// filled all the empty fields!
				break doneWithStruct320zgensym_8df0a91a1f250219_321
			}
			missingFieldsLeft320zgensym_8df0a91a1f250219_321--
			curField320zgensym_8df0a91a1f250219_321 = decodeMsgFieldOrder320zgensym_8df0a91a1f250219_321[nextMiss320zgensym_8df0a91a1f250219_321]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField320zgensym_8df0a91a1f250219_321)
		switch curField320zgensym_8df0a91a1f250219_321 {
		// -- templateDecodeMsg ends here --

		case "ClusterID_zid00_str":
			found320zgensym_8df0a91a1f250219_321[0] = true
			z.ClusterID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found320zgensym_8df0a91a1f250219_321[1] = true
			z.FromPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found320zgensym_8df0a91a1f250219_321[2] = true
			z.FromPeerName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found320zgensym_8df0a91a1f250219_321[3] = true
			z.FromPeerServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found320zgensym_8df0a91a1f250219_321[4] = true
			z.FromPeerServiceNameVersion, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FromPeerCurrentTerm_zid05_i64":
			found320zgensym_8df0a91a1f250219_321[5] = true
			z.FromPeerCurrentTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FromPeerCurrentLLI_zid06_i64":
			found320zgensym_8df0a91a1f250219_321[6] = true
			z.FromPeerCurrentLLI, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "FromPeerCurrentLLT_zid07_i64":
			found320zgensym_8df0a91a1f250219_321[7] = true
			z.FromPeerCurrentLLT, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CandidateID_zid08_str":
			found320zgensym_8df0a91a1f250219_321[8] = true
			z.CandidateID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CandidatesTerm_zid09_i64":
			found320zgensym_8df0a91a1f250219_321[9] = true
			z.CandidatesTerm, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "VoteGranted_zid10_boo":
			found320zgensym_8df0a91a1f250219_321[10] = true
			z.VoteGranted, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "IsPreVote_zid11_boo":
			found320zgensym_8df0a91a1f250219_321[11] = true
			z.IsPreVote, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "PeerLogTermsRLE_zid12_ptr":
			found320zgensym_8df0a91a1f250219_321[12] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.PeerLogTermsRLE != nil {
					dc.PushAlwaysNil()
					err = z.PeerLogTermsRLE.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.PeerLogTermsRLE == nil {
					z.PeerLogTermsRLE = new(TermsRLE)
				}
				dc.DedupIndexEachPtr(z.PeerLogTermsRLE)

				err = z.PeerLogTermsRLE.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Reason_zid13_str":
			found320zgensym_8df0a91a1f250219_321[13] = true
			z.Reason, err = dc.ReadString()
			if err != nil {
				return
			}
		case "MC_zid14_ptr":
			found320zgensym_8df0a91a1f250219_321[14] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.MC != nil {
					dc.PushAlwaysNil()
					err = z.MC.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.MC == nil {
					z.MC = new(MemberConfig)
				}
				dc.DedupIndexEachPtr(z.MC)

				err = z.MC.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss320zgensym_8df0a91a1f250219_321 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Vote
var decodeMsgFieldOrder320zgensym_8df0a91a1f250219_321 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "FromPeerCurrentTerm_zid05_i64", "FromPeerCurrentLLI_zid06_i64", "FromPeerCurrentLLT_zid07_i64", "CandidateID_zid08_str", "CandidatesTerm_zid09_i64", "VoteGranted_zid10_boo", "IsPreVote_zid11_boo", "PeerLogTermsRLE_zid12_ptr", "Reason_zid13_str", "MC_zid14_ptr"}

var decodeMsgFieldSkip320zgensym_8df0a91a1f250219_321 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Vote) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 15
	}
	var fieldsInUse uint32 = 15
	isempty[0] = (len(z.ClusterID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FromPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.FromPeerName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FromPeerServiceName) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.FromPeerServiceNameVersion) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.FromPeerCurrentTerm == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FromPeerCurrentLLI == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.FromPeerCurrentLLT == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.CandidateID) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.CandidatesTerm == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (!z.VoteGranted) // bool, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (!z.IsPreVote) // bool, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (z.PeerLogTermsRLE == nil) // pointer, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (len(z.Reason) == 0) // string, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (z.MC == nil) // pointer, omitempty
	if isempty[14] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Vote) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_8df0a91a1f250219_322 [15]bool
	fieldsInUse_zgensym_8df0a91a1f250219_323 := z.fieldsNotEmpty(empty_zgensym_8df0a91a1f250219_322[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_8df0a91a1f250219_323 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Vote'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x56, 0x6f, 0x74, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_8df0a91a1f250219_322[0] {
		// write "ClusterID_zid00_str"
		err = en.Append(0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ClusterID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[1] {
		// write "FromPeerID_zid01_str"
		err = en.Append(0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[2] {
		// write "FromPeerName_zid02_str"
		err = en.Append(0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[3] {
		// write "FromPeerServiceName_zid03_str"
		err = en.Append(0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[4] {
		// write "FromPeerServiceNameVersion_zid04_str"
		err = en.Append(0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerServiceNameVersion)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[5] {
		// write "FromPeerCurrentTerm_zid05_i64"
		err = en.Append(0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FromPeerCurrentTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[6] {
		// write "FromPeerCurrentLLI_zid06_i64"
		err = en.Append(0xbc, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x4c, 0x49, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FromPeerCurrentLLI)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[7] {
		// write "FromPeerCurrentLLT_zid07_i64"
		err = en.Append(0xbc, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x4c, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FromPeerCurrentLLT)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[8] {
		// write "CandidateID_zid08_str"
		err = en.Append(0xb5, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CandidateID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[9] {
		// write "CandidatesTerm_zid09_i64"
		err = en.Append(0xb8, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.CandidatesTerm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[10] {
		// write "VoteGranted_zid10_boo"
		err = en.Append(0xb5, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.VoteGranted)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[11] {
		// write "IsPreVote_zid11_boo"
		err = en.Append(0xb3, 0x49, 0x73, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsPreVote)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[12] {
		// write "PeerLogTermsRLE_zid12_ptr"
		err = en.Append(0xb9, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.PeerLogTermsRLE == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.PeerLogTermsRLE.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[13] {
		// write "Reason_zid13_str"
		err = en.Append(0xb0, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Reason)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_8df0a91a1f250219_322[14] {
		// write "MC_zid14_ptr"
		err = en.Append(0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.MC == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MC.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Vote) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [15]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "ClusterID_zid00_str"
		o = append(o, 0xb3, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ClusterID)
	}

	if !empty[1] {
		// string "FromPeerID_zid01_str"
		o = append(o, 0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerID)
	}

	if !empty[2] {
		// string "FromPeerName_zid02_str"
		o = append(o, 0xb6, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerName)
	}

	if !empty[3] {
		// string "FromPeerServiceName_zid03_str"
		o = append(o, 0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceName)
	}

	if !empty[4] {
		// string "FromPeerServiceNameVersion_zid04_str"
		o = append(o, 0xd9, 0x24, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerServiceNameVersion)
	}

	if !empty[5] {
		// string "FromPeerCurrentTerm_zid05_i64"
		o = append(o, 0xbd, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FromPeerCurrentTerm)
	}

	if !empty[6] {
		// string "FromPeerCurrentLLI_zid06_i64"
		o = append(o, 0xbc, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x4c, 0x49, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FromPeerCurrentLLI)
	}

	if !empty[7] {
		// string "FromPeerCurrentLLT_zid07_i64"
		o = append(o, 0xbc, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x4c, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FromPeerCurrentLLT)
	}

	if !empty[8] {
		// string "CandidateID_zid08_str"
		o = append(o, 0xb5, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CandidateID)
	}

	if !empty[9] {
		// string "CandidatesTerm_zid09_i64"
		o = append(o, 0xb8, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.CandidatesTerm)
	}

	if !empty[10] {
		// string "VoteGranted_zid10_boo"
		o = append(o, 0xb5, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.VoteGranted)
	}

	if !empty[11] {
		// string "IsPreVote_zid11_boo"
		o = append(o, 0xb3, 0x49, 0x73, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsPreVote)
	}

	if !empty[12] {
		// string "PeerLogTermsRLE_zid12_ptr"
		o = append(o, 0xb9, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x4c, 0x45, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.PeerLogTermsRLE == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.PeerLogTermsRLE.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	if !empty[13] {
		// string "Reason_zid13_str"
		o = append(o, 0xb0, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Reason)
	}

	if !empty[14] {
		// string "MC_zid14_ptr"
		o = append(o, 0xac, 0x4d, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x34, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.MC == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.MC.MarshalMsg(o) // not is.iface
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Vote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Vote) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields324zgensym_8df0a91a1f250219_325 = 15

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields324zgensym_8df0a91a1f250219_325 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields324zgensym_8df0a91a1f250219_325, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft324zgensym_8df0a91a1f250219_325 := totalEncodedFields324zgensym_8df0a91a1f250219_325
	missingFieldsLeft324zgensym_8df0a91a1f250219_325 := maxFields324zgensym_8df0a91a1f250219_325 - totalEncodedFields324zgensym_8df0a91a1f250219_325

	var nextMiss324zgensym_8df0a91a1f250219_325 int32 = -1
	var found324zgensym_8df0a91a1f250219_325 [maxFields324zgensym_8df0a91a1f250219_325]bool
	var curField324zgensym_8df0a91a1f250219_325 string

doneWithStruct324zgensym_8df0a91a1f250219_325:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft324zgensym_8df0a91a1f250219_325 > 0 || missingFieldsLeft324zgensym_8df0a91a1f250219_325 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft324zgensym_8df0a91a1f250219_325, missingFieldsLeft324zgensym_8df0a91a1f250219_325, msgp.ShowFound(found324zgensym_8df0a91a1f250219_325[:]), unmarshalMsgFieldOrder324zgensym_8df0a91a1f250219_325)
		if encodedFieldsLeft324zgensym_8df0a91a1f250219_325 > 0 {
			encodedFieldsLeft324zgensym_8df0a91a1f250219_325--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField324zgensym_8df0a91a1f250219_325 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss324zgensym_8df0a91a1f250219_325 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss324zgensym_8df0a91a1f250219_325 = 0
			}
			for nextMiss324zgensym_8df0a91a1f250219_325 < maxFields324zgensym_8df0a91a1f250219_325 && (found324zgensym_8df0a91a1f250219_325[nextMiss324zgensym_8df0a91a1f250219_325] || unmarshalMsgFieldSkip324zgensym_8df0a91a1f250219_325[nextMiss324zgensym_8df0a91a1f250219_325]) {
				nextMiss324zgensym_8df0a91a1f250219_325++
			}
			if nextMiss324zgensym_8df0a91a1f250219_325 == maxFields324zgensym_8df0a91a1f250219_325 {
				// filled all the empty fields!
				break doneWithStruct324zgensym_8df0a91a1f250219_325
			}
			missingFieldsLeft324zgensym_8df0a91a1f250219_325--
			curField324zgensym_8df0a91a1f250219_325 = unmarshalMsgFieldOrder324zgensym_8df0a91a1f250219_325[nextMiss324zgensym_8df0a91a1f250219_325]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField324zgensym_8df0a91a1f250219_325)
		switch curField324zgensym_8df0a91a1f250219_325 {
		// -- templateUnmarshalMsg ends here --

		case "ClusterID_zid00_str":
			found324zgensym_8df0a91a1f250219_325[0] = true
			z.ClusterID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerID_zid01_str":
			found324zgensym_8df0a91a1f250219_325[1] = true
			z.FromPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerName_zid02_str":
			found324zgensym_8df0a91a1f250219_325[2] = true
			z.FromPeerName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceName_zid03_str":
			found324zgensym_8df0a91a1f250219_325[3] = true
			z.FromPeerServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerServiceNameVersion_zid04_str":
			found324zgensym_8df0a91a1f250219_325[4] = true
			z.FromPeerServiceNameVersion, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FromPeerCurrentTerm_zid05_i64":
			found324zgensym_8df0a91a1f250219_325[5] = true
			z.FromPeerCurrentTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FromPeerCurrentLLI_zid06_i64":
			found324zgensym_8df0a91a1f250219_325[6] = true
			z.FromPeerCurrentLLI, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "FromPeerCurrentLLT_zid07_i64":
			found324zgensym_8df0a91a1f250219_325[7] = true
			z.FromPeerCurrentLLT, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CandidateID_zid08_str":
			found324zgensym_8df0a91a1f250219_325[8] = true
			z.CandidateID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CandidatesTerm_zid09_i64":
			found324zgensym_8df0a91a1f250219_325[9] = true
			z.CandidatesTerm, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "VoteGranted_zid10_boo":
			found324zgensym_8df0a91a1f250219_325[10] = true
			z.VoteGranted, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "IsPreVote_zid11_boo":
			found324zgensym_8df0a91a1f250219_325[11] = true
			z.IsPreVote, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "PeerLogTermsRLE_zid12_ptr":
			found324zgensym_8df0a91a1f250219_325[12] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.PeerLogTermsRLE != nil {
					z.PeerLogTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.PeerLogTermsRLE {
						z.PeerLogTermsRLE.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.PeerLogTermsRLE == nil {
						z.PeerLogTermsRLE = new(TermsRLE)
					}

					bts, err = z.PeerLogTermsRLE.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Reason_zid13_str":
			found324zgensym_8df0a91a1f250219_325[13] = true
			z.Reason, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "MC_zid14_ptr":
			found324zgensym_8df0a91a1f250219_325[14] = true
			// unmarshalGen.gPtr(): we have a BaseElem.

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.MC != nil {
					z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MC {
						z.MC.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MC == nil {
						z.MC = new(MemberConfig)
					}

					bts, err = z.MC.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss324zgensym_8df0a91a1f250219_325 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Vote
var unmarshalMsgFieldOrder324zgensym_8df0a91a1f250219_325 = []string{"ClusterID_zid00_str", "FromPeerID_zid01_str", "FromPeerName_zid02_str", "FromPeerServiceName_zid03_str", "FromPeerServiceNameVersion_zid04_str", "FromPeerCurrentTerm_zid05_i64", "FromPeerCurrentLLI_zid06_i64", "FromPeerCurrentLLT_zid07_i64", "CandidateID_zid08_str", "CandidatesTerm_zid09_i64", "VoteGranted_zid10_boo", "IsPreVote_zid11_boo", "PeerLogTermsRLE_zid12_ptr", "Reason_zid13_str", "MC_zid14_ptr"}

var unmarshalMsgFieldSkip324zgensym_8df0a91a1f250219_325 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Vote) Msgsize() (s int) {
	s = 1 + 20 + msgp.StringPrefixSize + len(z.ClusterID) + 21 + msgp.StringPrefixSize + len(z.FromPeerID) + 23 + msgp.StringPrefixSize + len(z.FromPeerName) + 30 + msgp.StringPrefixSize + len(z.FromPeerServiceName) + 38 + msgp.StringPrefixSize + len(z.FromPeerServiceNameVersion) + 30 + msgp.Int64Size + 29 + msgp.Int64Size + 29 + msgp.Int64Size + 22 + msgp.StringPrefixSize + len(z.CandidateID) + 25 + msgp.Int64Size + 22 + msgp.BoolSize + 20 + msgp.BoolSize + 26
	if z.PeerLogTermsRLE == nil {
		s += msgp.NilSize
	} else {
		s += z.PeerLogTermsRLE.Msgsize()
	}
	s += 17 + msgp.StringPrefixSize + len(z.Reason) + 13
	if z.MC == nil {
		s += msgp.NilSize
	} else {
		s += z.MC.Msgsize()
	}
	return
}
func (z *Vote) Gstring() (r string) {
	r = "&Vote{\n"
	r += fmt.Sprintf("                 ClusterID: \"%v\",\n", z.ClusterID)
	r += fmt.Sprintf("                FromPeerID: \"%v\",\n", z.FromPeerID)
	r += fmt.Sprintf("              FromPeerName: \"%v\",\n", z.FromPeerName)
	r += fmt.Sprintf("       FromPeerServiceName: \"%v\",\n", z.FromPeerServiceName)
	r += fmt.Sprintf("FromPeerServiceNameVersion: \"%v\",\n", z.FromPeerServiceNameVersion)
	r += fmt.Sprintf("       FromPeerCurrentTerm: %v,\n", z.FromPeerCurrentTerm)
	r += fmt.Sprintf("        FromPeerCurrentLLI: %v,\n", z.FromPeerCurrentLLI)
	r += fmt.Sprintf("        FromPeerCurrentLLT: %v,\n", z.FromPeerCurrentLLT)
	r += fmt.Sprintf("               CandidateID: \"%v\",\n", z.CandidateID)
	r += fmt.Sprintf("            CandidatesTerm: %v,\n", z.CandidatesTerm)
	r += fmt.Sprintf("               VoteGranted: %v,\n", z.VoteGranted)
	r += fmt.Sprintf("                 IsPreVote: %v,\n", z.IsPreVote)
	r += fmt.Sprintf("           PeerLogTermsRLE: %v,\n", z.PeerLogTermsRLE)
	r += fmt.Sprintf("                    Reason: \"%v\",\n", z.Reason)
	r += fmt.Sprintf("                        MC: %v,\n", z.MC)
	r += "}\n"
	return
}
