// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *CallType) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_28874796354aa7f3_0 int
		zgensym_28874796354aa7f3_0, err = dc.ReadInt()
		(*z) = CallType(zgensym_28874796354aa7f3_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z CallType) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CallType) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CallType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *CallType) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_28874796354aa7f3_1 int
		zgensym_28874796354aa7f3_1, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = CallType(zgensym_28874796354aa7f3_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CallType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HDR) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_28874796354aa7f3_3 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_28874796354aa7f3_3 uint32
	totalEncodedFields2zgensym_28874796354aa7f3_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_28874796354aa7f3_3 := totalEncodedFields2zgensym_28874796354aa7f3_3
	missingFieldsLeft2zgensym_28874796354aa7f3_3 := maxFields2zgensym_28874796354aa7f3_3 - totalEncodedFields2zgensym_28874796354aa7f3_3

	var nextMiss2zgensym_28874796354aa7f3_3 int32 = -1
	var found2zgensym_28874796354aa7f3_3 [maxFields2zgensym_28874796354aa7f3_3]bool
	var curField2zgensym_28874796354aa7f3_3 string

doneWithStruct2zgensym_28874796354aa7f3_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_28874796354aa7f3_3 > 0 || missingFieldsLeft2zgensym_28874796354aa7f3_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_28874796354aa7f3_3, missingFieldsLeft2zgensym_28874796354aa7f3_3, msgp.ShowFound(found2zgensym_28874796354aa7f3_3[:]), decodeMsgFieldOrder2zgensym_28874796354aa7f3_3)
		if encodedFieldsLeft2zgensym_28874796354aa7f3_3 > 0 {
			encodedFieldsLeft2zgensym_28874796354aa7f3_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_28874796354aa7f3_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_28874796354aa7f3_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_28874796354aa7f3_3 = 0
			}
			for nextMiss2zgensym_28874796354aa7f3_3 < maxFields2zgensym_28874796354aa7f3_3 && (found2zgensym_28874796354aa7f3_3[nextMiss2zgensym_28874796354aa7f3_3] || decodeMsgFieldSkip2zgensym_28874796354aa7f3_3[nextMiss2zgensym_28874796354aa7f3_3]) {
				nextMiss2zgensym_28874796354aa7f3_3++
			}
			if nextMiss2zgensym_28874796354aa7f3_3 == maxFields2zgensym_28874796354aa7f3_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_28874796354aa7f3_3
			}
			missingFieldsLeft2zgensym_28874796354aa7f3_3--
			curField2zgensym_28874796354aa7f3_3 = decodeMsgFieldOrder2zgensym_28874796354aa7f3_3[nextMiss2zgensym_28874796354aa7f3_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_28874796354aa7f3_3)
		switch curField2zgensym_28874796354aa7f3_3 {
		// -- templateDecodeMsg ends here --

		case "Created_zid00_tim":
			found2zgensym_28874796354aa7f3_3[0] = true
			z.Created, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "From_zid01_str":
			found2zgensym_28874796354aa7f3_3[1] = true
			z.From, err = dc.ReadString()
			if err != nil {
				return
			}
		case "To_zid02_str":
			found2zgensym_28874796354aa7f3_3[2] = true
			z.To, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Subject_zid03_str":
			found2zgensym_28874796354aa7f3_3[3] = true
			z.Subject, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Seqno_zid04_u64":
			found2zgensym_28874796354aa7f3_3[4] = true
			z.Seqno, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Typ_zid05_rct":
			found2zgensym_28874796354aa7f3_3[5] = true
			{
				var zgensym_28874796354aa7f3_4 int
				zgensym_28874796354aa7f3_4, err = dc.ReadInt()
				z.Typ = CallType(zgensym_28874796354aa7f3_4)
			}
			if err != nil {
				return
			}
		case "CallID_zid06_str":
			found2zgensym_28874796354aa7f3_3[6] = true
			z.CallID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Serial_zid07_i64":
			found2zgensym_28874796354aa7f3_3[7] = true
			z.Serial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_28874796354aa7f3_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HDR
var decodeMsgFieldOrder2zgensym_28874796354aa7f3_3 = []string{"Created_zid00_tim", "From_zid01_str", "To_zid02_str", "Subject_zid03_str", "Seqno_zid04_u64", "Typ_zid05_rct", "CallID_zid06_str", "Serial_zid07_i64", ""}

var decodeMsgFieldSkip2zgensym_28874796354aa7f3_3 = []bool{false, false, false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *HDR) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 8
	}
	var fieldsInUse uint32 = 8
	isempty[0] = (z.Created.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.From) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.To) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Subject) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Seqno == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.Typ == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.CallID) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.Serial == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HDR) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_28874796354aa7f3_5 [9]bool
	fieldsInUse_zgensym_28874796354aa7f3_6 := z.fieldsNotEmpty(empty_zgensym_28874796354aa7f3_5[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_28874796354aa7f3_6 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HDR'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x44, 0x52})
	if err != nil {
		return err
	}

	if !empty_zgensym_28874796354aa7f3_5[0] {
		// write "Created_zid00_tim"
		err = en.Append(0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Created)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[1] {
		// write "From_zid01_str"
		err = en.Append(0xae, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.From)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[2] {
		// write "To_zid02_str"
		err = en.Append(0xac, 0x54, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.To)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[3] {
		// write "Subject_zid03_str"
		err = en.Append(0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Subject)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[4] {
		// write "Seqno_zid04_u64"
		err = en.Append(0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Seqno)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[5] {
		// write "Typ_zid05_rct"
		err = en.Append(0xad, 0x54, 0x79, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(int(z.Typ))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[6] {
		// write "CallID_zid06_str"
		err = en.Append(0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CallID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_5[7] {
		// write "Serial_zid07_i64"
		err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Serial)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HDR) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Created_zid00_tim"
		o = append(o, 0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Created)
	}

	if !empty[1] {
		// string "From_zid01_str"
		o = append(o, 0xae, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.From)
	}

	if !empty[2] {
		// string "To_zid02_str"
		o = append(o, 0xac, 0x54, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.To)
	}

	if !empty[3] {
		// string "Subject_zid03_str"
		o = append(o, 0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Subject)
	}

	if !empty[4] {
		// string "Seqno_zid04_u64"
		o = append(o, 0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Seqno)
	}

	if !empty[5] {
		// string "Typ_zid05_rct"
		o = append(o, 0xad, 0x54, 0x79, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt(o, int(z.Typ))
	}

	if !empty[6] {
		// string "CallID_zid06_str"
		o = append(o, 0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CallID)
	}

	if !empty[7] {
		// string "Serial_zid07_i64"
		o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Serial)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HDR) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HDR) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields7zgensym_28874796354aa7f3_8 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields7zgensym_28874796354aa7f3_8 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields7zgensym_28874796354aa7f3_8, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft7zgensym_28874796354aa7f3_8 := totalEncodedFields7zgensym_28874796354aa7f3_8
	missingFieldsLeft7zgensym_28874796354aa7f3_8 := maxFields7zgensym_28874796354aa7f3_8 - totalEncodedFields7zgensym_28874796354aa7f3_8

	var nextMiss7zgensym_28874796354aa7f3_8 int32 = -1
	var found7zgensym_28874796354aa7f3_8 [maxFields7zgensym_28874796354aa7f3_8]bool
	var curField7zgensym_28874796354aa7f3_8 string

doneWithStruct7zgensym_28874796354aa7f3_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_28874796354aa7f3_8 > 0 || missingFieldsLeft7zgensym_28874796354aa7f3_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft7zgensym_28874796354aa7f3_8, missingFieldsLeft7zgensym_28874796354aa7f3_8, msgp.ShowFound(found7zgensym_28874796354aa7f3_8[:]), unmarshalMsgFieldOrder7zgensym_28874796354aa7f3_8)
		if encodedFieldsLeft7zgensym_28874796354aa7f3_8 > 0 {
			encodedFieldsLeft7zgensym_28874796354aa7f3_8--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField7zgensym_28874796354aa7f3_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_28874796354aa7f3_8 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss7zgensym_28874796354aa7f3_8 = 0
			}
			for nextMiss7zgensym_28874796354aa7f3_8 < maxFields7zgensym_28874796354aa7f3_8 && (found7zgensym_28874796354aa7f3_8[nextMiss7zgensym_28874796354aa7f3_8] || unmarshalMsgFieldSkip7zgensym_28874796354aa7f3_8[nextMiss7zgensym_28874796354aa7f3_8]) {
				nextMiss7zgensym_28874796354aa7f3_8++
			}
			if nextMiss7zgensym_28874796354aa7f3_8 == maxFields7zgensym_28874796354aa7f3_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_28874796354aa7f3_8
			}
			missingFieldsLeft7zgensym_28874796354aa7f3_8--
			curField7zgensym_28874796354aa7f3_8 = unmarshalMsgFieldOrder7zgensym_28874796354aa7f3_8[nextMiss7zgensym_28874796354aa7f3_8]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField7zgensym_28874796354aa7f3_8)
		switch curField7zgensym_28874796354aa7f3_8 {
		// -- templateUnmarshalMsg ends here --

		case "Created_zid00_tim":
			found7zgensym_28874796354aa7f3_8[0] = true
			z.Created, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "From_zid01_str":
			found7zgensym_28874796354aa7f3_8[1] = true
			z.From, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "To_zid02_str":
			found7zgensym_28874796354aa7f3_8[2] = true
			z.To, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Subject_zid03_str":
			found7zgensym_28874796354aa7f3_8[3] = true
			z.Subject, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Seqno_zid04_u64":
			found7zgensym_28874796354aa7f3_8[4] = true
			z.Seqno, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "Typ_zid05_rct":
			found7zgensym_28874796354aa7f3_8[5] = true
			{
				var zgensym_28874796354aa7f3_9 int
				zgensym_28874796354aa7f3_9, bts, err = nbs.ReadIntBytes(bts)

				if err != nil {
					return
				}
				z.Typ = CallType(zgensym_28874796354aa7f3_9)
			}
		case "CallID_zid06_str":
			found7zgensym_28874796354aa7f3_8[6] = true
			z.CallID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Serial_zid07_i64":
			found7zgensym_28874796354aa7f3_8[7] = true
			z.Serial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_28874796354aa7f3_8 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HDR
var unmarshalMsgFieldOrder7zgensym_28874796354aa7f3_8 = []string{"Created_zid00_tim", "From_zid01_str", "To_zid02_str", "Subject_zid03_str", "Seqno_zid04_u64", "Typ_zid05_rct", "CallID_zid06_str", "Serial_zid07_i64", ""}

var unmarshalMsgFieldSkip7zgensym_28874796354aa7f3_8 = []bool{false, false, false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HDR) Msgsize() (s int) {
	s = 1 + 18 + msgp.TimeSize + 15 + msgp.StringPrefixSize + len(z.From) + 13 + msgp.StringPrefixSize + len(z.To) + 18 + msgp.StringPrefixSize + len(z.Subject) + 16 + msgp.Uint64Size + 14 + msgp.IntSize + 17 + msgp.StringPrefixSize + len(z.CallID) + 17 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields10zgensym_28874796354aa7f3_11 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields10zgensym_28874796354aa7f3_11 uint32
	totalEncodedFields10zgensym_28874796354aa7f3_11, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft10zgensym_28874796354aa7f3_11 := totalEncodedFields10zgensym_28874796354aa7f3_11
	missingFieldsLeft10zgensym_28874796354aa7f3_11 := maxFields10zgensym_28874796354aa7f3_11 - totalEncodedFields10zgensym_28874796354aa7f3_11

	var nextMiss10zgensym_28874796354aa7f3_11 int32 = -1
	var found10zgensym_28874796354aa7f3_11 [maxFields10zgensym_28874796354aa7f3_11]bool
	var curField10zgensym_28874796354aa7f3_11 string

doneWithStruct10zgensym_28874796354aa7f3_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_28874796354aa7f3_11 > 0 || missingFieldsLeft10zgensym_28874796354aa7f3_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_28874796354aa7f3_11, missingFieldsLeft10zgensym_28874796354aa7f3_11, msgp.ShowFound(found10zgensym_28874796354aa7f3_11[:]), decodeMsgFieldOrder10zgensym_28874796354aa7f3_11)
		if encodedFieldsLeft10zgensym_28874796354aa7f3_11 > 0 {
			encodedFieldsLeft10zgensym_28874796354aa7f3_11--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField10zgensym_28874796354aa7f3_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_28874796354aa7f3_11 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss10zgensym_28874796354aa7f3_11 = 0
			}
			for nextMiss10zgensym_28874796354aa7f3_11 < maxFields10zgensym_28874796354aa7f3_11 && (found10zgensym_28874796354aa7f3_11[nextMiss10zgensym_28874796354aa7f3_11] || decodeMsgFieldSkip10zgensym_28874796354aa7f3_11[nextMiss10zgensym_28874796354aa7f3_11]) {
				nextMiss10zgensym_28874796354aa7f3_11++
			}
			if nextMiss10zgensym_28874796354aa7f3_11 == maxFields10zgensym_28874796354aa7f3_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_28874796354aa7f3_11
			}
			missingFieldsLeft10zgensym_28874796354aa7f3_11--
			curField10zgensym_28874796354aa7f3_11 = decodeMsgFieldOrder10zgensym_28874796354aa7f3_11[nextMiss10zgensym_28874796354aa7f3_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_28874796354aa7f3_11)
		switch curField10zgensym_28874796354aa7f3_11 {
		// -- templateDecodeMsg ends here --

		case "HDR_zid00_rct":
			found10zgensym_28874796354aa7f3_11[0] = true
			err = z.HDR.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "JobSerz_zid01_bin":
			found10zgensym_28874796354aa7f3_11[1] = true
			z.JobSerz, err = dc.ReadBytes(z.JobSerz)
			if err != nil {
				return
			}
		case "JobErrs_zid02_str":
			found10zgensym_28874796354aa7f3_11[2] = true
			z.JobErrs, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_28874796354aa7f3_11 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Message
var decodeMsgFieldOrder10zgensym_28874796354aa7f3_11 = []string{"HDR_zid00_rct", "JobSerz_zid01_bin", "JobErrs_zid02_str", "", ""}

var decodeMsgFieldSkip10zgensym_28874796354aa7f3_11 = []bool{false, false, false, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *Message) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.JobSerz) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.JobErrs) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_28874796354aa7f3_12 [5]bool
	fieldsInUse_zgensym_28874796354aa7f3_13 := z.fieldsNotEmpty(empty_zgensym_28874796354aa7f3_12[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_28874796354aa7f3_13 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Message'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_28874796354aa7f3_12[0] {
		// write "HDR_zid00_rct"
		err = en.Append(0xad, 0x48, 0x44, 0x52, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.HDR)
		if err != nil {
			return
		}
		if !dup {
			err = z.HDR.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_28874796354aa7f3_12[1] {
		// write "JobSerz_zid01_bin"
		err = en.Append(0xb1, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.JobSerz)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_28874796354aa7f3_12[2] {
		// write "JobErrs_zid02_str"
		err = en.Append(0xb1, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.JobErrs)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "HDR_zid00_rct"
		o = append(o, 0xad, 0x48, 0x44, 0x52, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.HDR.MarshalMsg(o) // not is.iface, gen/marshal.go:243
		if err != nil {
			return
		}
	}

	if !empty[1] {
		// string "JobSerz_zid01_bin"
		o = append(o, 0xb1, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.JobSerz)
	}

	if !empty[2] {
		// string "JobErrs_zid02_str"
		o = append(o, 0xb1, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.JobErrs)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Message) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields14zgensym_28874796354aa7f3_15 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields14zgensym_28874796354aa7f3_15 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields14zgensym_28874796354aa7f3_15, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft14zgensym_28874796354aa7f3_15 := totalEncodedFields14zgensym_28874796354aa7f3_15
	missingFieldsLeft14zgensym_28874796354aa7f3_15 := maxFields14zgensym_28874796354aa7f3_15 - totalEncodedFields14zgensym_28874796354aa7f3_15

	var nextMiss14zgensym_28874796354aa7f3_15 int32 = -1
	var found14zgensym_28874796354aa7f3_15 [maxFields14zgensym_28874796354aa7f3_15]bool
	var curField14zgensym_28874796354aa7f3_15 string

doneWithStruct14zgensym_28874796354aa7f3_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_28874796354aa7f3_15 > 0 || missingFieldsLeft14zgensym_28874796354aa7f3_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft14zgensym_28874796354aa7f3_15, missingFieldsLeft14zgensym_28874796354aa7f3_15, msgp.ShowFound(found14zgensym_28874796354aa7f3_15[:]), unmarshalMsgFieldOrder14zgensym_28874796354aa7f3_15)
		if encodedFieldsLeft14zgensym_28874796354aa7f3_15 > 0 {
			encodedFieldsLeft14zgensym_28874796354aa7f3_15--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField14zgensym_28874796354aa7f3_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_28874796354aa7f3_15 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss14zgensym_28874796354aa7f3_15 = 0
			}
			for nextMiss14zgensym_28874796354aa7f3_15 < maxFields14zgensym_28874796354aa7f3_15 && (found14zgensym_28874796354aa7f3_15[nextMiss14zgensym_28874796354aa7f3_15] || unmarshalMsgFieldSkip14zgensym_28874796354aa7f3_15[nextMiss14zgensym_28874796354aa7f3_15]) {
				nextMiss14zgensym_28874796354aa7f3_15++
			}
			if nextMiss14zgensym_28874796354aa7f3_15 == maxFields14zgensym_28874796354aa7f3_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_28874796354aa7f3_15
			}
			missingFieldsLeft14zgensym_28874796354aa7f3_15--
			curField14zgensym_28874796354aa7f3_15 = unmarshalMsgFieldOrder14zgensym_28874796354aa7f3_15[nextMiss14zgensym_28874796354aa7f3_15]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField14zgensym_28874796354aa7f3_15)
		switch curField14zgensym_28874796354aa7f3_15 {
		// -- templateUnmarshalMsg ends here --

		case "HDR_zid00_rct":
			found14zgensym_28874796354aa7f3_15[0] = true
			bts, err = z.HDR.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "JobSerz_zid01_bin":
			found14zgensym_28874796354aa7f3_15[1] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.JobSerz = z.JobSerz[:0]
			} else {
				z.JobSerz, bts, err = nbs.ReadBytesBytes(bts, z.JobSerz)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "JobErrs_zid02_str":
			found14zgensym_28874796354aa7f3_15[2] = true
			z.JobErrs, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_28874796354aa7f3_15 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Message
var unmarshalMsgFieldOrder14zgensym_28874796354aa7f3_15 = []string{"HDR_zid00_rct", "JobSerz_zid01_bin", "JobErrs_zid02_str", "", ""}

var unmarshalMsgFieldSkip14zgensym_28874796354aa7f3_15 = []bool{false, false, false, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 14 + z.HDR.Msgsize() + 18 + msgp.BytesPrefixSize + len(z.JobSerz) + 18 + msgp.StringPrefixSize + len(z.JobErrs)
	return
}
