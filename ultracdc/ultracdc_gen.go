// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package ultracdc

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ChunkerOpts) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_459840587cde88d_1 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_459840587cde88d_1 uint32
	totalEncodedFields0zgensym_459840587cde88d_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_459840587cde88d_1 := totalEncodedFields0zgensym_459840587cde88d_1
	missingFieldsLeft0zgensym_459840587cde88d_1 := maxFields0zgensym_459840587cde88d_1 - totalEncodedFields0zgensym_459840587cde88d_1

	var nextMiss0zgensym_459840587cde88d_1 int32 = -1
	var found0zgensym_459840587cde88d_1 [maxFields0zgensym_459840587cde88d_1]bool
	var curField0zgensym_459840587cde88d_1 string

doneWithStruct0zgensym_459840587cde88d_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_459840587cde88d_1 > 0 || missingFieldsLeft0zgensym_459840587cde88d_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_459840587cde88d_1, missingFieldsLeft0zgensym_459840587cde88d_1, msgp.ShowFound(found0zgensym_459840587cde88d_1[:]), decodeMsgFieldOrder0zgensym_459840587cde88d_1)
		if encodedFieldsLeft0zgensym_459840587cde88d_1 > 0 {
			encodedFieldsLeft0zgensym_459840587cde88d_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_459840587cde88d_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_459840587cde88d_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_459840587cde88d_1 = 0
			}
			for nextMiss0zgensym_459840587cde88d_1 < maxFields0zgensym_459840587cde88d_1 && (found0zgensym_459840587cde88d_1[nextMiss0zgensym_459840587cde88d_1] || decodeMsgFieldSkip0zgensym_459840587cde88d_1[nextMiss0zgensym_459840587cde88d_1]) {
				nextMiss0zgensym_459840587cde88d_1++
			}
			if nextMiss0zgensym_459840587cde88d_1 == maxFields0zgensym_459840587cde88d_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_459840587cde88d_1
			}
			missingFieldsLeft0zgensym_459840587cde88d_1--
			curField0zgensym_459840587cde88d_1 = decodeMsgFieldOrder0zgensym_459840587cde88d_1[nextMiss0zgensym_459840587cde88d_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_459840587cde88d_1)
		switch curField0zgensym_459840587cde88d_1 {
		// -- templateDecodeMsg ends here --

		case "MinSize__int":
			found0zgensym_459840587cde88d_1[0] = true
			z.MinSize, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "MaxSize__int":
			found0zgensym_459840587cde88d_1[1] = true
			z.MaxSize, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "NormalSize__int":
			found0zgensym_459840587cde88d_1[2] = true
			z.NormalSize, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_459840587cde88d_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ChunkerOpts
var decodeMsgFieldOrder0zgensym_459840587cde88d_1 = []string{"MinSize__int", "MaxSize__int", "NormalSize__int"}

var decodeMsgFieldSkip0zgensym_459840587cde88d_1 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z ChunkerOpts) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.MinSize == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.MaxSize == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.NormalSize == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z ChunkerOpts) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_459840587cde88d_2 [3]bool
	fieldsInUse_zgensym_459840587cde88d_3 := z.fieldsNotEmpty(empty_zgensym_459840587cde88d_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_459840587cde88d_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ChunkerOpts'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_459840587cde88d_2[0] {
		// write "MinSize__int"
		err = en.Append(0xac, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.MinSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_459840587cde88d_2[1] {
		// write "MaxSize__int"
		err = en.Append(0xac, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.MaxSize)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_459840587cde88d_2[2] {
		// write "NormalSize__int"
		err = en.Append(0xaf, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.NormalSize)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z ChunkerOpts) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "MinSize__int"
		o = append(o, 0xac, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.MinSize)
	}

	if !empty[1] {
		// string "MaxSize__int"
		o = append(o, 0xac, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.MaxSize)
	}

	if !empty[2] {
		// string "NormalSize__int"
		o = append(o, 0xaf, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.NormalSize)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ChunkerOpts) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ChunkerOpts) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_459840587cde88d_5 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_459840587cde88d_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_459840587cde88d_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_459840587cde88d_5 := totalEncodedFields4zgensym_459840587cde88d_5
	missingFieldsLeft4zgensym_459840587cde88d_5 := maxFields4zgensym_459840587cde88d_5 - totalEncodedFields4zgensym_459840587cde88d_5

	var nextMiss4zgensym_459840587cde88d_5 int32 = -1
	var found4zgensym_459840587cde88d_5 [maxFields4zgensym_459840587cde88d_5]bool
	var curField4zgensym_459840587cde88d_5 string

doneWithStruct4zgensym_459840587cde88d_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_459840587cde88d_5 > 0 || missingFieldsLeft4zgensym_459840587cde88d_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_459840587cde88d_5, missingFieldsLeft4zgensym_459840587cde88d_5, msgp.ShowFound(found4zgensym_459840587cde88d_5[:]), unmarshalMsgFieldOrder4zgensym_459840587cde88d_5)
		if encodedFieldsLeft4zgensym_459840587cde88d_5 > 0 {
			encodedFieldsLeft4zgensym_459840587cde88d_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_459840587cde88d_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_459840587cde88d_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_459840587cde88d_5 = 0
			}
			for nextMiss4zgensym_459840587cde88d_5 < maxFields4zgensym_459840587cde88d_5 && (found4zgensym_459840587cde88d_5[nextMiss4zgensym_459840587cde88d_5] || unmarshalMsgFieldSkip4zgensym_459840587cde88d_5[nextMiss4zgensym_459840587cde88d_5]) {
				nextMiss4zgensym_459840587cde88d_5++
			}
			if nextMiss4zgensym_459840587cde88d_5 == maxFields4zgensym_459840587cde88d_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_459840587cde88d_5
			}
			missingFieldsLeft4zgensym_459840587cde88d_5--
			curField4zgensym_459840587cde88d_5 = unmarshalMsgFieldOrder4zgensym_459840587cde88d_5[nextMiss4zgensym_459840587cde88d_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_459840587cde88d_5)
		switch curField4zgensym_459840587cde88d_5 {
		// -- templateUnmarshalMsg ends here --

		case "MinSize__int":
			found4zgensym_459840587cde88d_5[0] = true
			z.MinSize, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "MaxSize__int":
			found4zgensym_459840587cde88d_5[1] = true
			z.MaxSize, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "NormalSize__int":
			found4zgensym_459840587cde88d_5[2] = true
			z.NormalSize, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_459840587cde88d_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ChunkerOpts
var unmarshalMsgFieldOrder4zgensym_459840587cde88d_5 = []string{"MinSize__int", "MaxSize__int", "NormalSize__int"}

var unmarshalMsgFieldSkip4zgensym_459840587cde88d_5 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ChunkerOpts) Msgsize() (s int) {
	s = 1 + 13 + msgp.IntSize + 13 + msgp.IntSize + 16 + msgp.IntSize
	return
}
