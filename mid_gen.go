// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HDR) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_db31ae8ee6d36a77_1 = 12

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_db31ae8ee6d36a77_1 uint32
	totalEncodedFields0zgensym_db31ae8ee6d36a77_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_db31ae8ee6d36a77_1 := totalEncodedFields0zgensym_db31ae8ee6d36a77_1
	missingFieldsLeft0zgensym_db31ae8ee6d36a77_1 := maxFields0zgensym_db31ae8ee6d36a77_1 - totalEncodedFields0zgensym_db31ae8ee6d36a77_1

	var nextMiss0zgensym_db31ae8ee6d36a77_1 int32 = -1
	var found0zgensym_db31ae8ee6d36a77_1 [maxFields0zgensym_db31ae8ee6d36a77_1]bool
	var curField0zgensym_db31ae8ee6d36a77_1 string

doneWithStruct0zgensym_db31ae8ee6d36a77_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_db31ae8ee6d36a77_1 > 0 || missingFieldsLeft0zgensym_db31ae8ee6d36a77_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_db31ae8ee6d36a77_1, missingFieldsLeft0zgensym_db31ae8ee6d36a77_1, msgp.ShowFound(found0zgensym_db31ae8ee6d36a77_1[:]), decodeMsgFieldOrder0zgensym_db31ae8ee6d36a77_1)
		if encodedFieldsLeft0zgensym_db31ae8ee6d36a77_1 > 0 {
			encodedFieldsLeft0zgensym_db31ae8ee6d36a77_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_db31ae8ee6d36a77_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_db31ae8ee6d36a77_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_db31ae8ee6d36a77_1 = 0
			}
			for nextMiss0zgensym_db31ae8ee6d36a77_1 < maxFields0zgensym_db31ae8ee6d36a77_1 && (found0zgensym_db31ae8ee6d36a77_1[nextMiss0zgensym_db31ae8ee6d36a77_1] || decodeMsgFieldSkip0zgensym_db31ae8ee6d36a77_1[nextMiss0zgensym_db31ae8ee6d36a77_1]) {
				nextMiss0zgensym_db31ae8ee6d36a77_1++
			}
			if nextMiss0zgensym_db31ae8ee6d36a77_1 == maxFields0zgensym_db31ae8ee6d36a77_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_db31ae8ee6d36a77_1
			}
			missingFieldsLeft0zgensym_db31ae8ee6d36a77_1--
			curField0zgensym_db31ae8ee6d36a77_1 = decodeMsgFieldOrder0zgensym_db31ae8ee6d36a77_1[nextMiss0zgensym_db31ae8ee6d36a77_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_db31ae8ee6d36a77_1)
		switch curField0zgensym_db31ae8ee6d36a77_1 {
		// -- templateDecodeMsg ends here --

		case "Created_zid00_str":
			found0zgensym_db31ae8ee6d36a77_1[0] = true
			z.Created, err = dc.ReadString()
			if err != nil {
				return
			}
		case "From_zid01_str":
			found0zgensym_db31ae8ee6d36a77_1[1] = true
			z.From, err = dc.ReadString()
			if err != nil {
				return
			}
		case "To_zid02_str":
			found0zgensym_db31ae8ee6d36a77_1[2] = true
			z.To, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Subject_zid03_str":
			found0zgensym_db31ae8ee6d36a77_1[3] = true
			z.Subject, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsRPC_zid04_boo":
			found0zgensym_db31ae8ee6d36a77_1[4] = true
			z.IsRPC, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "IsLeg2_zid05_boo":
			found0zgensym_db31ae8ee6d36a77_1[5] = true
			z.IsLeg2, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Serial_zid06_i64":
			found0zgensym_db31ae8ee6d36a77_1[6] = true
			z.Serial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CallID_zid07_str":
			found0zgensym_db31ae8ee6d36a77_1[7] = true
			z.CallID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PID_zid08_i64":
			found0zgensym_db31ae8ee6d36a77_1[8] = true
			z.PID, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Seqno_zid09_u64":
			found0zgensym_db31ae8ee6d36a77_1[9] = true
			z.Seqno, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "IsNetRPC_zid10_boo":
			found0zgensym_db31ae8ee6d36a77_1[10] = true
			z.IsNetRPC, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_db31ae8ee6d36a77_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HDR
var decodeMsgFieldOrder0zgensym_db31ae8ee6d36a77_1 = []string{"Created_zid00_str", "From_zid01_str", "To_zid02_str", "Subject_zid03_str", "IsRPC_zid04_boo", "IsLeg2_zid05_boo", "Serial_zid06_i64", "CallID_zid07_str", "PID_zid08_i64", "Seqno_zid09_u64", "IsNetRPC_zid10_boo", ""}

var decodeMsgFieldSkip0zgensym_db31ae8ee6d36a77_1 = []bool{false, false, false, false, false, false, false, false, false, false, false, true}

// fieldsNotEmpty supports omitempty tags
func (z *HDR) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 11
	}
	var fieldsInUse uint32 = 11
	isempty[0] = (len(z.Created) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.From) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.To) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Subject) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (!z.IsRPC) // bool, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (!z.IsLeg2) // bool, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.Serial == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.CallID) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.PID == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.Seqno == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (!z.IsNetRPC) // bool, omitempty
	if isempty[10] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HDR) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_db31ae8ee6d36a77_2 [12]bool
	fieldsInUse_zgensym_db31ae8ee6d36a77_3 := z.fieldsNotEmpty(empty_zgensym_db31ae8ee6d36a77_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_db31ae8ee6d36a77_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HDR'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x44, 0x52})
	if err != nil {
		return err
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[0] {
		// write "Created_zid00_str"
		err = en.Append(0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Created)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[1] {
		// write "From_zid01_str"
		err = en.Append(0xae, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.From)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[2] {
		// write "To_zid02_str"
		err = en.Append(0xac, 0x54, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.To)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[3] {
		// write "Subject_zid03_str"
		err = en.Append(0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Subject)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[4] {
		// write "IsRPC_zid04_boo"
		err = en.Append(0xaf, 0x49, 0x73, 0x52, 0x50, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsRPC)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[5] {
		// write "IsLeg2_zid05_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x32, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLeg2)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[6] {
		// write "Serial_zid06_i64"
		err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Serial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[7] {
		// write "CallID_zid07_str"
		err = en.Append(0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CallID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[8] {
		// write "PID_zid08_i64"
		err = en.Append(0xad, 0x50, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[9] {
		// write "Seqno_zid09_u64"
		err = en.Append(0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Seqno)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_2[10] {
		// write "IsNetRPC_zid10_boo"
		err = en.Append(0xb2, 0x49, 0x73, 0x4e, 0x65, 0x74, 0x52, 0x50, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsNetRPC)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HDR) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [12]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Created_zid00_str"
		o = append(o, 0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Created)
	}

	if !empty[1] {
		// string "From_zid01_str"
		o = append(o, 0xae, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.From)
	}

	if !empty[2] {
		// string "To_zid02_str"
		o = append(o, 0xac, 0x54, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.To)
	}

	if !empty[3] {
		// string "Subject_zid03_str"
		o = append(o, 0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Subject)
	}

	if !empty[4] {
		// string "IsRPC_zid04_boo"
		o = append(o, 0xaf, 0x49, 0x73, 0x52, 0x50, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsRPC)
	}

	if !empty[5] {
		// string "IsLeg2_zid05_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x32, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLeg2)
	}

	if !empty[6] {
		// string "Serial_zid06_i64"
		o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Serial)
	}

	if !empty[7] {
		// string "CallID_zid07_str"
		o = append(o, 0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CallID)
	}

	if !empty[8] {
		// string "PID_zid08_i64"
		o = append(o, 0xad, 0x50, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PID)
	}

	if !empty[9] {
		// string "Seqno_zid09_u64"
		o = append(o, 0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Seqno)
	}

	if !empty[10] {
		// string "IsNetRPC_zid10_boo"
		o = append(o, 0xb2, 0x49, 0x73, 0x4e, 0x65, 0x74, 0x52, 0x50, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsNetRPC)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HDR) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HDR) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_db31ae8ee6d36a77_5 = 12

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_db31ae8ee6d36a77_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_db31ae8ee6d36a77_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_db31ae8ee6d36a77_5 := totalEncodedFields4zgensym_db31ae8ee6d36a77_5
	missingFieldsLeft4zgensym_db31ae8ee6d36a77_5 := maxFields4zgensym_db31ae8ee6d36a77_5 - totalEncodedFields4zgensym_db31ae8ee6d36a77_5

	var nextMiss4zgensym_db31ae8ee6d36a77_5 int32 = -1
	var found4zgensym_db31ae8ee6d36a77_5 [maxFields4zgensym_db31ae8ee6d36a77_5]bool
	var curField4zgensym_db31ae8ee6d36a77_5 string

doneWithStruct4zgensym_db31ae8ee6d36a77_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_db31ae8ee6d36a77_5 > 0 || missingFieldsLeft4zgensym_db31ae8ee6d36a77_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_db31ae8ee6d36a77_5, missingFieldsLeft4zgensym_db31ae8ee6d36a77_5, msgp.ShowFound(found4zgensym_db31ae8ee6d36a77_5[:]), unmarshalMsgFieldOrder4zgensym_db31ae8ee6d36a77_5)
		if encodedFieldsLeft4zgensym_db31ae8ee6d36a77_5 > 0 {
			encodedFieldsLeft4zgensym_db31ae8ee6d36a77_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_db31ae8ee6d36a77_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_db31ae8ee6d36a77_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_db31ae8ee6d36a77_5 = 0
			}
			for nextMiss4zgensym_db31ae8ee6d36a77_5 < maxFields4zgensym_db31ae8ee6d36a77_5 && (found4zgensym_db31ae8ee6d36a77_5[nextMiss4zgensym_db31ae8ee6d36a77_5] || unmarshalMsgFieldSkip4zgensym_db31ae8ee6d36a77_5[nextMiss4zgensym_db31ae8ee6d36a77_5]) {
				nextMiss4zgensym_db31ae8ee6d36a77_5++
			}
			if nextMiss4zgensym_db31ae8ee6d36a77_5 == maxFields4zgensym_db31ae8ee6d36a77_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_db31ae8ee6d36a77_5
			}
			missingFieldsLeft4zgensym_db31ae8ee6d36a77_5--
			curField4zgensym_db31ae8ee6d36a77_5 = unmarshalMsgFieldOrder4zgensym_db31ae8ee6d36a77_5[nextMiss4zgensym_db31ae8ee6d36a77_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_db31ae8ee6d36a77_5)
		switch curField4zgensym_db31ae8ee6d36a77_5 {
		// -- templateUnmarshalMsg ends here --

		case "Created_zid00_str":
			found4zgensym_db31ae8ee6d36a77_5[0] = true
			z.Created, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "From_zid01_str":
			found4zgensym_db31ae8ee6d36a77_5[1] = true
			z.From, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "To_zid02_str":
			found4zgensym_db31ae8ee6d36a77_5[2] = true
			z.To, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Subject_zid03_str":
			found4zgensym_db31ae8ee6d36a77_5[3] = true
			z.Subject, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsRPC_zid04_boo":
			found4zgensym_db31ae8ee6d36a77_5[4] = true
			z.IsRPC, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "IsLeg2_zid05_boo":
			found4zgensym_db31ae8ee6d36a77_5[5] = true
			z.IsLeg2, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Serial_zid06_i64":
			found4zgensym_db31ae8ee6d36a77_5[6] = true
			z.Serial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CallID_zid07_str":
			found4zgensym_db31ae8ee6d36a77_5[7] = true
			z.CallID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PID_zid08_i64":
			found4zgensym_db31ae8ee6d36a77_5[8] = true
			z.PID, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Seqno_zid09_u64":
			found4zgensym_db31ae8ee6d36a77_5[9] = true
			z.Seqno, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "IsNetRPC_zid10_boo":
			found4zgensym_db31ae8ee6d36a77_5[10] = true
			z.IsNetRPC, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_db31ae8ee6d36a77_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HDR
var unmarshalMsgFieldOrder4zgensym_db31ae8ee6d36a77_5 = []string{"Created_zid00_str", "From_zid01_str", "To_zid02_str", "Subject_zid03_str", "IsRPC_zid04_boo", "IsLeg2_zid05_boo", "Serial_zid06_i64", "CallID_zid07_str", "PID_zid08_i64", "Seqno_zid09_u64", "IsNetRPC_zid10_boo", ""}

var unmarshalMsgFieldSkip4zgensym_db31ae8ee6d36a77_5 = []bool{false, false, false, false, false, false, false, false, false, false, false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HDR) Msgsize() (s int) {
	s = 1 + 18 + msgp.StringPrefixSize + len(z.Created) + 15 + msgp.StringPrefixSize + len(z.From) + 13 + msgp.StringPrefixSize + len(z.To) + 18 + msgp.StringPrefixSize + len(z.Subject) + 16 + msgp.BoolSize + 17 + msgp.BoolSize + 17 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.CallID) + 14 + msgp.Int64Size + 16 + msgp.Uint64Size + 19 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_db31ae8ee6d36a77_7 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_db31ae8ee6d36a77_7 uint32
	totalEncodedFields6zgensym_db31ae8ee6d36a77_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7 := totalEncodedFields6zgensym_db31ae8ee6d36a77_7
	missingFieldsLeft6zgensym_db31ae8ee6d36a77_7 := maxFields6zgensym_db31ae8ee6d36a77_7 - totalEncodedFields6zgensym_db31ae8ee6d36a77_7

	var nextMiss6zgensym_db31ae8ee6d36a77_7 int32 = -1
	var found6zgensym_db31ae8ee6d36a77_7 [maxFields6zgensym_db31ae8ee6d36a77_7]bool
	var curField6zgensym_db31ae8ee6d36a77_7 string

doneWithStruct6zgensym_db31ae8ee6d36a77_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7 > 0 || missingFieldsLeft6zgensym_db31ae8ee6d36a77_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7, missingFieldsLeft6zgensym_db31ae8ee6d36a77_7, msgp.ShowFound(found6zgensym_db31ae8ee6d36a77_7[:]), decodeMsgFieldOrder6zgensym_db31ae8ee6d36a77_7)
		if encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7 > 0 {
			encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_db31ae8ee6d36a77_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_db31ae8ee6d36a77_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_db31ae8ee6d36a77_7 = 0
			}
			for nextMiss6zgensym_db31ae8ee6d36a77_7 < maxFields6zgensym_db31ae8ee6d36a77_7 && (found6zgensym_db31ae8ee6d36a77_7[nextMiss6zgensym_db31ae8ee6d36a77_7] || decodeMsgFieldSkip6zgensym_db31ae8ee6d36a77_7[nextMiss6zgensym_db31ae8ee6d36a77_7]) {
				nextMiss6zgensym_db31ae8ee6d36a77_7++
			}
			if nextMiss6zgensym_db31ae8ee6d36a77_7 == maxFields6zgensym_db31ae8ee6d36a77_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_db31ae8ee6d36a77_7
			}
			missingFieldsLeft6zgensym_db31ae8ee6d36a77_7--
			curField6zgensym_db31ae8ee6d36a77_7 = decodeMsgFieldOrder6zgensym_db31ae8ee6d36a77_7[nextMiss6zgensym_db31ae8ee6d36a77_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_db31ae8ee6d36a77_7)
		switch curField6zgensym_db31ae8ee6d36a77_7 {
		// -- templateDecodeMsg ends here --

		case "HDR_zid00_rct":
			found6zgensym_db31ae8ee6d36a77_7[0] = true
			err = z.HDR.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "JobSerz_zid01_bin":
			found6zgensym_db31ae8ee6d36a77_7[1] = true
			z.JobSerz, err = dc.ReadBytes(z.JobSerz)
			if err != nil {
				return
			}
		case "JobErrs_zid02_str":
			found6zgensym_db31ae8ee6d36a77_7[2] = true
			z.JobErrs, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_db31ae8ee6d36a77_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Message
var decodeMsgFieldOrder6zgensym_db31ae8ee6d36a77_7 = []string{"HDR_zid00_rct", "JobSerz_zid01_bin", "JobErrs_zid02_str", "", ""}

var decodeMsgFieldSkip6zgensym_db31ae8ee6d36a77_7 = []bool{false, false, false, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *Message) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = false
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.JobSerz) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.JobErrs) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_db31ae8ee6d36a77_8 [5]bool
	fieldsInUse_zgensym_db31ae8ee6d36a77_9 := z.fieldsNotEmpty(empty_zgensym_db31ae8ee6d36a77_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_db31ae8ee6d36a77_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Message'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_db31ae8ee6d36a77_8[0] {
		// write "HDR_zid00_rct"
		err = en.Append(0xad, 0x48, 0x44, 0x52, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.HDR)
		if err != nil {
			return
		}
		if !dup {
			err = z.HDR.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_8[1] {
		// write "JobSerz_zid01_bin"
		err = en.Append(0xb1, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.JobSerz)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_8[2] {
		// write "JobErrs_zid02_str"
		err = en.Append(0xb1, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.JobErrs)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "HDR_zid00_rct"
		o = append(o, 0xad, 0x48, 0x44, 0x52, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.HDR.MarshalMsg(o) // not is.iface, gen/marshal.go:243
		if err != nil {
			return
		}
	}

	if !empty[1] {
		// string "JobSerz_zid01_bin"
		o = append(o, 0xb1, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.JobSerz)
	}

	if !empty[2] {
		// string "JobErrs_zid02_str"
		o = append(o, 0xb1, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.JobErrs)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Message) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_db31ae8ee6d36a77_11 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_db31ae8ee6d36a77_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_db31ae8ee6d36a77_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_db31ae8ee6d36a77_11 := totalEncodedFields10zgensym_db31ae8ee6d36a77_11
	missingFieldsLeft10zgensym_db31ae8ee6d36a77_11 := maxFields10zgensym_db31ae8ee6d36a77_11 - totalEncodedFields10zgensym_db31ae8ee6d36a77_11

	var nextMiss10zgensym_db31ae8ee6d36a77_11 int32 = -1
	var found10zgensym_db31ae8ee6d36a77_11 [maxFields10zgensym_db31ae8ee6d36a77_11]bool
	var curField10zgensym_db31ae8ee6d36a77_11 string

doneWithStruct10zgensym_db31ae8ee6d36a77_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_db31ae8ee6d36a77_11 > 0 || missingFieldsLeft10zgensym_db31ae8ee6d36a77_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_db31ae8ee6d36a77_11, missingFieldsLeft10zgensym_db31ae8ee6d36a77_11, msgp.ShowFound(found10zgensym_db31ae8ee6d36a77_11[:]), unmarshalMsgFieldOrder10zgensym_db31ae8ee6d36a77_11)
		if encodedFieldsLeft10zgensym_db31ae8ee6d36a77_11 > 0 {
			encodedFieldsLeft10zgensym_db31ae8ee6d36a77_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_db31ae8ee6d36a77_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_db31ae8ee6d36a77_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_db31ae8ee6d36a77_11 = 0
			}
			for nextMiss10zgensym_db31ae8ee6d36a77_11 < maxFields10zgensym_db31ae8ee6d36a77_11 && (found10zgensym_db31ae8ee6d36a77_11[nextMiss10zgensym_db31ae8ee6d36a77_11] || unmarshalMsgFieldSkip10zgensym_db31ae8ee6d36a77_11[nextMiss10zgensym_db31ae8ee6d36a77_11]) {
				nextMiss10zgensym_db31ae8ee6d36a77_11++
			}
			if nextMiss10zgensym_db31ae8ee6d36a77_11 == maxFields10zgensym_db31ae8ee6d36a77_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_db31ae8ee6d36a77_11
			}
			missingFieldsLeft10zgensym_db31ae8ee6d36a77_11--
			curField10zgensym_db31ae8ee6d36a77_11 = unmarshalMsgFieldOrder10zgensym_db31ae8ee6d36a77_11[nextMiss10zgensym_db31ae8ee6d36a77_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_db31ae8ee6d36a77_11)
		switch curField10zgensym_db31ae8ee6d36a77_11 {
		// -- templateUnmarshalMsg ends here --

		case "HDR_zid00_rct":
			found10zgensym_db31ae8ee6d36a77_11[0] = true
			bts, err = z.HDR.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "JobSerz_zid01_bin":
			found10zgensym_db31ae8ee6d36a77_11[1] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.JobSerz = z.JobSerz[:0]
			} else {
				z.JobSerz, bts, err = nbs.ReadBytesBytes(bts, z.JobSerz)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "JobErrs_zid02_str":
			found10zgensym_db31ae8ee6d36a77_11[2] = true
			z.JobErrs, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_db31ae8ee6d36a77_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Message
var unmarshalMsgFieldOrder10zgensym_db31ae8ee6d36a77_11 = []string{"HDR_zid00_rct", "JobSerz_zid01_bin", "JobErrs_zid02_str", "", ""}

var unmarshalMsgFieldSkip10zgensym_db31ae8ee6d36a77_11 = []bool{false, false, false, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 14 + z.HDR.Msgsize() + 18 + msgp.BytesPrefixSize + len(z.JobSerz) + 18 + msgp.StringPrefixSize + len(z.JobErrs)
	return
}
