// Code generated by GREENPACK (github.com/glycerine/greenpack2). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack2/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_db31ae8ee6d36a77_0 []byte
		zgensym_db31ae8ee6d36a77_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSlice(zgensym_db31ae8ee6d36a77_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_db31ae8ee6d36a77_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_db31ae8ee6d36a77_1 = zgensym_db31ae8ee6d36a77_1[:0]
		} else {
			zgensym_db31ae8ee6d36a77_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSlice(zgensym_db31ae8ee6d36a77_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSlice) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *MID) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_db31ae8ee6d36a77_3 = 10

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_db31ae8ee6d36a77_3 uint32
	totalEncodedFields2zgensym_db31ae8ee6d36a77_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_db31ae8ee6d36a77_3 := totalEncodedFields2zgensym_db31ae8ee6d36a77_3
	missingFieldsLeft2zgensym_db31ae8ee6d36a77_3 := maxFields2zgensym_db31ae8ee6d36a77_3 - totalEncodedFields2zgensym_db31ae8ee6d36a77_3

	var nextMiss2zgensym_db31ae8ee6d36a77_3 int32 = -1
	var found2zgensym_db31ae8ee6d36a77_3 [maxFields2zgensym_db31ae8ee6d36a77_3]bool
	var curField2zgensym_db31ae8ee6d36a77_3 string

doneWithStruct2zgensym_db31ae8ee6d36a77_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_db31ae8ee6d36a77_3 > 0 || missingFieldsLeft2zgensym_db31ae8ee6d36a77_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_db31ae8ee6d36a77_3, missingFieldsLeft2zgensym_db31ae8ee6d36a77_3, msgp.ShowFound(found2zgensym_db31ae8ee6d36a77_3[:]), decodeMsgFieldOrder2zgensym_db31ae8ee6d36a77_3)
		if encodedFieldsLeft2zgensym_db31ae8ee6d36a77_3 > 0 {
			encodedFieldsLeft2zgensym_db31ae8ee6d36a77_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_db31ae8ee6d36a77_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_db31ae8ee6d36a77_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_db31ae8ee6d36a77_3 = 0
			}
			for nextMiss2zgensym_db31ae8ee6d36a77_3 < maxFields2zgensym_db31ae8ee6d36a77_3 && (found2zgensym_db31ae8ee6d36a77_3[nextMiss2zgensym_db31ae8ee6d36a77_3] || decodeMsgFieldSkip2zgensym_db31ae8ee6d36a77_3[nextMiss2zgensym_db31ae8ee6d36a77_3]) {
				nextMiss2zgensym_db31ae8ee6d36a77_3++
			}
			if nextMiss2zgensym_db31ae8ee6d36a77_3 == maxFields2zgensym_db31ae8ee6d36a77_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_db31ae8ee6d36a77_3
			}
			missingFieldsLeft2zgensym_db31ae8ee6d36a77_3--
			curField2zgensym_db31ae8ee6d36a77_3 = decodeMsgFieldOrder2zgensym_db31ae8ee6d36a77_3[nextMiss2zgensym_db31ae8ee6d36a77_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_db31ae8ee6d36a77_3)
		switch curField2zgensym_db31ae8ee6d36a77_3 {
		// -- templateDecodeMsg ends here --

		case "Created_zid00_str":
			found2zgensym_db31ae8ee6d36a77_3[0] = true
			z.Created, err = dc.ReadString()
			if err != nil {
				return
			}
		case "From_zid01_str":
			found2zgensym_db31ae8ee6d36a77_3[1] = true
			z.From, err = dc.ReadString()
			if err != nil {
				return
			}
		case "To_zid02_str":
			found2zgensym_db31ae8ee6d36a77_3[2] = true
			z.To, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Subject_zid03_str":
			found2zgensym_db31ae8ee6d36a77_3[3] = true
			z.Subject, err = dc.ReadString()
			if err != nil {
				return
			}
		case "IsRPC_zid04_boo":
			found2zgensym_db31ae8ee6d36a77_3[4] = true
			z.IsRPC, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "IsLeg2_zid05_boo":
			found2zgensym_db31ae8ee6d36a77_3[5] = true
			z.IsLeg2, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Serial_zid06_i64":
			found2zgensym_db31ae8ee6d36a77_3[6] = true
			z.Serial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "CallID_zid07_str":
			found2zgensym_db31ae8ee6d36a77_3[7] = true
			z.CallID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "PID_zid08_i64":
			found2zgensym_db31ae8ee6d36a77_3[8] = true
			z.PID, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Seqno_zid09_u64":
			found2zgensym_db31ae8ee6d36a77_3[9] = true
			z.Seqno, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_db31ae8ee6d36a77_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MID
var decodeMsgFieldOrder2zgensym_db31ae8ee6d36a77_3 = []string{"Created_zid00_str", "From_zid01_str", "To_zid02_str", "Subject_zid03_str", "IsRPC_zid04_boo", "IsLeg2_zid05_boo", "Serial_zid06_i64", "CallID_zid07_str", "PID_zid08_i64", "Seqno_zid09_u64"}

var decodeMsgFieldSkip2zgensym_db31ae8ee6d36a77_3 = []bool{false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *MID) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 10
	}
	var fieldsInUse uint32 = 10
	isempty[0] = (len(z.Created) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.From) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.To) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Subject) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (!z.IsRPC) // bool, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (!z.IsLeg2) // bool, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.Serial == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.CallID) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.PID == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.Seqno == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *MID) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_db31ae8ee6d36a77_4 [10]bool
	fieldsInUse_zgensym_db31ae8ee6d36a77_5 := z.fieldsNotEmpty(empty_zgensym_db31ae8ee6d36a77_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_db31ae8ee6d36a77_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'MID'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x49, 0x44})
	if err != nil {
		return err
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[0] {
		// write "Created_zid00_str"
		err = en.Append(0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Created)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[1] {
		// write "From_zid01_str"
		err = en.Append(0xae, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.From)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[2] {
		// write "To_zid02_str"
		err = en.Append(0xac, 0x54, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.To)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[3] {
		// write "Subject_zid03_str"
		err = en.Append(0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Subject)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[4] {
		// write "IsRPC_zid04_boo"
		err = en.Append(0xaf, 0x49, 0x73, 0x52, 0x50, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsRPC)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[5] {
		// write "IsLeg2_zid05_boo"
		err = en.Append(0xb0, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x32, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.IsLeg2)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[6] {
		// write "Serial_zid06_i64"
		err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Serial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[7] {
		// write "CallID_zid07_str"
		err = en.Append(0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CallID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[8] {
		// write "PID_zid08_i64"
		err = en.Append(0xad, 0x50, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.PID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_4[9] {
		// write "Seqno_zid09_u64"
		err = en.Append(0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Seqno)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MID) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [10]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Created_zid00_str"
		o = append(o, 0xb1, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Created)
	}

	if !empty[1] {
		// string "From_zid01_str"
		o = append(o, 0xae, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.From)
	}

	if !empty[2] {
		// string "To_zid02_str"
		o = append(o, 0xac, 0x54, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.To)
	}

	if !empty[3] {
		// string "Subject_zid03_str"
		o = append(o, 0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Subject)
	}

	if !empty[4] {
		// string "IsRPC_zid04_boo"
		o = append(o, 0xaf, 0x49, 0x73, 0x52, 0x50, 0x43, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsRPC)
	}

	if !empty[5] {
		// string "IsLeg2_zid05_boo"
		o = append(o, 0xb0, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x32, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
		o = msgp.AppendBool(o, z.IsLeg2)
	}

	if !empty[6] {
		// string "Serial_zid06_i64"
		o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Serial)
	}

	if !empty[7] {
		// string "CallID_zid07_str"
		o = append(o, 0xb0, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CallID)
	}

	if !empty[8] {
		// string "PID_zid08_i64"
		o = append(o, 0xad, 0x50, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.PID)
	}

	if !empty[9] {
		// string "Seqno_zid09_u64"
		o = append(o, 0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Seqno)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *MID) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_db31ae8ee6d36a77_7 = 10

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_db31ae8ee6d36a77_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_db31ae8ee6d36a77_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7 := totalEncodedFields6zgensym_db31ae8ee6d36a77_7
	missingFieldsLeft6zgensym_db31ae8ee6d36a77_7 := maxFields6zgensym_db31ae8ee6d36a77_7 - totalEncodedFields6zgensym_db31ae8ee6d36a77_7

	var nextMiss6zgensym_db31ae8ee6d36a77_7 int32 = -1
	var found6zgensym_db31ae8ee6d36a77_7 [maxFields6zgensym_db31ae8ee6d36a77_7]bool
	var curField6zgensym_db31ae8ee6d36a77_7 string

doneWithStruct6zgensym_db31ae8ee6d36a77_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7 > 0 || missingFieldsLeft6zgensym_db31ae8ee6d36a77_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7, missingFieldsLeft6zgensym_db31ae8ee6d36a77_7, msgp.ShowFound(found6zgensym_db31ae8ee6d36a77_7[:]), unmarshalMsgFieldOrder6zgensym_db31ae8ee6d36a77_7)
		if encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7 > 0 {
			encodedFieldsLeft6zgensym_db31ae8ee6d36a77_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_db31ae8ee6d36a77_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_db31ae8ee6d36a77_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_db31ae8ee6d36a77_7 = 0
			}
			for nextMiss6zgensym_db31ae8ee6d36a77_7 < maxFields6zgensym_db31ae8ee6d36a77_7 && (found6zgensym_db31ae8ee6d36a77_7[nextMiss6zgensym_db31ae8ee6d36a77_7] || unmarshalMsgFieldSkip6zgensym_db31ae8ee6d36a77_7[nextMiss6zgensym_db31ae8ee6d36a77_7]) {
				nextMiss6zgensym_db31ae8ee6d36a77_7++
			}
			if nextMiss6zgensym_db31ae8ee6d36a77_7 == maxFields6zgensym_db31ae8ee6d36a77_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_db31ae8ee6d36a77_7
			}
			missingFieldsLeft6zgensym_db31ae8ee6d36a77_7--
			curField6zgensym_db31ae8ee6d36a77_7 = unmarshalMsgFieldOrder6zgensym_db31ae8ee6d36a77_7[nextMiss6zgensym_db31ae8ee6d36a77_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_db31ae8ee6d36a77_7)
		switch curField6zgensym_db31ae8ee6d36a77_7 {
		// -- templateUnmarshalMsg ends here --

		case "Created_zid00_str":
			found6zgensym_db31ae8ee6d36a77_7[0] = true
			z.Created, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "From_zid01_str":
			found6zgensym_db31ae8ee6d36a77_7[1] = true
			z.From, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "To_zid02_str":
			found6zgensym_db31ae8ee6d36a77_7[2] = true
			z.To, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Subject_zid03_str":
			found6zgensym_db31ae8ee6d36a77_7[3] = true
			z.Subject, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "IsRPC_zid04_boo":
			found6zgensym_db31ae8ee6d36a77_7[4] = true
			z.IsRPC, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "IsLeg2_zid05_boo":
			found6zgensym_db31ae8ee6d36a77_7[5] = true
			z.IsLeg2, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "Serial_zid06_i64":
			found6zgensym_db31ae8ee6d36a77_7[6] = true
			z.Serial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "CallID_zid07_str":
			found6zgensym_db31ae8ee6d36a77_7[7] = true
			z.CallID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "PID_zid08_i64":
			found6zgensym_db31ae8ee6d36a77_7[8] = true
			z.PID, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Seqno_zid09_u64":
			found6zgensym_db31ae8ee6d36a77_7[9] = true
			z.Seqno, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_db31ae8ee6d36a77_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of MID
var unmarshalMsgFieldOrder6zgensym_db31ae8ee6d36a77_7 = []string{"Created_zid00_str", "From_zid01_str", "To_zid02_str", "Subject_zid03_str", "IsRPC_zid04_boo", "IsLeg2_zid05_boo", "Serial_zid06_i64", "CallID_zid07_str", "PID_zid08_i64", "Seqno_zid09_u64"}

var unmarshalMsgFieldSkip6zgensym_db31ae8ee6d36a77_7 = []bool{false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MID) Msgsize() (s int) {
	s = 1 + 18 + msgp.StringPrefixSize + len(z.Created) + 15 + msgp.StringPrefixSize + len(z.From) + 13 + msgp.StringPrefixSize + len(z.To) + 18 + msgp.StringPrefixSize + len(z.Subject) + 16 + msgp.BoolSize + 17 + msgp.BoolSize + 17 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.CallID) + 14 + msgp.Int64Size + 16 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields8zgensym_db31ae8ee6d36a77_9 = 8

	// -- templateDecodeMsg starts here--
	var totalEncodedFields8zgensym_db31ae8ee6d36a77_9 uint32
	totalEncodedFields8zgensym_db31ae8ee6d36a77_9, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft8zgensym_db31ae8ee6d36a77_9 := totalEncodedFields8zgensym_db31ae8ee6d36a77_9
	missingFieldsLeft8zgensym_db31ae8ee6d36a77_9 := maxFields8zgensym_db31ae8ee6d36a77_9 - totalEncodedFields8zgensym_db31ae8ee6d36a77_9

	var nextMiss8zgensym_db31ae8ee6d36a77_9 int32 = -1
	var found8zgensym_db31ae8ee6d36a77_9 [maxFields8zgensym_db31ae8ee6d36a77_9]bool
	var curField8zgensym_db31ae8ee6d36a77_9 string

doneWithStruct8zgensym_db31ae8ee6d36a77_9:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft8zgensym_db31ae8ee6d36a77_9 > 0 || missingFieldsLeft8zgensym_db31ae8ee6d36a77_9 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_db31ae8ee6d36a77_9, missingFieldsLeft8zgensym_db31ae8ee6d36a77_9, msgp.ShowFound(found8zgensym_db31ae8ee6d36a77_9[:]), decodeMsgFieldOrder8zgensym_db31ae8ee6d36a77_9)
		if encodedFieldsLeft8zgensym_db31ae8ee6d36a77_9 > 0 {
			encodedFieldsLeft8zgensym_db31ae8ee6d36a77_9--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField8zgensym_db31ae8ee6d36a77_9 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss8zgensym_db31ae8ee6d36a77_9 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss8zgensym_db31ae8ee6d36a77_9 = 0
			}
			for nextMiss8zgensym_db31ae8ee6d36a77_9 < maxFields8zgensym_db31ae8ee6d36a77_9 && (found8zgensym_db31ae8ee6d36a77_9[nextMiss8zgensym_db31ae8ee6d36a77_9] || decodeMsgFieldSkip8zgensym_db31ae8ee6d36a77_9[nextMiss8zgensym_db31ae8ee6d36a77_9]) {
				nextMiss8zgensym_db31ae8ee6d36a77_9++
			}
			if nextMiss8zgensym_db31ae8ee6d36a77_9 == maxFields8zgensym_db31ae8ee6d36a77_9 {
				// filled all the empty fields!
				break doneWithStruct8zgensym_db31ae8ee6d36a77_9
			}
			missingFieldsLeft8zgensym_db31ae8ee6d36a77_9--
			curField8zgensym_db31ae8ee6d36a77_9 = decodeMsgFieldOrder8zgensym_db31ae8ee6d36a77_9[nextMiss8zgensym_db31ae8ee6d36a77_9]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_db31ae8ee6d36a77_9)
		switch curField8zgensym_db31ae8ee6d36a77_9 {
		// -- templateDecodeMsg ends here --

		case "Seqno_zid00_u64":
			found8zgensym_db31ae8ee6d36a77_9[0] = true
			z.Seqno, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Subject_zid01_str":
			found8zgensym_db31ae8ee6d36a77_9[1] = true
			z.Subject, err = dc.ReadString()
			if err != nil {
				return
			}
		case "MID_zid02_rct":
			found8zgensym_db31ae8ee6d36a77_9[2] = true
			err = z.MID.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "JobSerz_zid03_bin":
			found8zgensym_db31ae8ee6d36a77_9[3] = true
			z.JobSerz, err = dc.ReadBytes(z.JobSerz)
			if err != nil {
				return
			}
		case "JobErr_zid04_str":
			found8zgensym_db31ae8ee6d36a77_9[4] = true
			z.JobErr, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss8zgensym_db31ae8ee6d36a77_9 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Message
var decodeMsgFieldOrder8zgensym_db31ae8ee6d36a77_9 = []string{"Seqno_zid00_u64", "Subject_zid01_str", "MID_zid02_rct", "JobSerz_zid03_bin", "JobErr_zid04_str", "", "", ""}

var decodeMsgFieldSkip8zgensym_db31ae8ee6d36a77_9 = []bool{false, false, false, false, false, true, true, true}

// fieldsNotEmpty supports omitempty tags
func (z *Message) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (z.Seqno == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Subject) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = false
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.JobSerz) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.JobErr) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_db31ae8ee6d36a77_10 [8]bool
	fieldsInUse_zgensym_db31ae8ee6d36a77_11 := z.fieldsNotEmpty(empty_zgensym_db31ae8ee6d36a77_10[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_db31ae8ee6d36a77_11 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Message'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_db31ae8ee6d36a77_10[0] {
		// write "Seqno_zid00_u64"
		err = en.Append(0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Seqno)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_10[1] {
		// write "Subject_zid01_str"
		err = en.Append(0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Subject)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_10[2] {
		// write "MID_zid02_rct"
		err = en.Append(0xad, 0x4d, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		// encodeGen.gBase IDENT

		// record the interface for deduplication
		var dup bool
		dup, err = en.DedupWriteIsDup(z.MID)
		if err != nil {
			return
		}
		if !dup {
			err = z.MID.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_10[3] {
		// write "JobSerz_zid03_bin"
		err = en.Append(0xb1, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.JobSerz)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_db31ae8ee6d36a77_10[4] {
		// write "JobErr_zid04_str"
		err = en.Append(0xb0, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.JobErr)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [8]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Seqno_zid00_u64"
		o = append(o, 0xaf, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Seqno)
	}

	if !empty[1] {
		// string "Subject_zid01_str"
		o = append(o, 0xb1, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Subject)
	}

	if !empty[2] {
		// string "MID_zid02_rct"
		o = append(o, 0xad, 0x4d, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.MID.MarshalMsg(o) // not is.iface, gen/marshal.go:243
		if err != nil {
			return
		}
	}

	if !empty[3] {
		// string "JobSerz_zid03_bin"
		o = append(o, 0xb1, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.JobSerz)
	}

	if !empty[4] {
		// string "JobErr_zid04_str"
		o = append(o, 0xb0, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.JobErr)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Message) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields12zgensym_db31ae8ee6d36a77_13 = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields12zgensym_db31ae8ee6d36a77_13 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields12zgensym_db31ae8ee6d36a77_13, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft12zgensym_db31ae8ee6d36a77_13 := totalEncodedFields12zgensym_db31ae8ee6d36a77_13
	missingFieldsLeft12zgensym_db31ae8ee6d36a77_13 := maxFields12zgensym_db31ae8ee6d36a77_13 - totalEncodedFields12zgensym_db31ae8ee6d36a77_13

	var nextMiss12zgensym_db31ae8ee6d36a77_13 int32 = -1
	var found12zgensym_db31ae8ee6d36a77_13 [maxFields12zgensym_db31ae8ee6d36a77_13]bool
	var curField12zgensym_db31ae8ee6d36a77_13 string

doneWithStruct12zgensym_db31ae8ee6d36a77_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_db31ae8ee6d36a77_13 > 0 || missingFieldsLeft12zgensym_db31ae8ee6d36a77_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_db31ae8ee6d36a77_13, missingFieldsLeft12zgensym_db31ae8ee6d36a77_13, msgp.ShowFound(found12zgensym_db31ae8ee6d36a77_13[:]), unmarshalMsgFieldOrder12zgensym_db31ae8ee6d36a77_13)
		if encodedFieldsLeft12zgensym_db31ae8ee6d36a77_13 > 0 {
			encodedFieldsLeft12zgensym_db31ae8ee6d36a77_13--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField12zgensym_db31ae8ee6d36a77_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_db31ae8ee6d36a77_13 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss12zgensym_db31ae8ee6d36a77_13 = 0
			}
			for nextMiss12zgensym_db31ae8ee6d36a77_13 < maxFields12zgensym_db31ae8ee6d36a77_13 && (found12zgensym_db31ae8ee6d36a77_13[nextMiss12zgensym_db31ae8ee6d36a77_13] || unmarshalMsgFieldSkip12zgensym_db31ae8ee6d36a77_13[nextMiss12zgensym_db31ae8ee6d36a77_13]) {
				nextMiss12zgensym_db31ae8ee6d36a77_13++
			}
			if nextMiss12zgensym_db31ae8ee6d36a77_13 == maxFields12zgensym_db31ae8ee6d36a77_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_db31ae8ee6d36a77_13
			}
			missingFieldsLeft12zgensym_db31ae8ee6d36a77_13--
			curField12zgensym_db31ae8ee6d36a77_13 = unmarshalMsgFieldOrder12zgensym_db31ae8ee6d36a77_13[nextMiss12zgensym_db31ae8ee6d36a77_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_db31ae8ee6d36a77_13)
		switch curField12zgensym_db31ae8ee6d36a77_13 {
		// -- templateUnmarshalMsg ends here --

		case "Seqno_zid00_u64":
			found12zgensym_db31ae8ee6d36a77_13[0] = true
			z.Seqno, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "Subject_zid01_str":
			found12zgensym_db31ae8ee6d36a77_13[1] = true
			z.Subject, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "MID_zid02_rct":
			found12zgensym_db31ae8ee6d36a77_13[2] = true
			bts, err = z.MID.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "JobSerz_zid03_bin":
			found12zgensym_db31ae8ee6d36a77_13[3] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.JobSerz = z.JobSerz[:0]
			} else {
				z.JobSerz, bts, err = nbs.ReadBytesBytes(bts, z.JobSerz)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "JobErr_zid04_str":
			found12zgensym_db31ae8ee6d36a77_13[4] = true
			z.JobErr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_db31ae8ee6d36a77_13 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Message
var unmarshalMsgFieldOrder12zgensym_db31ae8ee6d36a77_13 = []string{"Seqno_zid00_u64", "Subject_zid01_str", "MID_zid02_rct", "JobSerz_zid03_bin", "JobErr_zid04_str", "", "", ""}

var unmarshalMsgFieldSkip12zgensym_db31ae8ee6d36a77_13 = []bool{false, false, false, false, false, true, true, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 16 + msgp.Uint64Size + 18 + msgp.StringPrefixSize + len(z.Subject) + 14 + z.MID.Msgsize() + 18 + msgp.BytesPrefixSize + len(z.JobSerz) + 17 + msgp.StringPrefixSize + len(z.JobErr)
	return
}
