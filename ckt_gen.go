// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rpc25519

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Fragment) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_f64305401993a07f_3 = 12

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_f64305401993a07f_3 uint32
	totalEncodedFields2zgensym_f64305401993a07f_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_f64305401993a07f_3 := totalEncodedFields2zgensym_f64305401993a07f_3
	missingFieldsLeft2zgensym_f64305401993a07f_3 := maxFields2zgensym_f64305401993a07f_3 - totalEncodedFields2zgensym_f64305401993a07f_3

	var nextMiss2zgensym_f64305401993a07f_3 int32 = -1
	var found2zgensym_f64305401993a07f_3 [maxFields2zgensym_f64305401993a07f_3]bool
	var curField2zgensym_f64305401993a07f_3 string

doneWithStruct2zgensym_f64305401993a07f_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_f64305401993a07f_3 > 0 || missingFieldsLeft2zgensym_f64305401993a07f_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft2zgensym_f64305401993a07f_3, missingFieldsLeft2zgensym_f64305401993a07f_3, msgp.ShowFound(found2zgensym_f64305401993a07f_3[:]), decodeMsgFieldOrder2zgensym_f64305401993a07f_3)
		if encodedFieldsLeft2zgensym_f64305401993a07f_3 > 0 {
			encodedFieldsLeft2zgensym_f64305401993a07f_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_f64305401993a07f_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_f64305401993a07f_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_f64305401993a07f_3 = 0
			}
			for nextMiss2zgensym_f64305401993a07f_3 < maxFields2zgensym_f64305401993a07f_3 && (found2zgensym_f64305401993a07f_3[nextMiss2zgensym_f64305401993a07f_3] || decodeMsgFieldSkip2zgensym_f64305401993a07f_3[nextMiss2zgensym_f64305401993a07f_3]) {
				nextMiss2zgensym_f64305401993a07f_3++
			}
			if nextMiss2zgensym_f64305401993a07f_3 == maxFields2zgensym_f64305401993a07f_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_f64305401993a07f_3
			}
			missingFieldsLeft2zgensym_f64305401993a07f_3--
			curField2zgensym_f64305401993a07f_3 = decodeMsgFieldOrder2zgensym_f64305401993a07f_3[nextMiss2zgensym_f64305401993a07f_3]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField2zgensym_f64305401993a07f_3)
		switch curField2zgensym_f64305401993a07f_3 {
		// -- templateDecodeMsg ends here --

		case "FromPeerID_zid00_str":
			found2zgensym_f64305401993a07f_3[0] = true
			z.FromPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ToPeerID_zid01_str":
			found2zgensym_f64305401993a07f_3[1] = true
			z.ToPeerID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CircuitID_zid02_str":
			found2zgensym_f64305401993a07f_3[2] = true
			z.CircuitID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Serial_zid03_i64":
			found2zgensym_f64305401993a07f_3[3] = true
			z.Serial, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Typ_zid04_rct":
			found2zgensym_f64305401993a07f_3[4] = true
			err = z.Typ.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "ServiceName_zid05_str":
			found2zgensym_f64305401993a07f_3[5] = true
			z.ServiceName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FragOp_zid06_int":
			found2zgensym_f64305401993a07f_3[6] = true
			z.FragOp, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "FragSubject_zid07_str":
			found2zgensym_f64305401993a07f_3[7] = true
			z.FragSubject, err = dc.ReadString()
			if err != nil {
				return
			}
		case "FragPart_zid08_i64":
			found2zgensym_f64305401993a07f_3[8] = true
			z.FragPart, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "Args_zid09_map":
			found2zgensym_f64305401993a07f_3[9] = true
			var zgensym_f64305401993a07f_4 uint32
			zgensym_f64305401993a07f_4, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Args == nil && zgensym_f64305401993a07f_4 > 0 {
				z.Args = make(map[string]string, zgensym_f64305401993a07f_4)
			} else if len(z.Args) > 0 {
				for key, _ := range z.Args {
					delete(z.Args, key)
				}
			}
			for zgensym_f64305401993a07f_4 > 0 {
				zgensym_f64305401993a07f_4--
				var zgensym_f64305401993a07f_0 string
				var zgensym_f64305401993a07f_1 string
				zgensym_f64305401993a07f_0, err = dc.ReadString()
				if err != nil {
					return
				}
				zgensym_f64305401993a07f_1, err = dc.ReadString()
				if err != nil {
					return
				}
				z.Args[zgensym_f64305401993a07f_0] = zgensym_f64305401993a07f_1
			}
		case "Payload_zid10_bin":
			found2zgensym_f64305401993a07f_3[10] = true
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				return
			}
		case "Err_zid11_str":
			found2zgensym_f64305401993a07f_3[11] = true
			z.Err, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_f64305401993a07f_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Fragment
var decodeMsgFieldOrder2zgensym_f64305401993a07f_3 = []string{"FromPeerID_zid00_str", "ToPeerID_zid01_str", "CircuitID_zid02_str", "Serial_zid03_i64", "Typ_zid04_rct", "ServiceName_zid05_str", "FragOp_zid06_int", "FragSubject_zid07_str", "FragPart_zid08_i64", "Args_zid09_map", "Payload_zid10_bin", "Err_zid11_str"}

var decodeMsgFieldSkip2zgensym_f64305401993a07f_3 = []bool{false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Fragment) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 12
	}
	var fieldsInUse uint32 = 12
	isempty[0] = (len(z.FromPeerID) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.ToPeerID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.CircuitID) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Serial == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = false
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ServiceName) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FragOp == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.FragSubject) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.FragPart == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.Args) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.Payload) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.Err) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Fragment) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_f64305401993a07f_5 [12]bool
	fieldsInUse_zgensym_f64305401993a07f_6 := z.fieldsNotEmpty(empty_zgensym_f64305401993a07f_5[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_f64305401993a07f_6 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Fragment'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_f64305401993a07f_5[0] {
		// write "FromPeerID_zid00_str"
		err = en.Append(0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FromPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[1] {
		// write "ToPeerID_zid01_str"
		err = en.Append(0xb2, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ToPeerID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[2] {
		// write "CircuitID_zid02_str"
		err = en.Append(0xb3, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CircuitID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[3] {
		// write "Serial_zid03_i64"
		err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Serial)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[4] {
		// write "Typ_zid04_rct"
		err = en.Append(0xad, 0x54, 0x79, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = z.Typ.EncodeMsg(en)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[5] {
		// write "ServiceName_zid05_str"
		err = en.Append(0xb5, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ServiceName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[6] {
		// write "FragOp_zid06_int"
		err = en.Append(0xb0, 0x46, 0x72, 0x61, 0x67, 0x4f, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.FragOp)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[7] {
		// write "FragSubject_zid07_str"
		err = en.Append(0xb5, 0x46, 0x72, 0x61, 0x67, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FragSubject)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[8] {
		// write "FragPart_zid08_i64"
		err = en.Append(0xb2, 0x46, 0x72, 0x61, 0x67, 0x50, 0x61, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.FragPart)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[9] {
		// write "Args_zid09_map"
		err = en.Append(0xae, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x6d, 0x61, 0x70)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Args)))
		if err != nil {
			return
		}
		for zgensym_f64305401993a07f_0, zgensym_f64305401993a07f_1 := range z.Args {
			err = en.WriteString(zgensym_f64305401993a07f_0)
			if err != nil {
				return
			}
			err = en.WriteString(zgensym_f64305401993a07f_1)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_f64305401993a07f_5[10] {
		// write "Payload_zid10_bin"
		err = en.Append(0xb1, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Payload)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_f64305401993a07f_5[11] {
		// write "Err_zid11_str"
		err = en.Append(0xad, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Err)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Fragment) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [12]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "FromPeerID_zid00_str"
		o = append(o, 0xb4, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FromPeerID)
	}

	if !empty[1] {
		// string "ToPeerID_zid01_str"
		o = append(o, 0xb2, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ToPeerID)
	}

	if !empty[2] {
		// string "CircuitID_zid02_str"
		o = append(o, 0xb3, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CircuitID)
	}

	if !empty[3] {
		// string "Serial_zid03_i64"
		o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Serial)
	}

	if !empty[4] {
		// string "Typ_zid04_rct"
		o = append(o, 0xad, 0x54, 0x79, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x72, 0x63, 0x74)
		o, err = z.Typ.MarshalMsg(o) // not is.iface
		if err != nil {
			return
		}
	}

	if !empty[5] {
		// string "ServiceName_zid05_str"
		o = append(o, 0xb5, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ServiceName)
	}

	if !empty[6] {
		// string "FragOp_zid06_int"
		o = append(o, 0xb0, 0x46, 0x72, 0x61, 0x67, 0x4f, 0x70, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.FragOp)
	}

	if !empty[7] {
		// string "FragSubject_zid07_str"
		o = append(o, 0xb5, 0x46, 0x72, 0x61, 0x67, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.FragSubject)
	}

	if !empty[8] {
		// string "FragPart_zid08_i64"
		o = append(o, 0xb2, 0x46, 0x72, 0x61, 0x67, 0x50, 0x61, 0x72, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.FragPart)
	}

	if !empty[9] {
		// string "Args_zid09_map"
		o = append(o, 0xae, 0x41, 0x72, 0x67, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x6d, 0x61, 0x70)
		o = msgp.AppendMapHeader(o, uint32(len(z.Args)))
		for zgensym_f64305401993a07f_0, zgensym_f64305401993a07f_1 := range z.Args {
			o = msgp.AppendString(o, zgensym_f64305401993a07f_0)
			o = msgp.AppendString(o, zgensym_f64305401993a07f_1)
		}
	}

	if !empty[10] {
		// string "Payload_zid10_bin"
		o = append(o, 0xb1, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.Payload)
	}

	if !empty[11] {
		// string "Err_zid11_str"
		o = append(o, 0xad, 0x45, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Err)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Fragment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Fragment) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields7zgensym_f64305401993a07f_8 = 12

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields7zgensym_f64305401993a07f_8 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields7zgensym_f64305401993a07f_8, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft7zgensym_f64305401993a07f_8 := totalEncodedFields7zgensym_f64305401993a07f_8
	missingFieldsLeft7zgensym_f64305401993a07f_8 := maxFields7zgensym_f64305401993a07f_8 - totalEncodedFields7zgensym_f64305401993a07f_8

	var nextMiss7zgensym_f64305401993a07f_8 int32 = -1
	var found7zgensym_f64305401993a07f_8 [maxFields7zgensym_f64305401993a07f_8]bool
	var curField7zgensym_f64305401993a07f_8 string

doneWithStruct7zgensym_f64305401993a07f_8:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft7zgensym_f64305401993a07f_8 > 0 || missingFieldsLeft7zgensym_f64305401993a07f_8 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft7zgensym_f64305401993a07f_8, missingFieldsLeft7zgensym_f64305401993a07f_8, msgp.ShowFound(found7zgensym_f64305401993a07f_8[:]), unmarshalMsgFieldOrder7zgensym_f64305401993a07f_8)
		if encodedFieldsLeft7zgensym_f64305401993a07f_8 > 0 {
			encodedFieldsLeft7zgensym_f64305401993a07f_8--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField7zgensym_f64305401993a07f_8 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss7zgensym_f64305401993a07f_8 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss7zgensym_f64305401993a07f_8 = 0
			}
			for nextMiss7zgensym_f64305401993a07f_8 < maxFields7zgensym_f64305401993a07f_8 && (found7zgensym_f64305401993a07f_8[nextMiss7zgensym_f64305401993a07f_8] || unmarshalMsgFieldSkip7zgensym_f64305401993a07f_8[nextMiss7zgensym_f64305401993a07f_8]) {
				nextMiss7zgensym_f64305401993a07f_8++
			}
			if nextMiss7zgensym_f64305401993a07f_8 == maxFields7zgensym_f64305401993a07f_8 {
				// filled all the empty fields!
				break doneWithStruct7zgensym_f64305401993a07f_8
			}
			missingFieldsLeft7zgensym_f64305401993a07f_8--
			curField7zgensym_f64305401993a07f_8 = unmarshalMsgFieldOrder7zgensym_f64305401993a07f_8[nextMiss7zgensym_f64305401993a07f_8]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField7zgensym_f64305401993a07f_8)
		switch curField7zgensym_f64305401993a07f_8 {
		// -- templateUnmarshalMsg ends here --

		case "FromPeerID_zid00_str":
			found7zgensym_f64305401993a07f_8[0] = true
			z.FromPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ToPeerID_zid01_str":
			found7zgensym_f64305401993a07f_8[1] = true
			z.ToPeerID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CircuitID_zid02_str":
			found7zgensym_f64305401993a07f_8[2] = true
			z.CircuitID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Serial_zid03_i64":
			found7zgensym_f64305401993a07f_8[3] = true
			z.Serial, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Typ_zid04_rct":
			found7zgensym_f64305401993a07f_8[4] = true
			bts, err = z.Typ.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "ServiceName_zid05_str":
			found7zgensym_f64305401993a07f_8[5] = true
			z.ServiceName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FragOp_zid06_int":
			found7zgensym_f64305401993a07f_8[6] = true
			z.FragOp, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "FragSubject_zid07_str":
			found7zgensym_f64305401993a07f_8[7] = true
			z.FragSubject, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "FragPart_zid08_i64":
			found7zgensym_f64305401993a07f_8[8] = true
			z.FragPart, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "Args_zid09_map":
			found7zgensym_f64305401993a07f_8[9] = true
			if nbs.AlwaysNil {
				if len(z.Args) > 0 {
					for key, _ := range z.Args {
						delete(z.Args, key)
					}
				}

			} else {

				var zgensym_f64305401993a07f_9 uint32
				zgensym_f64305401993a07f_9, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Args == nil && zgensym_f64305401993a07f_9 > 0 {
					z.Args = make(map[string]string, zgensym_f64305401993a07f_9)
				} else if len(z.Args) > 0 {
					for key, _ := range z.Args {
						delete(z.Args, key)
					}
				}
				for zgensym_f64305401993a07f_9 > 0 {
					var zgensym_f64305401993a07f_0 string
					var zgensym_f64305401993a07f_1 string
					zgensym_f64305401993a07f_9--
					zgensym_f64305401993a07f_0, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zgensym_f64305401993a07f_1, bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
					z.Args[zgensym_f64305401993a07f_0] = zgensym_f64305401993a07f_1
				}
			}
		case "Payload_zid10_bin":
			found7zgensym_f64305401993a07f_8[10] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Payload = z.Payload[:0]
			} else {
				z.Payload, bts, err = nbs.ReadBytesBytes(bts, z.Payload)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "Err_zid11_str":
			found7zgensym_f64305401993a07f_8[11] = true
			z.Err, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss7zgensym_f64305401993a07f_8 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Fragment
var unmarshalMsgFieldOrder7zgensym_f64305401993a07f_8 = []string{"FromPeerID_zid00_str", "ToPeerID_zid01_str", "CircuitID_zid02_str", "Serial_zid03_i64", "Typ_zid04_rct", "ServiceName_zid05_str", "FragOp_zid06_int", "FragSubject_zid07_str", "FragPart_zid08_i64", "Args_zid09_map", "Payload_zid10_bin", "Err_zid11_str"}

var unmarshalMsgFieldSkip7zgensym_f64305401993a07f_8 = []bool{false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Fragment) Msgsize() (s int) {
	s = 1 + 21 + msgp.StringPrefixSize + len(z.FromPeerID) + 19 + msgp.StringPrefixSize + len(z.ToPeerID) + 20 + msgp.StringPrefixSize + len(z.CircuitID) + 17 + msgp.Int64Size + 14 + z.Typ.Msgsize() + 22 + msgp.StringPrefixSize + len(z.ServiceName) + 17 + msgp.IntSize + 22 + msgp.StringPrefixSize + len(z.FragSubject) + 19 + msgp.Int64Size + 15 + msgp.MapHeaderSize
	if z.Args != nil {
		for zgensym_f64305401993a07f_0, zgensym_f64305401993a07f_1 := range z.Args {
			_ = zgensym_f64305401993a07f_1
			_ = zgensym_f64305401993a07f_0
			s += msgp.StringPrefixSize + len(zgensym_f64305401993a07f_0) + msgp.StringPrefixSize + len(zgensym_f64305401993a07f_1)
		}
	}
	s += 18 + msgp.BytesPrefixSize + len(z.Payload) + 14 + msgp.StringPrefixSize + len(z.Err)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *QueryLocalPeerPump) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields10zgensym_f64305401993a07f_11 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields10zgensym_f64305401993a07f_11 uint32
	totalEncodedFields10zgensym_f64305401993a07f_11, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft10zgensym_f64305401993a07f_11 := totalEncodedFields10zgensym_f64305401993a07f_11
	missingFieldsLeft10zgensym_f64305401993a07f_11 := maxFields10zgensym_f64305401993a07f_11 - totalEncodedFields10zgensym_f64305401993a07f_11

	var nextMiss10zgensym_f64305401993a07f_11 int32 = -1
	var found10zgensym_f64305401993a07f_11 [maxFields10zgensym_f64305401993a07f_11]bool
	var curField10zgensym_f64305401993a07f_11 string

doneWithStruct10zgensym_f64305401993a07f_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_f64305401993a07f_11 > 0 || missingFieldsLeft10zgensym_f64305401993a07f_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft10zgensym_f64305401993a07f_11, missingFieldsLeft10zgensym_f64305401993a07f_11, msgp.ShowFound(found10zgensym_f64305401993a07f_11[:]), decodeMsgFieldOrder10zgensym_f64305401993a07f_11)
		if encodedFieldsLeft10zgensym_f64305401993a07f_11 > 0 {
			encodedFieldsLeft10zgensym_f64305401993a07f_11--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField10zgensym_f64305401993a07f_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_f64305401993a07f_11 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss10zgensym_f64305401993a07f_11 = 0
			}
			for nextMiss10zgensym_f64305401993a07f_11 < maxFields10zgensym_f64305401993a07f_11 && (found10zgensym_f64305401993a07f_11[nextMiss10zgensym_f64305401993a07f_11] || decodeMsgFieldSkip10zgensym_f64305401993a07f_11[nextMiss10zgensym_f64305401993a07f_11]) {
				nextMiss10zgensym_f64305401993a07f_11++
			}
			if nextMiss10zgensym_f64305401993a07f_11 == maxFields10zgensym_f64305401993a07f_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_f64305401993a07f_11
			}
			missingFieldsLeft10zgensym_f64305401993a07f_11--
			curField10zgensym_f64305401993a07f_11 = decodeMsgFieldOrder10zgensym_f64305401993a07f_11[nextMiss10zgensym_f64305401993a07f_11]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField10zgensym_f64305401993a07f_11)
		switch curField10zgensym_f64305401993a07f_11 {
		// -- templateDecodeMsg ends here --

		case "OpenCircuitCount__int":
			found10zgensym_f64305401993a07f_11[0] = true
			z.OpenCircuitCount, err = dc.ReadInt()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_f64305401993a07f_11 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of QueryLocalPeerPump
var decodeMsgFieldOrder10zgensym_f64305401993a07f_11 = []string{"OpenCircuitCount__int", ""}

var decodeMsgFieldSkip10zgensym_f64305401993a07f_11 = []bool{false, true}

// fieldsNotEmpty supports omitempty tags
func (z *QueryLocalPeerPump) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.OpenCircuitCount == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *QueryLocalPeerPump) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_f64305401993a07f_12 [2]bool
	fieldsInUse_zgensym_f64305401993a07f_13 := z.fieldsNotEmpty(empty_zgensym_f64305401993a07f_12[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_f64305401993a07f_13 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'QueryLocalPeerPump'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x50, 0x75, 0x6d, 0x70})
	if err != nil {
		return err
	}

	if !empty_zgensym_f64305401993a07f_12[0] {
		// write "OpenCircuitCount__int"
		err = en.Append(0xb5, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.OpenCircuitCount)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryLocalPeerPump) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "OpenCircuitCount__int"
		o = append(o, 0xb5, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.OpenCircuitCount)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryLocalPeerPump) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *QueryLocalPeerPump) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields14zgensym_f64305401993a07f_15 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields14zgensym_f64305401993a07f_15 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields14zgensym_f64305401993a07f_15, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft14zgensym_f64305401993a07f_15 := totalEncodedFields14zgensym_f64305401993a07f_15
	missingFieldsLeft14zgensym_f64305401993a07f_15 := maxFields14zgensym_f64305401993a07f_15 - totalEncodedFields14zgensym_f64305401993a07f_15

	var nextMiss14zgensym_f64305401993a07f_15 int32 = -1
	var found14zgensym_f64305401993a07f_15 [maxFields14zgensym_f64305401993a07f_15]bool
	var curField14zgensym_f64305401993a07f_15 string

doneWithStruct14zgensym_f64305401993a07f_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_f64305401993a07f_15 > 0 || missingFieldsLeft14zgensym_f64305401993a07f_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %%v, missingFieldsLeft: %%v, found: '%%v', fields: '%%#v'\n", encodedFieldsLeft14zgensym_f64305401993a07f_15, missingFieldsLeft14zgensym_f64305401993a07f_15, msgp.ShowFound(found14zgensym_f64305401993a07f_15[:]), unmarshalMsgFieldOrder14zgensym_f64305401993a07f_15)
		if encodedFieldsLeft14zgensym_f64305401993a07f_15 > 0 {
			encodedFieldsLeft14zgensym_f64305401993a07f_15--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField14zgensym_f64305401993a07f_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_f64305401993a07f_15 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss14zgensym_f64305401993a07f_15 = 0
			}
			for nextMiss14zgensym_f64305401993a07f_15 < maxFields14zgensym_f64305401993a07f_15 && (found14zgensym_f64305401993a07f_15[nextMiss14zgensym_f64305401993a07f_15] || unmarshalMsgFieldSkip14zgensym_f64305401993a07f_15[nextMiss14zgensym_f64305401993a07f_15]) {
				nextMiss14zgensym_f64305401993a07f_15++
			}
			if nextMiss14zgensym_f64305401993a07f_15 == maxFields14zgensym_f64305401993a07f_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_f64305401993a07f_15
			}
			missingFieldsLeft14zgensym_f64305401993a07f_15--
			curField14zgensym_f64305401993a07f_15 = unmarshalMsgFieldOrder14zgensym_f64305401993a07f_15[nextMiss14zgensym_f64305401993a07f_15]
		}
		//fmt.Printf("switching on curField: '%%v'\n", curField14zgensym_f64305401993a07f_15)
		switch curField14zgensym_f64305401993a07f_15 {
		// -- templateUnmarshalMsg ends here --

		case "OpenCircuitCount__int":
			found14zgensym_f64305401993a07f_15[0] = true
			z.OpenCircuitCount, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_f64305401993a07f_15 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of QueryLocalPeerPump
var unmarshalMsgFieldOrder14zgensym_f64305401993a07f_15 = []string{"OpenCircuitCount__int", ""}

var unmarshalMsgFieldSkip14zgensym_f64305401993a07f_15 = []bool{false, true}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryLocalPeerPump) Msgsize() (s int) {
	s = 1 + 22 + msgp.IntSize
	return
}
