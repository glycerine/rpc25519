GitHub Copilot
To encrypt a message using X25519 such that it can only be decrypted with the recipient's private key (and not with the public key), follow these steps:

Pseudocode Plan:

Sender Side:

Generate an ephemeral X25519 key pair (ephemeralPrivate, ephemeralPublic).
Compute a shared secret using the sender's ephemeralPrivate and the recipient's recipientPublicKey:
Derive a symmetric encryption key from the sharedSecret using a Key Derivation Function (KDF), such as HKDF with SHA-256.
Encrypt the plaintext message using a symmetric encryption algorithm (e.g., ChaCha20-Poly1305) with the derived symmetric key.
Send the ephemeralPublic key and the ciphertext to the recipient.
Recipient Side:

Compute the shared secret using the recipient's recipientPrivateKey and the received ephemeralPublic:
Derive the symmetric decryption key from the sharedSecret using the same KDF.
Decrypt the ciphertext using the symmetric key to obtain the plaintext message.
Implementation in Go:

GitHub Copilot
Using X25519 or Ed25519 primitives in Go for public-key encryption—as described—is a bit nuanced due to the primary purposes of these algorithms:

Ed25519 is designed for creating digital signatures, not for encryption.
X25519 is intended for performing Diffie-Hellman key exchanges to derive shared secrets between parties.
However, you can achieve the functionality of encrypting a message with a recipient's public key such that only the recipient can decrypt it (and not even the sender) by using the NaCl (Networking and Cryptography library) box construction, which is based on Curve25519 (the underlying curve for X25519).

In Go, the golang.org/x/crypto/nacl/box package implements this pattern:

Encryption Process:

Ephemeral Key Pair Generation: The sender generates a one-time ephemeral key pair (public and private keys). Although you mentioned "forget ephemeral keys," this step doesn't require prior exchange or interaction and is intrinsic to achieving the desired security properties.
Shared Secret Derivation: The sender combines their ephemeral private key with the recipient's public key using X25519 to compute a shared secret.
Message Encryption: The sender encrypts the message using the shared secret (typically with a symmetric cipher like XSalsa20-Poly1305).
Data Transmission: The sender sends the encrypted message along with their ephemeral public key to the recipient.
Decryption Process:

Shared Secret Derivation: The recipient uses their private key and the sender's ephemeral public key to derive the same shared secret.
Message Decryption: The recipient decrypts the message using the shared secret.
Key Points:

Sender Cannot Decrypt: Since the sender does not possess the recipient's private key, they cannot derive the shared secret after discarding their ephemeral private key. Thus, they cannot decrypt the message once it's encrypted.
No Prior Key Exchange Needed: This method does not require any prior exchange of ephemeral keys or interactive handshake, satisfying the "no ephemeral keys" condition in the sense of pre-existing state.
Security Assurance: The use of ephemeral keys on the sender's side ensures forward secrecy and that only the intended recipient can decrypt the message.
Limitations with Ed25519 and X25519 Alone:

Ed25519: As a signature scheme, it doesn't support encryption operations.
X25519: While it facilitates key agreement, it doesn't provide encryption on its own without incorporating ephemeral keys as part of the encryption process.
Conclusion:

To encrypt a message using the recipient's public key such that only they can decrypt it—and neither the sender nor anyone else with the public key can decrypt it—you can use the box pattern from the NaCl library implemented in Go's golang.org/x/crypto/nacl/box package. This method employs ephemeral keys in a way that doesn't require prior exchange or interaction and aligns with the security properties you're seeking.



package main

import (
    "crypto/rand"
    "crypto/sha256"
    "fmt"
    "io"

    "golang.org/x/crypto/chacha20poly1305"
    "golang.org/x/crypto/curve25519"
    "golang.org/x/crypto/hkdf"
)

func encrypt(recipientPublicKey [32]byte, plaintext []byte) (ephemeralPublicKey [32]byte, ciphertext []byte, err error) {
    // Generate ephemeral private key
    var ephemeralPrivateKey [32]byte
    _, err = rand.Read(ephemeralPrivateKey[:])
    if err != nil {
        return
    }

    // Compute ephemeral public key
    curve25519.ScalarBaseMult(&ephemeralPublicKey, &ephemeralPrivateKey)

    // Compute shared secret
    var sharedSecret [32]byte
    curve25519.ScalarMult(&sharedSecret, &ephemeralPrivateKey, &recipientPublicKey)

    // Derive symmetric key using HKDF with SHA-256
    hkdf := hkdf.New(sha256.New, sharedSecret[:], nil, nil)
    symmetricKey := make([]byte, chacha20poly1305.KeySize)
    _, err = io.ReadFull(hkdf, symmetricKey)
    if err != nil {
        return
    }

    // Encrypt the plaintext using ChaCha20-Poly1305
    aead, err := chacha20poly1305.New(symmetricKey)
    if err != nil {
        return
    }
    nonce := make([]byte, aead.NonceSize())
    _, err = rand.Read(nonce)
    if err != nil {
        return
    }
    ciphertext = aead.Seal(nonce, nonce, plaintext, nil)
    return
}

func decrypt(recipientPrivateKey [32]byte, ephemeralPublicKey [32]byte, ciphertext []byte) (plaintext []byte, err error) {
    // Compute shared secret
    var sharedSecret [32]byte
    curve25519.ScalarMult(&sharedSecret, &recipientPrivateKey, &ephemeralPublicKey)

    // Derive symmetric key using HKDF with SHA-256
    hkdf := hkdf.New(sha256.New, sharedSecret[:], nil, nil)
    symmetricKey := make([]byte, chacha20poly1305.KeySize)
    _, err = io.ReadFull(hkdf, symmetricKey)
    if err != nil {
        return
    }

    // Decrypt the ciphertext using ChaCha20-Poly1305
    aead, err := chacha20poly1305.New(symmetricKey)
    if err != nil {
        return
    }
    if len(ciphertext) < aead.NonceSize() {
        err = fmt.Errorf("ciphertext too short")
        return
    }
    nonce, ct := ciphertext[:aead.NonceSize()], ciphertext[aead.NonceSize():]
    plaintext, err = aead.Open(nil, nonce, ct, nil)
    return
}

func main() {
    // Recipient generates a key pair
    var recipientPrivateKey, recipientPublicKey [32]byte
    _, err := rand.Read(recipientPrivateKey[:])
    if err != nil {
        panic(err)
    }
    curve25519.ScalarBaseMult(&recipientPublicKey, &recipientPrivateKey)

    // Message to encrypt
    message := []byte("Hello, this is a secret message.")

    // Sender encrypts the message
    ephemeralPublicKey, ciphertext, err := encrypt(recipientPublicKey, message)
    if err != nil {
        panic(err)
    }

    // Recipient decrypts the message
    decryptedMessage, err := decrypt(recipientPrivateKey, ephemeralPublicKey, ciphertext)
    if err != nil {
        panic(err)
    }

    fmt.Printf("Decrypted message: %s\n", decryptedMessage)
}
